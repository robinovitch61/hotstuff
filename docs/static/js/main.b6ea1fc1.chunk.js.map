{"version":3,"sources":["components/App.tsx","index.tsx"],"names":["colors","DEFAULT_NODES","DEFAULT_CONNECTIONS","StyledForm","styled","form","StyledFormShortTextInput","div","StyledFormLongTextInput","StyledLabelShort","label","StyledLabelLong","StyledTextArea","textarea","StyledSubmit","input","FormShortTextInput","props","type","defaultValue","defaultVal","onChange","event","FormLongTextInput","style","marginRight","App","useState","undefined","results","setResults","totalTimeS","setTotalTimeS","timeStepS","setTimeStepS","parseTextToNodes","nodes","setNodes","nodeText","setNodeText","parseTextToConnections","connections","setConnections","connectionText","setConnectionText","runModel","start","performance","now","run","end","console","log","text","JSON5","map","node","makeNode","name","temperatureDegC","capacitanceJPerDegK","powerGenW","isBoundary","e","error","conn","sourceNode","filter","targetNode","makeConnection","source","target","resistanceDegKPerW","kind","useEffect","plotParams","left","right","top","bottom","onSubmit","preventDefault","temps","length","LineChart","width","height","data","reshaped","timeSeriesS","t","nodeTemp","tempDegC","forEach","idx","plotShape","margin","CartesianGrid","strokeDasharray","XAxis","dataKey","YAxis","Tooltip","Legend","nodeTemps","Line","stroke","activeDot","r","id","value","parseFloat","JSON","stringify","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.b6ea1fc1.chunk.js","sourcesContent":["import React, { ChangeEvent, useEffect, useRef, useState } from \"react\";\nimport Qty from \"js-quantities\"; // https://github.com/gentooboontoo/js-quantities/blob/master/src/quantities/definitions.js\nimport Canvas from \"./Canvas/Canvas\";\nimport * as JSON5 from \"json5\";\nimport {\n  run,\n  makeNode,\n  makeConnection,\n  ModelOutput,\n  TempOutput,\n  Node as HSNode,\n  Connection,\n} from \"hotstuff-network\";\nimport * as d3 from \"d3\";\nimport styled from \"styled-components\";\nimport {\n  CartesianGrid,\n  Legend,\n  Line,\n  LineChart,\n  ResponsiveContainer,\n  Tooltip,\n  XAxis,\n  YAxis,\n} from \"recharts\";\n\nconst colors = [\n  \"#16a085\",\n  \"#2ecc71\",\n  \"#3498db\",\n  \"#9b59b6\",\n  \"#34495e\",\n  \"#f1c40f\",\n  \"#e67e22\",\n  \"#e74c3c\",\n];\n\nconst DEFAULT_TIMESTEP = 0.1;\n\nconst DEFAULT_TOTAL_TIME = 50;\n\nconst DEFAULT_NODES = `[\n  {\n    \"name\": \"first\",\n    \"temperatureDegC\": 120,\n    \"capacitanceJPerDegK\": 200,\n    \"powerGenW\": 0,\n    \"isBoundary\": false\n  },\n  {\n    \"name\": \"second\",\n    \"temperatureDegC\": 40,\n    \"capacitanceJPerDegK\": 10,\n    \"powerGenW\": 3,\n    \"isBoundary\": true\n  },\n  {\n    \"name\": \"third\",\n    \"temperatureDegC\": -10,\n    \"capacitanceJPerDegK\": 800,\n    \"powerGenW\": 0,\n    \"isBoundary\": false\n  },\n]`;\n\nconst DEFAULT_CONNECTIONS = `[\n  {\n    source: \"first\",\n    target: \"second\",\n    resistanceDegKPerW: 0.1,\n    kind: \"bi\",\n  },\n  {\n    source: \"second\",\n    target: \"third\",\n    resistanceDegKPerW: 10,\n    kind: \"bi\",\n  },\n]`;\n\nexport type Point = {\n  xPos: number;\n  yPos: number;\n};\n\nexport type HotNode = {\n  topLeftCorner: Point;\n  bottomRightCorner: Point;\n  shape: \"Circle\" | \"Rectangle\";\n  thermalCapacitance: Qty;\n  temperature: Qty;\n  isBoundary: boolean;\n};\n\nconst StyledForm = styled.form`\n  display: flex;\n  flex-direction: column;\n  width: 100%;\n  align-items: center;\n`;\n\nconst StyledFormShortTextInput = styled.div`\n  display: flex;\n  width: 100%;\n  justify-content: center;\n  margin: 0.5em;\n`;\n\nconst StyledFormLongTextInput = styled.div`\n  display: flex;\n  width: 100%;\n  justify-content: center;\n  margin: 0.5em;\n`;\n\nconst StyledLabelShort = styled.label`\n  display: flex;\n  width: 400px;\n  justify-content: space-between;\n`;\n\nconst StyledLabelLong = styled.label`\n  display: flex;\n  width: 600px;\n  justify-content: space-between;\n`;\n\nconst StyledTextArea = styled.textarea`\n  width: 80%;\n  min-width: 80%;\n  max-width: 80%;\n  min-height: 200px;\n`;\n\nconst StyledSubmit = styled.input`\n  width: 100px;\n  height: 30px;\n`;\n\nfunction getTempRange(nodeTemps: TempOutput[]): number[] {\n  const range = [0, 0];\n  nodeTemps.forEach((temps) => {\n    const min = Math.min(...temps.tempDegC);\n    const max = Math.max(...temps.tempDegC);\n    if (min < range[0]) {\n      range[0] = min;\n    }\n    if (max > range[1]) {\n      range[1] = max;\n    }\n  });\n  return range;\n}\n\ntype FormShortTextInputProps = {\n  label: string;\n  defaultVal?: number;\n  onChange: (event: ChangeEvent<HTMLInputElement>) => void;\n};\n\ntype FormLongTextInputProps = {\n  label: string;\n  defaultVal?: string;\n  onChange: (event: ChangeEvent<HTMLTextAreaElement>) => void;\n};\n\nfunction FormShortTextInput(props: FormShortTextInputProps) {\n  return (\n    <StyledFormShortTextInput>\n      <StyledLabelShort>\n        {props.label}\n        <input\n          type=\"text\"\n          defaultValue={props.defaultVal}\n          onChange={(event) => props.onChange(event)}\n        />\n      </StyledLabelShort>\n    </StyledFormShortTextInput>\n  );\n}\n\nfunction FormLongTextInput(props: FormLongTextInputProps) {\n  return (\n    <StyledFormLongTextInput>\n      <StyledLabelLong>\n        <div style={{ marginRight: \"10px\" }}>{props.label}</div>\n        <StyledTextArea\n          defaultValue={props.defaultVal}\n          onChange={(event) => props.onChange(event)}\n        />\n      </StyledLabelLong>\n    </StyledFormLongTextInput>\n  );\n}\n\nexport default function App() {\n  const [results, setResults] = useState<ModelOutput | undefined>(undefined);\n  const [totalTimeS, setTotalTimeS] = useState(DEFAULT_TOTAL_TIME);\n  const [timeStepS, setTimeStepS] = useState(DEFAULT_TIMESTEP);\n  const [nodes, setNodes] = useState<HSNode[]>(parseTextToNodes(DEFAULT_NODES));\n  const [nodeText, setNodeText] = useState(DEFAULT_NODES);\n  const [connections, setConnections] = useState<Connection[]>(\n    parseTextToConnections(parseTextToNodes(DEFAULT_NODES), DEFAULT_CONNECTIONS)\n  );\n  const [connectionText, setConnectionText] = useState(DEFAULT_CONNECTIONS);\n  const [plot, setPlot] = useState<null | d3.Selection<\n    SVGSVGElement | null,\n    unknown,\n    null,\n    undefined\n  >>(null);\n\n  // run model once on load\n  useEffect(() => {\n    const results = runModel();\n    setResults(results);\n  }, []);\n\n  // update both nodes and connections on text update\n  useEffect(() => {\n    const nodes = parseTextToNodes(nodeText);\n    setNodes(nodes);\n    const connections = parseTextToConnections(nodes, connectionText);\n    setConnections(connections);\n  }, [nodeText, connectionText]);\n\n  function runModel(): ModelOutput {\n    const start = performance.now();\n    const results = run({\n      nodes,\n      connections,\n      timeStepS,\n      totalTimeS,\n    });\n    const end = performance.now();\n    console.log(`Model took ${end - start} ms`);\n    return results;\n  }\n\n  function parseTextToNodes(text: string): HSNode[] {\n    try {\n      const parsed = JSON5.parse(text);\n      return parsed.map((node: any) =>\n        makeNode({\n          name: node[\"name\"],\n          temperatureDegC: node[\"temperatureDegC\"],\n          capacitanceJPerDegK: node[\"capacitanceJPerDegK\"],\n          powerGenW: node[\"powerGenW\"],\n          isBoundary: node[\"isBoundary\"],\n        })\n      );\n    } catch (e) {\n      console.error(e);\n      return [];\n    }\n  }\n\n  function parseTextToConnections(nodes: HSNode[], text: string): Connection[] {\n    try {\n      const parsed = JSON5.parse(text);\n      return parsed.map((conn: any) => {\n        const sourceNode = nodes.filter(\n          (node) => node.name === conn[\"source\"]\n        )[0];\n        const targetNode = nodes.filter(\n          (node) => node.name === conn[\"target\"]\n        )[0];\n        return makeConnection({\n          source: sourceNode,\n          target: targetNode,\n          resistanceDegKPerW: conn[\"resistanceDegKPerW\"],\n          kind: conn[\"bi\"],\n        });\n      });\n    } catch (e) {\n      console.error(e);\n      return [];\n    }\n  }\n\n  // show the temps of the first node as dots vertically along the svg\n  const plotParams = {\n    width: 700,\n    height: 400,\n    margin: {\n      left: 40,\n      right: 40,\n      top: 40,\n      bottom: 40,\n    },\n  };\n\n  function plotShape(data: ModelOutput) {\n    const reshaped: any[] = data.timeSeriesS.map((t) => ({ name: t }));\n    data.temps.map((nodeTemp) => {\n      nodeTemp.tempDegC.forEach((t, idx) => {\n        reshaped[idx][nodeTemp.node.name] = t;\n      });\n    });\n    return reshaped;\n  }\n\n  return (\n    <div>\n      {/*<pre>{JSON.stringify(nodes, null, 2)}</pre>*/}\n      {/*<pre>{JSON.stringify(connections, null, 2)}</pre>*/}\n      <StyledForm\n        onSubmit={(event) => {\n          try {\n            setResults(runModel());\n          } catch (e) {\n            console.error(e);\n          }\n          event.preventDefault();\n        }}\n      >\n        {!!results && results.temps.length > 0 ? (\n          <LineChart\n            width={plotParams.width}\n            height={plotParams.height}\n            data={plotShape(results)}\n            margin={{\n              top: plotParams.margin.top,\n              right: plotParams.margin.right,\n              left: plotParams.margin.left,\n              bottom: plotParams.margin.bottom,\n            }}\n          >\n            <CartesianGrid strokeDasharray=\"3 3\" />\n            <XAxis dataKey=\"name\" />\n            <YAxis />\n            <Tooltip />\n            <Legend />\n            {results.temps.map((nodeTemps, idx) => {\n              return (\n                <Line\n                  key={nodeTemps.node.id}\n                  type={\"monotone\"}\n                  dataKey={nodeTemps.node.name}\n                  stroke={colors[idx]}\n                  activeDot={{ r: 8 }}\n                />\n              );\n            })}\n          </LineChart>\n        ) : (\n          <h1>Welcome to hotstuff.network</h1>\n        )}\n        <StyledSubmit type=\"submit\" value=\"Go\" />\n        <FormShortTextInput\n          label={\"Time Step [seconds]\"}\n          defaultVal={DEFAULT_TIMESTEP}\n          onChange={(event) => setTimeStepS(parseFloat(event.target.value))}\n        />\n        <FormShortTextInput\n          label={\"Total Run Time [seconds]\"}\n          defaultVal={DEFAULT_TOTAL_TIME}\n          onChange={(event) => setTotalTimeS(parseFloat(event.target.value))}\n        />\n        <FormLongTextInput\n          label={\"Nodes\"}\n          defaultVal={DEFAULT_NODES}\n          onChange={(event) => setNodeText(event.target.value)}\n        />\n        <FormLongTextInput\n          label={\"Connections\"}\n          defaultVal={DEFAULT_CONNECTIONS}\n          onChange={(event) => setConnectionText(event.target.value)}\n        />\n      </StyledForm>\n      <pre>{JSON.stringify(results, null, 2)}</pre>\n    </div>\n  );\n  // return <Canvas nodes={nodes} addNode={addNode} />;\n}\n\n// function runModel() {\n//   const firstNode = makeNode({\n//     name: \"first\",\n//     temperatureDegC: 10,\n//     capacitanceJPerDegK: 100,\n//     powerGenW: 0,\n//     isBoundary: false,\n//   });\n//\n//   const secondNode = makeNode({\n//     name: \"second\",\n//     temperatureDegC: 40,\n//     capacitanceJPerDegK: 40,\n//     powerGenW: 0,\n//     isBoundary: false,\n//   });\n//\n//   const thirdNode = makeNode({\n//     name: \"third\",\n//     temperatureDegC: 120,\n//     capacitanceJPerDegK: 200,\n//     powerGenW: 0,\n//     isBoundary: false,\n//   });\n//\n//   const conn12 = makeConnection({\n//     source: firstNode,\n//     target: secondNode,\n//     resistanceDegKPerW: 1,\n//     kind: \"bi\",\n//   });\n//\n//   const conn23 = makeConnection({\n//     source: secondNode,\n//     target: thirdNode,\n//     resistanceDegKPerW: 2,\n//     kind: \"bi\",\n//   });\n//\n//   const conn31 = makeConnection({\n//     source: thirdNode,\n//     target: firstNode,\n//     resistanceDegKPerW: 3,\n//     kind: \"bi\",\n//   });\n//\n//   const start = performance.now();\n//   const results = run({\n//     nodes: [firstNode, secondNode, thirdNode],\n//     connections: [conn12, conn23, conn31],\n//     timeStepS: 0.1,\n//     totalTimeS: 100,\n//   });\n//   const end = performance.now();\n//\n//   console.log(JSON.stringify(results, null, 2));\n//   console.log(`Model took ${end - start} ms`);\n//\n//   return results;\n// }\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./components/App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}