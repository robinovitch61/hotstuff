{"version":3,"sources":["config.ts","components/Sidebar/EditableTable/style.ts","components/Sidebar/EditableTable/TableHeader.tsx","components/Sidebar/EditableTable/cells/DropDownTableCell.tsx","components/Sidebar/style.ts","components/Sidebar/EditableInput.tsx","components/Sidebar/EditableStringInput.tsx","components/Sidebar/EditableTable/cells/TextTableCell.tsx","components/Sidebar/EditableNumberInput.tsx","components/Sidebar/EditableTable/cells/NumericalTableCell.tsx","components/Sidebar/EditableTable/cells/BooleanTableCell.tsx","components/Sidebar/EditableTable/TableCell.tsx","components/Sidebar/EditableTable/hooks/useSortableTable.ts","components/Sidebar/EditableTable/NodeTable/NodeTable.tsx","components/Sidebar/EditableTable/ConnectionTable/ConnectionTable.tsx","components/Tabs/Tabs.tsx","components/Sidebar/ModelControls.tsx","components/Sidebar/Sidebar.tsx","components/Plot/LinePlot.tsx","components/Plot/Plot.tsx","utils/pointUtils.ts","components/Canvas/canvasUtils.ts","components/Canvas/hooks/usePanZoomCanvas.ts","components/Canvas/Controls.tsx","components/Canvas/Canvas.tsx","components/Canvas/hooks/useOnClickCanvas.ts","hooks/useDoubleClick.ts","hooks/useAddConnection.ts","hooks/useMoveNode.ts","hooks/useMultiSelect.ts","hooks/useOnMouseDown.ts","default.ts","App.tsx","hooks/useSessionStorageState.ts","hooks/useNodeConnectionUtils.ts","hooks/useKeyDown.ts","hooks/useDraw.ts","components/Canvas/hooks/useWindowSize.ts","utils/scrollBar.ts","index.tsx"],"names":["config","defaultTempDegC","defaultCapJPerDegK","defaultPowerGenW","canvasHeightPerc","editorWidthPerc","defaultTotalTimeSeconds","defaultTimeStepSeconds","defaultNodeRadius","defaultResistanceDegKPerW","defaultConnectionKind","newNodeNamePrefix","zoomSensitivity","minZoom","maxZoom","activeNodeOutlineWidth","tabHeightPx","plotHeightBufferPx","tableDeleteCellWidthPerc","tableDeleteCellMinWidthPx","plotMargin","left","right","top","bottom","StyledTableWrapper","styled","div","StyledTable","StyledTableBody","StyledRow","heightOffsetPx","isActive","StyledCell","width","minWidth","StyledDeleteCell","StyledHeaderWrapper","StyledColHeader","StyledColText","StyledSortIcon","TableHeader","props","columns","sortState","setSortState","sortIcon","direction","map","col","isSortedCol","key","onClick","sortDirection","minWidthPx","text","toString","style","cursor","StyledSelect","select","DropDownTableCell","value","setOption","id","onChange","event","newVal","target","selectedOption","options","find","option","undefined","onSelectOption","rowId","StyledInput","input","EditableInput","useState","initialValue","setValue","onBlur","getNewValue","handleOnBlur","useCallback","type","EditableStringInput","TextTableCell","initialVal","getFloatVal","newValueText","newValueFloat","parseFloat","isNaN","EditableNumberInput","NumericalTableCell","StyledCheckbox","BooleanTableCell","initialIsActive","setIsActive","tabIndex","onKeyUp","showWhenActive","TableCell","row","initiallySetOption","onUpdateRow","length","useSortableTable","default","first","second","defaultNodeSortState","nodeColumns","NodeTable","sortByState","rows","onDeleteRow","tableRows","sort","tableCell","defaultConnectionSortState","connectionTypes","filterConnectionOptions","colKey","selectedSourceId","selectedTargetId","connections","otherConnections","filter","conn","source","some","c","ConnectionTable","onSelectNewSource","connection","newSourceNode","nodes","node","sourceName","name","onSelectNewTarget","newTargetNode","targetName","onSelectNewConnectionType","rowToUpdate","kind","nodeOptions","connectionColumns","useMemo","activeNodeIds","includes","StyledTabsWrapper","StyledTabs","StyledTab","StyledTabText","StyledInnerContent","Tabs","activeIdx","setActiveIdx","tabs","tab","idx","className","topLeftRounded","_","component","StyledModelControlsWrapper","StyledButton","button","StyledImport","StyledTimeControls","StyledTimeControl","StyledInputWrapper","StyledLabel","label","ModelControls","onRunModel","timing","setTiming","stagedAppState","setStagedAppState","totalTimeS","newTotalTimeS","timeStepS","newTimeStepS","navigator","clipboard","writeText","JSON","stringify","appState","setAppState","parse","StyledEditor","height","StyledTables","Sidebar","nodeTable","updateNodes","deleteNodes","connectionTable","updateConnections","deleteConnections","LinePlot","plotDimensions","plotData","lines","xAxisKey","xLabel","yLabel","ResponsiveContainer","LineChart","margin","data","CartesianGrid","strokeDasharray","XAxis","dataKey","position","dy","YAxis","angle","dx","Tooltip","Legend","layout","verticalAlign","align","wrapperStyle","paddingLeft","colors","StyledCharts","StyledPlot","plotShape","lowerMag","Math","floor","log10","divisibleBy","pow","includeAll","timeSeriesS","tempsAtAllTimes","heatTransfersAtAllTimes","forEach","t","val","abs","temp","time","ht","nodeResults","nodeResult","tempDegC","connectionResults","connectionResult","heatTransferW","push","Plot","res","modelOutput","emptyOutput","tempPlotData","heatTransferPlotData","heatTransferLines","Line","stroke","activeDot","r","isAnimationActive","tempLines","tempPlot","heatTransferPlot","ORIGIN","Object","freeze","x","y","diffPoints","p1","p2","scalePoint","scale","activeNodeStrokeWidth","drawNode","context","center","radius","isBoundary","textDirection","color","save","beginPath","arc","PI","fillStyle","fill","closePath","restore","drawCircle","lineWidth","strokeStyle","drawCircleOutline","translate","rotate","moveTo","lineTo","h","newRadius","sin","acos","drawHashPattern","font","textMetrics","measureText","fillText","actualBoundingBoxAscent","actualBoundingBoxDescent","drawNodeName","drawConnection","start","end","startOffset","endOffset","headLength","headWidth","arrowGap","atan2","adjLength","sqrt","drawBidirectionalArrow","drawUnidirectionalArrow","intersectsCircle","point","circleCenter","deltaX","deltaY","calculateCanvasMouse","canvas","viewportMousePos","pageX","pageY","boundingRect","getBoundingClientRect","mouseToNodeCoords","canvasState","canvasMouse","mouse","offset","canvasViewState","StyledButtons","Controls","setCanvasViewState","savedCanvasState","setSavedCanvasState","StyledCanvasWrapper","StyledCanvas","cssWidth","cssHeight","Canvas","ref","onClickCanvas","canvasWidth","canvasHeight","devicePixelRatio","draw","onMouseDown","handleDoubleClick","savedCanvasViewState","setSavedCanvasViewState","setKeyboardActive","canvasRef","useRef","useEffect","handleClickOutside","keyBoardActive","current","contains","document","addEventListener","removeEventListener","setContext","mousePosRef","lastMousePosRef","lastCanvasViewState","mouseMove","newMousePos","mouseDiff","newCanvasViewState","mouseUp","startPan","useLayoutEffect","handleWheel","preventDefault","zoom","newScale","mouseOffset","canvasElem","usePanZoomCanvas","renderCtx","getContext","onDoubleClick","useAddConnection","appNodes","appConnections","addConnection","clearAndRedraw","drawConnectionBeingMade","clickedNode","nodeCoordsOfMouse","drawArrowWithoutHead","drawConnWrapper","mouseUpOnNode","newConnection","makeConnection","resistanceDegKPerW","getNewAppNodes","clickedMouseEvent","currentMouseEvent","shiftKeyPressed","activeNodes","offsetMouseToCenter","newClickedCenter","newClickedNode","newActiveNodes","distanceFromClickedCenter","useMultiSelect","setActiveNodes","boxStart","drawBox","globalAlpha","fillRect","rect","boxEnd","startBox","endBox","topLeft","bottomRight","bottomLeft","topRight","isInsideBox","useOnMouseDown","clearActiveNodes","makeNewConnection","moveNode","movedRef","shiftKey","newNodes","mouseUpEvent","useMoveNode","multiSelect","defaultBehavior","altKey","test1","makeNode","temperatureDegC","capacitanceJPerDegK","powerGenW","test2","defaultNodes","defaultConnections","defaultCanvasViewState","defaultAppState","output","StyledApp","StyledWorkspace","App","defaultValue","React","localState","window","sessionStorage","getItem","setItem","useSessionStorageState","setAppNodes","prevState","setAppConnections","newConnections","setCanvasState","newCanvasState","newSavedCanvasState","newTiming","setModelOutput","newModelOutput","addNode","nodesToUpdate","newNode","prevConn","nodeToUpdate","nodeIds","connsToUpdate","connIdsToUpdate","oldConns","connIds","useNodeConnectionUtils","keyboardActive","onKeyDown","metaKey","keyCode","useKeyDown","sourceAppNode","targetAppNode","clearRect","useDraw","doubleClickedNode","numNewNodes","startsWith","newAppNode","useDoubleClick","size","setSize","ratio","setRatio","updateSize","innerWidth","innerHeight","updateRatio","useWindowSize","windowWidth","windowHeight","workspaceWidth","workspaceHeight","plotHeight","plotWidth","editorWidth","conns","run","errors","error","console","message","scrollableElem","createElement","innerElem","overflow","borderWidth","appendChild","body","diff","offsetWidth","clientWidth","removeChild","areScrollbarsVisible","classList","add","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.2b115330.chunk.js","sourcesContent":["import { HSConnection } from \"hotstuff-network\";\n\nconst config = {\n  defaultTempDegC: 23,\n  defaultCapJPerDegK: 1,\n  defaultPowerGenW: 0,\n  canvasHeightPerc: 0.7,\n  editorWidthPerc: 0.3,\n  defaultTotalTimeSeconds: 60,\n  defaultTimeStepSeconds: 0.1,\n  defaultNodeRadius: 20,\n  defaultResistanceDegKPerW: 10,\n  defaultConnectionKind: \"bi\" as HSConnection[\"kind\"],\n  newNodeNamePrefix: \"New Node\",\n  zoomSensitivity: 1000, // bigger = less zoom per click\n  minZoom: 0.25,\n  maxZoom: 5,\n  activeNodeOutlineWidth: 5,\n  tabHeightPx: 25,\n  plotHeightBufferPx: 10,\n  tableDeleteCellWidthPerc: 0.1,\n  tableDeleteCellMinWidthPx: 40,\n  plotMargin: {\n    left: 10,\n    right: 20,\n    top: 20,\n    bottom: 20,\n  },\n};\n\nexport default config;\n","import styled from \"styled-components/macro\";\n\nexport const StyledTableWrapper = styled.div`\n  width: 100%;\n`;\n\nexport const StyledTable = styled.div`\n  width: 100%;\n  border-collapse: collapse;\n`;\n\nexport const StyledTableBody = styled.div`\n  width: 100%;\n`;\n\nexport const StyledRow = styled.div<{\n  heightOffsetPx?: number;\n  isActive: boolean;\n}>`\n  display: inline-flex;\n  align-items: center;\n  min-width: 100%;\n  position: sticky;\n  top: ${({ heightOffsetPx }) =>\n    heightOffsetPx ? `${heightOffsetPx}px` : \"0px\"};\n  background: ${({ isActive }) =>\n    isActive ? \"rgba(112, 165, 255, 0.2)\" : \"none\"};\n`;\n\nexport const StyledCell = styled.div<{ width: number; minWidth?: number }>`\n  display: inline-flex;\n  justify-content: center;\n  align-items: center;\n  border: 1px solid #ddd;\n  height: 2em;\n  width: ${({ width }) => `${width * 100}%`};\n  min-width: ${({ minWidth }) => (!!minWidth ? `${minWidth}px` : \"none\")};\n`;\n\nexport const StyledDeleteCell = styled(StyledCell)`\n  cursor: pointer;\n  user-select: none;\n  min-width: 40px;\n\n  &:hover {\n    background: black;\n  }\n`;\n\nexport const StyledHeaderWrapper = styled.div<{ heightOffsetPx?: number }>`\n  display: flex;\n  width: 100%;\n  height: 100%;\n  position: sticky;\n  top: ${({ heightOffsetPx }) =>\n    heightOffsetPx ? `${heightOffsetPx}px` : \"0px\"};\n  z-index: 1;\n`;\n\nexport const StyledColHeader = styled.div<{ width: number; minWidth?: number }>`\n  display: inline-flex;\n  width: ${({ width }) => `${width * 100}%`};\n  min-width: ${({ minWidth }) => (!!minWidth ? `${minWidth}px` : \"none\")};\n  justify-content: center;\n  align-items: center;\n  font-weight: bold;\n  border: 1px solid lightgrey;\n  cursor: pointer;\n  user-select: none;\n  position: relative;\n  background: white;\n  border-bottom: 1px solid black;\n`;\n\nexport const StyledColText = styled.div`\n  font-size: 0.8em;\n  padding: 1em;\n`;\n\nexport const StyledSortIcon = styled.div`\n  position: absolute;\n  bottom: 0;\n  right: 50%;\n  transform: translate(50%);\n`;\n","import config from \"../../../config\";\nimport {\n  StyledColHeader,\n  StyledColText,\n  StyledHeaderWrapper,\n  StyledSortIcon,\n} from \"./style\";\nimport * as React from \"react\";\nimport { SortDirection, TableColumn, TableSortState } from \"./types\";\n\ntype TableHeaderProps<T> = {\n  columns: TableColumn<T>[];\n  sortState: TableSortState<T>;\n  setSortState: React.Dispatch<React.SetStateAction<TableSortState<T>>>;\n};\n\nfunction oppositeSortDirection(sortDirection: SortDirection): SortDirection {\n  return sortDirection === \"ASC\" ? \"DESC\" : \"ASC\";\n}\n\nexport default function TableHeader<T>(\n  props: TableHeaderProps<T>\n): React.ReactElement {\n  const { columns, sortState, setSortState } = props;\n\n  const sortIcon = !sortState\n    ? \"\"\n    : sortState.direction === \"ASC\"\n    ? \"\\u25B2\"\n    : \"\\u25BC\";\n\n  return (\n    <StyledHeaderWrapper heightOffsetPx={config.tabHeightPx}>\n      {columns.map((col) => {\n        const isSortedCol = sortState && sortState.key === col.key;\n        const onClick = () => {\n          setSortState({\n            key: col.key,\n            direction:\n              !isSortedCol || !sortState\n                ? \"ASC\"\n                : oppositeSortDirection(sortState.direction),\n          });\n        };\n\n        return (\n          <StyledColHeader\n            key={col.key.toString()}\n            onClick={onClick}\n            width={col.width}\n            minWidth={col.minWidthPx}\n          >\n            <StyledColText>{col.text}</StyledColText>\n            <StyledSortIcon>{isSortedCol ? sortIcon : \"\"}</StyledSortIcon>\n          </StyledColHeader>\n        );\n      })}\n      <StyledColHeader\n        width={config.tableDeleteCellWidthPerc}\n        minWidth={config.tableDeleteCellMinWidthPx}\n        style={{ cursor: \"unset\" }}\n      />\n    </StyledHeaderWrapper>\n  );\n}\n","import * as React from \"react\";\nimport styled from \"styled-components/macro\";\nimport { CellOption } from \"../types\";\n\nconst StyledSelect = styled.select`\n  display: inline-flex;\n  width: 100%;\n  height: 100%;\n  background: unset;\n`;\n\nexport type DropDownTableCellProps = {\n  rowId: string;\n  options: CellOption[];\n  setOption?: CellOption;\n  onSelectOption: (id: string, option: CellOption) => void;\n  optionsFilter?: (option: CellOption) => CellOption[];\n};\n\nexport default function DropDownTableCell(\n  props: DropDownTableCellProps\n): React.ReactElement {\n  function handleChange(event: React.ChangeEvent<HTMLSelectElement>) {\n    const newVal = event.target.value;\n\n    const selectedOption = props.options.find((option) => option.id === newVal);\n\n    if (selectedOption !== undefined) {\n      props.onSelectOption(props.rowId, selectedOption);\n    }\n  }\n\n  return (\n    <StyledSelect value={props.setOption?.id} onChange={handleChange}>\n      {props.options.map((option) => (\n        <option key={option.id} value={option.id}>\n          {option.text}\n        </option>\n      ))}\n    </StyledSelect>\n  );\n}\n","import styled from \"styled-components/macro\";\n\nexport const StyledInput = styled.input`\n  display: inline-block;\n  border: none;\n  width: 100%;\n  height: 100%;\n  text-align: center;\n  padding: 0;\n  background: unset;\n\n  &::-webkit-inner-spin-button,\n  &::-webkit-outer-spin-button {\n    -webkit-appearance: none;\n    margin: 0;\n  }\n`;\n","import React, { useCallback, useState } from \"react\";\nimport { StyledInput } from \"./style\";\n\ninterface CanBeMadeString {\n  toString: () => string;\n}\n\ntype EditableInputProps<T> = {\n  initialValue: T;\n  onBlur: (value: T) => void;\n  getNewValue: (event: React.ChangeEvent<HTMLInputElement>) => T | undefined;\n};\n\nexport default function EditableInput<T extends CanBeMadeString>(\n  props: EditableInputProps<T>\n): React.ReactElement {\n  const [value, setValue] = useState<string>(props.initialValue.toString());\n\n  const { initialValue, onBlur, getNewValue } = props;\n\n  function handleOnChange(event: React.ChangeEvent<HTMLInputElement>) {\n    const newVal = event.target.value;\n    if (newVal !== undefined) {\n      setValue(newVal);\n    }\n  }\n\n  const handleOnBlur = useCallback(\n    (event: React.ChangeEvent<HTMLInputElement>) => {\n      const newVal = getNewValue(event);\n      if (event.target.value === initialValue.toString()) {\n        return;\n      } else if (newVal !== undefined) {\n        setValue(newVal.toString());\n        onBlur(newVal);\n      } else {\n        setValue(initialValue.toString());\n        onBlur(initialValue);\n      }\n    },\n    [getNewValue, initialValue, onBlur]\n  );\n\n  return (\n    <StyledInput\n      type=\"text\"\n      value={value}\n      onChange={handleOnChange}\n      onBlur={handleOnBlur}\n    />\n  );\n}\n","import React from \"react\";\nimport EditableInput from \"./EditableInput\";\n\ntype EditableStringInputProps = {\n  initialValue: string;\n  onBlur: (value: string) => void;\n};\n\nexport default function EditableStringInput(\n  props: EditableStringInputProps\n): React.ReactElement {\n  return (\n    <EditableInput<string>\n      initialValue={props.initialValue}\n      onBlur={props.onBlur}\n      getNewValue={(event: React.ChangeEvent<HTMLInputElement>) =>\n        event.target.value\n      }\n    />\n  );\n}\n","import React from \"react\";\nimport EditableStringInput from \"../../EditableStringInput\";\n\nexport type TextTableCellProps = {\n  initialVal: string;\n  onBlur: (newValue: string) => void;\n};\n\nexport default function TextTableCell(\n  props: TextTableCellProps\n): React.ReactElement {\n  return (\n    <EditableStringInput\n      initialValue={props.initialVal}\n      onBlur={props.onBlur}\n    />\n  );\n}\n","import React from \"react\";\nimport EditableInput from \"./EditableInput\";\n\nfunction getFloatVal(\n  event: React.ChangeEvent<HTMLInputElement>\n): number | undefined {\n  const newValueText = event.target.value;\n  // things like 123.3abc will still parse as 123.3\n  const newValueFloat = parseFloat(event.target.value);\n  if (newValueText === undefined || isNaN(newValueFloat)) {\n    return undefined;\n  }\n  return newValueFloat;\n}\n\ntype EditableNumberInputProps = {\n  initialValue: number;\n  onBlur: (value: number) => void;\n};\n\nexport default function EditableNumberInput(\n  props: EditableNumberInputProps\n): React.ReactElement {\n  return (\n    <EditableInput<number>\n      initialValue={props.initialValue}\n      onBlur={props.onBlur}\n      getNewValue={getFloatVal}\n    />\n  );\n}\n","import React from \"react\";\nimport EditableNumberInput from \"../../EditableNumberInput\";\n\nexport type NumericalTableCellProps = {\n  initialVal: number;\n  onBlur: (newValue: number) => void;\n};\n\nexport default function NumericalTableCell(\n  props: NumericalTableCellProps\n): React.ReactElement {\n  return (\n    <EditableNumberInput\n      initialValue={props.initialVal}\n      onBlur={props.onBlur}\n    />\n  );\n}\n","import React, { useState } from \"react\";\nimport styled from \"styled-components/macro\";\n\nconst StyledCheckbox = styled.div`\n  display: inline-flex;\n  width: 100%;\n  height: 100%;\n  justify-content: center;\n  align-items: center;\n  cursor: pointer;\n  user-select: none;\n`;\n\nexport type BooleanTableCellProps = {\n  initialIsActive?: boolean;\n  onClick: (isActive: boolean) => void;\n  showWhenActive: string;\n};\n\nexport default function BooleanTableCell(\n  props: BooleanTableCellProps\n): React.ReactElement {\n  const [isActive, setIsActive] = useState<boolean>(\n    props.initialIsActive !== undefined ? props.initialIsActive : false\n  );\n\n  return (\n    <StyledCheckbox\n      tabIndex={0}\n      onKeyUp={(event: React.KeyboardEvent) => {\n        if (event.key === \"Enter\") {\n          setIsActive(!isActive);\n          props.onClick(!isActive);\n        }\n      }}\n      onClick={() => {\n        setIsActive(!isActive);\n        props.onClick(!isActive);\n      }}\n    >\n      &nbsp;{isActive ? props.showWhenActive : \"\"}\n    </StyledCheckbox>\n  );\n}\n","import * as React from \"react\";\nimport DropDownTableCell from \"./cells/DropDownTableCell\";\nimport TextTableCell from \"./cells/TextTableCell\";\nimport NumericalTableCell from \"./cells/NumericalTableCell\";\nimport BooleanTableCell from \"./cells/BooleanTableCell\";\nimport { CellOption, TableColumn } from \"./types\";\n\ntype TableCellType = {\n  id: string;\n};\n\ntype TableCellProps<T extends TableCellType> = {\n  row: T;\n  col: TableColumn<T>;\n  options?: CellOption[];\n  initiallySetOption?: CellOption;\n  onUpdateRow: (row: T) => void;\n};\n\nexport default function TableCell<T extends TableCellType>(\n  props: TableCellProps<T>\n): React.ReactElement {\n  const { row, col, options, initiallySetOption, onUpdateRow } = props;\n  const initialVal = row[col.key];\n\n  if (!!options && options.length > 0 && col.onSelectOption) {\n    return (\n      <DropDownTableCell\n        rowId={row.id}\n        options={options}\n        setOption={initiallySetOption}\n        onSelectOption={col.onSelectOption}\n      />\n    );\n  } else if (typeof initialVal === \"string\") {\n    return (\n      <TextTableCell\n        initialVal={initialVal}\n        onBlur={(newVal) => onUpdateRow({ ...row, [col.key]: newVal })}\n      />\n    );\n  } else if (\n    typeof initialVal === \"number\" &&\n    typeof row[col.key] === \"number\"\n  ) {\n    return (\n      <NumericalTableCell\n        initialVal={initialVal}\n        onBlur={(newVal) => onUpdateRow({ ...row, [col.key]: newVal })}\n      />\n    );\n  } else if (typeof initialVal === \"boolean\") {\n    return (\n      <BooleanTableCell\n        initialIsActive={initialVal}\n        onClick={(newVal) => onUpdateRow({ ...row, [col.key]: newVal })}\n        showWhenActive={\"✅\"}\n      />\n    );\n  } else {\n    return <></>;\n  }\n}\n","import { useState } from \"react\";\nimport { TableSortState } from \"../types\";\n\nexport default function useSortableTable<T>(props: {\n  default: TableSortState<T>;\n}): [\n  TableSortState<T>,\n  React.Dispatch<React.SetStateAction<TableSortState<T>>>,\n  (first: T, second: T) => number\n] {\n  const [sortState, setSortState] = useState<TableSortState<T>>(props.default);\n\n  function sortByState(first: T, second: T): number {\n    if (first[sortState.key] > second[sortState.key]) {\n      return sortState.direction === \"ASC\" ? 1 : -1;\n    } else {\n      return sortState.direction === \"ASC\" ? -1 : 1;\n    }\n  }\n\n  return [sortState, setSortState, sortByState];\n}\n","import React from \"react\";\nimport config from \"../../../../config\";\nimport { AppNode } from \"../../../../App\";\nimport {\n  StyledCell,\n  StyledDeleteCell,\n  StyledRow,\n  StyledTable,\n  StyledTableBody,\n  StyledTableWrapper,\n} from \"../style\";\nimport { TableColumn, TableSortState } from \"../types\";\nimport TableHeader from \"../TableHeader\";\nimport TableCell from \"../TableCell\";\nimport useSortableTable from \"../hooks/useSortableTable\";\n\ntype NodeTableColumn = TableColumn<AppNode>;\n\nconst defaultNodeSortState: TableSortState<AppNode> = {\n  key: \"name\",\n  direction: \"ASC\",\n};\n\nconst nodeColumns: NodeTableColumn[] = [\n  {\n    key: \"name\",\n    text: \"Name\",\n    width: 0.2,\n    minWidthPx: 100,\n  },\n  {\n    key: \"temperatureDegC\",\n    text: \"Temp degC\",\n    width: 0.2,\n    minWidthPx: 100,\n  },\n  {\n    key: \"capacitanceJPerDegK\",\n    text: \"Capacitance J/degK\",\n    width: 0.2,\n    minWidthPx: 100,\n  },\n  {\n    key: \"powerGenW\",\n    text: \"Power Gen W\",\n    width: 0.15,\n    minWidthPx: 80,\n  },\n  {\n    key: \"isBoundary\",\n    text: \"Boundary?\",\n    width: 0.15,\n    minWidthPx: 80,\n  },\n];\n\ntype NodeTableProps = {\n  rows: AppNode[];\n  onUpdateRow: (row: AppNode) => void;\n  onDeleteRow: (row: AppNode) => void;\n};\n\nexport default function NodeTable(props: NodeTableProps): React.ReactElement {\n  const [sortState, setSortState, sortByState] = useSortableTable<AppNode>({\n    default: defaultNodeSortState,\n  });\n\n  const { rows, onUpdateRow, onDeleteRow } = props;\n\n  const sortedRows = rows.sort(sortByState);\n\n  const tableRows = sortedRows.map((row) => {\n    return (\n      <StyledRow\n        key={row.id}\n        heightOffsetPx={config.tabHeightPx}\n        isActive={row.isActive}\n      >\n        {nodeColumns.map((col) => {\n          const tableCell = (\n            <TableCell<AppNode> row={row} col={col} onUpdateRow={onUpdateRow} />\n          );\n          return (\n            <StyledCell\n              key={col.key}\n              width={col.width}\n              minWidth={col.minWidthPx}\n            >\n              {tableCell}\n            </StyledCell>\n          );\n        })}\n        <StyledDeleteCell\n          tabIndex={0}\n          onKeyUp={(event: React.KeyboardEvent) => {\n            if (event.key === \"Enter\") {\n              onDeleteRow(row);\n            }\n          }}\n          width={config.tableDeleteCellWidthPerc}\n          minWidth={config.tableDeleteCellMinWidthPx}\n          onClick={() => onDeleteRow(row)}\n        >\n          ❌\n        </StyledDeleteCell>\n      </StyledRow>\n    );\n  });\n\n  return (\n    <StyledTableWrapper>\n      <StyledTable>\n        <TableHeader<AppNode>\n          columns={nodeColumns}\n          sortState={sortState}\n          setSortState={setSortState}\n        />\n        <StyledTableBody>{tableRows}</StyledTableBody>\n      </StyledTable>\n    </StyledTableWrapper>\n  );\n}\n","import React, { useCallback, useMemo } from \"react\";\nimport config from \"../../../../config\";\nimport { AppConnection, AppNode } from \"../../../../App\";\nimport {\n  StyledCell,\n  StyledDeleteCell,\n  StyledRow,\n  StyledTable,\n  StyledTableBody,\n  StyledTableWrapper,\n} from \"../style\";\nimport { CellOption, TableColumn, TableSortState } from \"../types\";\nimport TableHeader from \"../TableHeader\";\nimport TableCell from \"../TableCell\";\nimport useSortableTable from \"../hooks/useSortableTable\";\nimport { ConnectionKind } from \"../../../types\";\n\nexport type AppConnectionTable = AppConnection & { isActive: boolean };\ntype ConnectionTableColumn = TableColumn<AppConnection>;\n\nconst defaultConnectionSortState: TableSortState<AppConnectionTable> = {\n  key: \"sourceName\",\n  direction: \"ASC\",\n};\n\nconst connectionTypes: CellOption[] = [\n  {\n    id: \"bi\",\n    text: \"Bidirectional\",\n  },\n  {\n    id: \"uni\",\n    text: \"Unidirectional\",\n  },\n  {\n    id: \"rad\",\n    text: \"Radiative\",\n  },\n];\n\nfunction filterConnectionOptions(\n  colKey: string,\n  options: CellOption[],\n  selectedSourceId: string,\n  selectedTargetId: string,\n  connections: AppConnection[]\n): CellOption[] {\n  const otherConnections = connections.filter(\n    (conn) =>\n      !(\n        conn.source.id === selectedSourceId &&\n        conn.target.id === selectedTargetId\n      )\n  );\n\n  if (colKey === \"sourceName\") {\n    // options for source node\n    const noSelfConnectionOptions = options.filter(\n      (option) => option.id !== selectedTargetId\n    );\n    // for each source option, there is no other connection that already matches the source -> target or target -> source\n    return noSelfConnectionOptions.filter((option) => {\n      return !otherConnections.some(\n        (c) =>\n          (c.source.id === option.id && c.target.id === selectedTargetId) ||\n          (c.source.id === selectedTargetId && c.target.id === option.id)\n      );\n    });\n  } else if (colKey === \"targetName\") {\n    // options for target node\n    const noSelfConnectionOptions = options.filter(\n      (option) => option.id !== selectedSourceId\n    );\n    // for each target option, there is no other connection that already matches the source -> target or target -> source\n    return noSelfConnectionOptions.filter((option) => {\n      return !otherConnections.some(\n        (c) =>\n          (c.source.id === selectedSourceId && c.target.id === option.id) ||\n          (c.source.id === option.id && c.target.id === selectedSourceId)\n      );\n    });\n  } else {\n    return options;\n  }\n}\n\ntype ConnectionTableProps = {\n  rows: AppConnection[];\n  nodes: AppNode[];\n  onUpdateRow: (row: AppConnection) => void;\n  onDeleteRow: (row: AppConnection) => void;\n};\n\nexport default function ConnectionTable(\n  props: ConnectionTableProps\n): React.ReactElement {\n  const [sortState, setSortState, sortByState] =\n    useSortableTable<AppConnectionTable>({\n      default: defaultConnectionSortState,\n    });\n\n  const onSelectNewSource = useCallback(\n    (id: string, option: CellOption) => {\n      const connection = props.rows.find((conn) => conn.id === id);\n      const newSourceNode = props.nodes.find((node) => node.id === option.id);\n      if (\n        !connection ||\n        !newSourceNode ||\n        newSourceNode.id === connection.target.id\n      ) {\n        return;\n      }\n      props.onUpdateRow({\n        ...connection,\n        source: newSourceNode,\n        sourceName: newSourceNode.name,\n      });\n    },\n    [props]\n  );\n\n  const onSelectNewTarget = useCallback(\n    (id: string, option: CellOption) => {\n      const connection = props.rows.find((conn) => conn.id === id);\n      const newTargetNode = props.nodes.find((node) => node.id === option.id);\n      if (\n        !connection ||\n        !newTargetNode ||\n        newTargetNode.id === connection.source.id\n      ) {\n        return;\n      }\n      props.onUpdateRow({\n        ...connection,\n        target: newTargetNode,\n        targetName: newTargetNode.name,\n      });\n    },\n    [props]\n  );\n\n  const onSelectNewConnectionType = useCallback(\n    (id: string, option: CellOption) => {\n      const rowToUpdate = props.rows.find((conn) => conn.id === id);\n      if (rowToUpdate) {\n        props.onUpdateRow({\n          ...rowToUpdate,\n          kind: option.id as ConnectionKind,\n        });\n      }\n    },\n    [props]\n  );\n\n  const nodeOptions: CellOption[] = props.nodes.map((node) => ({\n    id: node.id,\n    text: node.name,\n  }));\n\n  const connectionColumns: ConnectionTableColumn[] = useMemo(\n    () => [\n      {\n        text: \"Source\",\n        key: \"sourceName\",\n        width: 0.25,\n        minWidthPx: 100,\n        options: nodeOptions,\n        onSelectOption: onSelectNewSource,\n      },\n      {\n        text: \"Target\",\n        key: \"targetName\",\n        width: 0.25,\n        minWidthPx: 100,\n        options: nodeOptions,\n        onSelectOption: onSelectNewTarget,\n      },\n      {\n        text: \"Resistance degK/W\",\n        key: \"resistanceDegKPerW\",\n        width: 0.25,\n        minWidthPx: 100,\n      },\n      {\n        text: \"Kind\",\n        key: \"kind\",\n        width: 0.25,\n        minWidthPx: 100,\n        options: connectionTypes,\n        onSelectOption: onSelectNewConnectionType,\n      },\n    ],\n    [\n      nodeOptions,\n      onSelectNewConnectionType,\n      onSelectNewSource,\n      onSelectNewTarget,\n    ]\n  );\n\n  const activeNodeIds = props.nodes\n    .filter((node) => node.isActive)\n    .map((node) => node.id);\n\n  const sortedRowsWithIsActive: AppConnectionTable[] = props.rows\n    .map((row) => {\n      return {\n        ...row,\n        isActive:\n          activeNodeIds.includes(row.source.id) ||\n          activeNodeIds.includes(row.target.id),\n      };\n    })\n    .sort(sortByState);\n\n  const tableRows = sortedRowsWithIsActive.map((row) => {\n    return (\n      <StyledRow\n        key={row.id}\n        heightOffsetPx={config.tabHeightPx}\n        isActive={row.isActive}\n      >\n        {connectionColumns.map((col) => {\n          const tableCell = (\n            <TableCell<AppConnectionTable>\n              row={row}\n              col={col}\n              options={filterConnectionOptions(\n                col.key,\n                col.options || [],\n                row.source.id,\n                row.target.id,\n                props.rows\n              )}\n              initiallySetOption={col.options?.find(\n                (option) =>\n                  option.id === row[col.key] || option.text === row[col.key]\n              )}\n              onUpdateRow={props.onUpdateRow}\n            />\n          );\n          return (\n            <StyledCell\n              key={col.key}\n              width={col.width}\n              minWidth={col.minWidthPx}\n            >\n              {tableCell}\n            </StyledCell>\n          );\n        })}\n        <StyledDeleteCell\n          width={config.tableDeleteCellWidthPerc}\n          minWidth={config.tableDeleteCellMinWidthPx}\n          onClick={() => props.onDeleteRow(row)}\n        >\n          ❌\n        </StyledDeleteCell>\n      </StyledRow>\n    );\n  });\n\n  return (\n    <StyledTableWrapper>\n      <StyledTable>\n        <TableHeader<AppConnectionTable>\n          columns={connectionColumns}\n          sortState={sortState}\n          setSortState={setSortState}\n        />\n        <StyledTableBody>{tableRows}</StyledTableBody>\n      </StyledTable>\n    </StyledTableWrapper>\n  );\n}\n","import React, { useState } from \"react\";\nimport styled from \"styled-components/macro\";\nimport config from \"../../config\";\n\nconst StyledTabsWrapper = styled.div`\n  display: inline-flex;\n  width: 100%;\n  flex-direction: column;\n  overflow: auto;\n  position: relative;\n`;\n\nconst StyledTabs = styled.div`\n  display: inline-flex;\n  width: 100%;\n  height: ${config.tabHeightPx}px;\n  justify-content: space-evenly;\n  position: sticky;\n  top: 0px;\n  background: white;\n  box-sizing: border-box;\n  z-index: 1;\n`;\n\nconst StyledTab = styled.div<{ width: number }>`\n  display: inline-flex;\n  width: ${({ width }) => `${width * 100}%`};\n  cursor: pointer;\n  text-decoration: none;\n  align-items: center;\n  background: lightgray;\n  /* background: rgb(85, 9, 121);\n  background: linear-gradient(\n    90deg,\n    rgba(85, 9, 121, 1) 0%,\n    rgba(255, 0, 230, 1) 49%,\n    rgba(46, 228, 233, 1) 100%\n  ); */\n  border-radius: 5px 5px 0 0;\n  border: 1px solid black;\n  border-bottom: 2px solid black;\n\n  &:hover {\n    opacity: 0.75;\n  }\n`;\n\nconst StyledTabText = styled.div`\n  font-size: 1.1em;\n  padding: 0.2em 0.5em;\n\n  &.active {\n    font-weight: bold;\n  }\n`;\n\nconst StyledInnerContent = styled.div<{ topLeftRounded: boolean }>`\n  background: white;\n  position: relative;\n`;\n\ntype Tab = {\n  text: string;\n  component: React.ReactElement;\n  width: number; // between 0 and 1\n};\n\nexport type TabsProps = {\n  tabs: Tab[];\n};\n\nexport default function Tabs(props: TabsProps): React.ReactElement {\n  const [activeIdx, setActiveIdx] = useState(0);\n\n  return (\n    <StyledTabsWrapper>\n      {props.tabs.length > 1 && (\n        <StyledTabs>\n          {props.tabs.map((tab, idx) => {\n            return (\n              <StyledTab\n                key={tab.text}\n                onClick={() => setActiveIdx(idx)}\n                width={tab.width}\n              >\n                <StyledTabText className={idx === activeIdx ? \"active\" : \"\"}>\n                  {tab.text}\n                </StyledTabText>\n              </StyledTab>\n            );\n          })}\n        </StyledTabs>\n      )}\n\n      <StyledInnerContent topLeftRounded={props.tabs.length <= 1}>\n        {props.tabs.filter((_, idx) => idx === activeIdx)[0].component}\n      </StyledInnerContent>\n    </StyledTabsWrapper>\n  );\n}\n","import * as React from \"react\";\nimport styled from \"styled-components/macro\";\nimport EditableNumberInput from \"./EditableNumberInput\";\nimport { AppState, Timing } from \"../../App\";\nimport { useState } from \"react\";\n\nconst StyledModelControlsWrapper = styled.div`\n  display: flex;\n  flex-direction: column;\n  height: 100%;\n  width: 100%;\n  justify-content: center;\n  align-items: center;\n  border-top: 3px solid black;\n  padding-top: 1em;\n`;\n\nconst StyledButton = styled.button`\n  margin-top: 5px;\n  margin-bottom: 5px;\n`;\n\nconst StyledImport = styled.div``;\n\nconst StyledTimeControls = styled.div``;\n\nconst StyledTimeControl = styled.div`\n  display: flex;\n  width: 100%;\n  align-items: center;\n  justify-content: space-between;\n  margin: 0.5em;\n`;\n\nconst StyledInputWrapper = styled.div`\n  max-width: 3em;\n  height: 1.5em;\n`;\n\nconst StyledLabel = styled.label`\n  margin-right: 0.2em;\n`;\n\nexport type ModelControlsProps = {\n  appState: AppState;\n  setAppState: React.Dispatch<React.SetStateAction<AppState>>;\n  onRunModel: () => void;\n  timing: Timing;\n  setTiming: (newTiming: Timing) => void;\n};\n\nexport default function ModelControls(\n  props: ModelControlsProps\n): React.ReactElement {\n  const { onRunModel, timing, setTiming } = props;\n  const [stagedAppState, setStagedAppState] = useState<string>(\"\");\n\n  return (\n    <StyledModelControlsWrapper>\n      <StyledTimeControls>\n        <StyledTimeControl>\n          <StyledLabel>Run Time [s]:</StyledLabel>\n          <StyledInputWrapper>\n            <EditableNumberInput\n              initialValue={timing.totalTimeS}\n              onBlur={(newTotalTimeS: number) =>\n                setTiming({ ...timing, totalTimeS: newTotalTimeS })\n              }\n            />\n          </StyledInputWrapper>\n        </StyledTimeControl>\n        <StyledTimeControl>\n          <StyledLabel>Time Step [s]:</StyledLabel>\n          <StyledInputWrapper>\n            <EditableNumberInput\n              initialValue={timing.timeStepS}\n              onBlur={(newTimeStepS: number) =>\n                setTiming({\n                  ...timing,\n                  timeStepS: newTimeStepS,\n                })\n              }\n            />\n          </StyledInputWrapper>\n        </StyledTimeControl>\n      </StyledTimeControls>\n      <StyledButton onClick={onRunModel}>Run Model</StyledButton>\n\n      <StyledButton\n        onClick={() =>\n          navigator.clipboard.writeText(JSON.stringify(props.appState))\n        }\n      >\n        Copy Model to ClipBoard\n      </StyledButton>\n      <StyledImport>\n        <input\n          value={stagedAppState}\n          onChange={(event) => setStagedAppState(event.target.value)}\n        />\n        <StyledButton\n          onClick={() => {\n            props.setAppState(JSON.parse(stagedAppState));\n            setStagedAppState(\"\");\n          }}\n        >\n          Import Model\n        </StyledButton>\n      </StyledImport>\n    </StyledModelControlsWrapper>\n  );\n}\n","import * as React from \"react\";\nimport styled from \"styled-components/macro\";\nimport { AppConnection, AppNode, AppState, Timing } from \"../../App\";\nimport NodeTable from \"./EditableTable/NodeTable/NodeTable\";\nimport ConnectionTable from \"./EditableTable/ConnectionTable/ConnectionTable\";\nimport Tabs from \"../Tabs/Tabs\";\nimport ModelControls from \"./ModelControls\";\n\nconst StyledEditor = styled.div<{ width: number; height: number }>`\n  height: ${(props) => props.height}px;\n  width: ${(props) => props.width}px;\n  border-left: 3px solid black;\n`;\n\nconst StyledTables = styled.div`\n  display: inline-flex;\n  width: 100%;\n  height: 50%;\n`;\n\nconst StyledModelControlsWrapper = styled.div`\n  display: inline-flex;\n  width: 100%;\n`;\n\ntype SidebarProps = {\n  appState: AppState;\n  setAppState: React.Dispatch<React.SetStateAction<AppState>>;\n  width: number;\n  height: number;\n  timing: Timing;\n  setTiming: (newTiming: Timing) => void;\n  nodes: AppNode[];\n  connections: AppConnection[];\n  // addNode: (node: AppNode) => void;\n  updateNodes: (nodes: AppNode[], clearActiveNodes: boolean) => void;\n  deleteNodes: (nodeIds: string[]) => void;\n  updateConnections: (connections: AppConnection[]) => void;\n  deleteConnections: (connectionIds: string[]) => void;\n  onRunModel: () => void;\n};\n\nexport default function Sidebar(props: SidebarProps): React.ReactElement {\n  const nodeTable = (\n    <NodeTable\n      rows={props.nodes}\n      onUpdateRow={(node: AppNode) => props.updateNodes([node], false)}\n      onDeleteRow={(node: AppNode) => props.deleteNodes([node.id])}\n    />\n  );\n\n  const connectionTable = (\n    <ConnectionTable\n      rows={props.connections}\n      nodes={props.nodes}\n      onUpdateRow={(connection: AppConnection) =>\n        props.updateConnections([connection])\n      }\n      onDeleteRow={(connection: AppConnection) =>\n        props.deleteConnections([connection.id])\n      }\n    />\n  );\n\n  return (\n    <StyledEditor width={props.width} height={props.height}>\n      <StyledTables>\n        <Tabs\n          tabs={[\n            { text: \"Nodes\", component: nodeTable, width: 0.5 },\n            { text: \"Connections\", component: connectionTable, width: 0.5 },\n          ]}\n        />\n      </StyledTables>\n      <StyledModelControlsWrapper>\n        <ModelControls\n          appState={props.appState}\n          setAppState={props.setAppState}\n          onRunModel={props.onRunModel}\n          timing={props.timing}\n          setTiming={props.setTiming}\n        />\n      </StyledModelControlsWrapper>\n    </StyledEditor>\n  );\n}\n","import {\n  CartesianGrid,\n  Legend,\n  LineChart,\n  ResponsiveContainer,\n  Tooltip,\n  XAxis,\n  YAxis,\n} from \"recharts\";\nimport * as React from \"react\";\nimport { PlotDimensions } from \"./Plot\";\n\ntype LinePlotProps = {\n  plotDimensions: PlotDimensions;\n  plotData?: ReadonlyArray<Record<string, unknown>>;\n  lines: React.ReactElement[];\n  xAxisKey: string;\n  xLabel: string;\n  yLabel: string;\n};\n\nexport default function LinePlot(props: LinePlotProps): React.ReactElement {\n  const { plotDimensions, plotData, lines, xAxisKey, xLabel, yLabel } = props;\n\n  return (\n    <ResponsiveContainer\n      height={plotDimensions.height}\n      width={plotDimensions.width}\n      className=\"chart\"\n    >\n      <LineChart\n        height={plotDimensions.height}\n        width={plotDimensions.width}\n        margin={plotDimensions.margin}\n        data={plotData}\n      >\n        <CartesianGrid strokeDasharray=\"3 3\" />\n        <XAxis\n          dataKey={xAxisKey}\n          label={{\n            value: xLabel,\n            position: \"center\",\n            dy: 20,\n          }}\n        />\n        <YAxis\n          label={{\n            value: yLabel,\n            position: \"center\",\n            angle: -90,\n            dx: -20,\n          }}\n        />\n        <Tooltip />\n        <Legend\n          layout=\"horizontal\"\n          verticalAlign=\"top\"\n          align=\"center\"\n          wrapperStyle={{\n            paddingLeft: \"10px\",\n          }}\n          // fontSize={5}\n        />\n        {lines}\n      </LineChart>\n    </ResponsiveContainer>\n  );\n}\n","import * as React from \"react\";\nimport { useMemo } from \"react\";\nimport { Line } from \"recharts\";\nimport styled from \"styled-components\";\nimport { emptyOutput, ModelOutput } from \"hotstuff-network\";\nimport LinePlot from \"./LinePlot\";\nimport Tabs from \"../Tabs/Tabs\";\n\nconst MAX_PLOT_POINTS_PER_NODE = 400;\nconst colors = [\n  \"#2ecc71\",\n  \"#3498db\",\n  \"#9b59b6\",\n  \"#e74c3c\",\n  \"#e67e22\",\n  \"#34495e\",\n  \"#16a085\",\n];\n\nconst StyledCharts = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  width: 100%;\n\n  .chart {\n    width: 60% !important;\n    max-width: 900px;\n\n    @media only screen and (max-width: 600px) {\n      width: 90% !important;\n      touch-action: pan-y;\n    }\n  }\n`;\n\n{\n  /*  */\n}\n\nconst StyledPlot = styled.div<{ height: number; width: number }>`\n  width: 100%;\n  height: ${(props) => props.height}px;\n  border-top: 3px solid black;\n  margin: 0;\n  padding: 0;\n`;\n\ntype Margin = {\n  left: number;\n  right: number;\n  top: number;\n  bottom: number;\n};\n\nexport type PlotDimensions = {\n  height: number;\n  width: number;\n  margin: Margin;\n};\n\ntype PlotDataForTime = {\n  time: number;\n  [key: string]: number;\n};\n\nfunction plotShape(data: ModelOutput): [PlotDataForTime[], PlotDataForTime[]] {\n  const lowerMag = Math.floor(Math.log10(data.totalTimeS));\n  const divisibleBy = Math.pow(10, lowerMag - 1);\n\n  function include(val: number) {\n    return Math.abs(val % divisibleBy) === 0;\n  }\n\n  const includeAll = data.timeSeriesS.length < MAX_PLOT_POINTS_PER_NODE;\n\n  const tempsAtAllTimes: PlotDataForTime[] = [];\n  const heatTransfersAtAllTimes: PlotDataForTime[] = [];\n\n  data.timeSeriesS.forEach((t, idx) => {\n    if (includeAll || include(t)) {\n      const temp: PlotDataForTime = { time: t };\n      const ht: PlotDataForTime = { time: t };\n      data.nodeResults.forEach((nodeResult) => {\n        temp[nodeResult.node.name] = nodeResult.tempDegC[idx];\n      });\n      data.connectionResults.forEach((connectionResult) => {\n        ht[\n          `${connectionResult.connection.source.name} to ${connectionResult.connection.target.name}`\n        ] = connectionResult.heatTransferW[idx];\n      });\n      tempsAtAllTimes.push(temp);\n      heatTransfersAtAllTimes.push(ht);\n    }\n  });\n  return [tempsAtAllTimes, heatTransfersAtAllTimes];\n}\n\ntype PlotProps = {\n  plotDimensions: PlotDimensions;\n  modelOutput?: ModelOutput;\n};\n\nexport default function Plot(props: PlotProps): React.ReactElement {\n  const res =\n    !!props.modelOutput && props.modelOutput.nodeResults.length > 0\n      ? props.modelOutput\n      : emptyOutput;\n\n  const [tempPlotData, heatTransferPlotData] = plotShape(res);\n\n  const heatTransferLines = useMemo(\n    () =>\n      res.connectionResults.map((connectionResult, idx) => {\n        return (\n          <Line\n            key={connectionResult.connection.id}\n            type={\"monotone\"}\n            dataKey={`${connectionResult.connection.source.name} to ${connectionResult.connection.target.name}`}\n            stroke={colors[idx]}\n            activeDot={{ r: 8 }}\n            isAnimationActive={false}\n          />\n        );\n      }),\n    [res.connectionResults]\n  );\n\n  const tempLines = useMemo(\n    () =>\n      res.nodeResults.map((nodeResult, idx) => {\n        return (\n          <Line\n            key={nodeResult.node.id}\n            type={\"monotone\"}\n            dataKey={nodeResult.node.name}\n            stroke={colors[idx]}\n            activeDot={{ r: 8 }}\n            isAnimationActive={false}\n          />\n        );\n      }),\n    [res.nodeResults]\n  );\n\n  const tempPlot = (\n    <LinePlot\n      plotDimensions={props.plotDimensions}\n      plotData={tempPlotData}\n      lines={tempLines}\n      xAxisKey={\"time\"}\n      xLabel={\"Time [s]\"}\n      yLabel={\"Temperature [degC]\"}\n    />\n  );\n\n  const heatTransferPlot = (\n    <LinePlot\n      plotDimensions={props.plotDimensions}\n      plotData={heatTransferPlotData}\n      lines={heatTransferLines}\n      xAxisKey={\"time\"}\n      xLabel={\"Time [s]\"}\n      yLabel={\"Heat Transfer [Watts]\"}\n    />\n  );\n\n  return (\n    <StyledPlot\n      height={props.plotDimensions.height}\n      width={props.plotDimensions.width}\n    >\n      <StyledCharts>\n        <Tabs\n          tabs={[\n            {\n              text: \"Temperature\",\n              component: tempPlot,\n              width: 0.5,\n            },\n            {\n              text: \"Heat Transfer\",\n              component: heatTransferPlot,\n              width: 0.5,\n            },\n          ]}\n        />\n      </StyledCharts>\n    </StyledPlot>\n  );\n}\n","export type Point = {\n  x: number;\n  y: number;\n};\n\nexport const ORIGIN = Object.freeze({ x: 0, y: 0 });\n\nexport function makePoint(x: number, y: number): Point {\n  return { x, y };\n}\n\nexport function addPoints(p1: Point, p2: Point): Point {\n  return { x: p1.x + p2.x, y: p1.y + p2.y };\n}\n\nexport function diffPoints(p1: Point, p2: Point): Point {\n  return { x: p1.x - p2.x, y: p1.y - p2.y };\n}\n\nexport function scalePoint(p1: Point, scale: number): Point {\n  return { x: p1.x / scale, y: p1.y / scale };\n}\n\n// export function distanceBetweenPoints(p1: Point, p2: Point): number {\n//   return Math.sqrt(Math.pow(p2.x - p1.x, 2) + Math.pow(p2.y - p1.y, 2));\n// }\n","import { diffPoints, ORIGIN, Point, scalePoint } from \"../../utils/pointUtils\";\nimport config from \"../../config\";\nimport { AppNode, Direction } from \"../../App\";\nimport * as React from \"react\";\nimport { CanvasState } from \"./Canvas\";\nimport { ConnectionKind } from \"../types\";\n\nconst { activeNodeOutlineWidth: activeNodeStrokeWidth } = config;\n\nfunction drawCircle(\n  context: CanvasRenderingContext2D,\n  center: Point,\n  radius: number,\n  color: string\n): void {\n  context.save();\n  context.beginPath();\n  context.arc(center.x, center.y, radius, 0, 2 * Math.PI);\n  context.fillStyle = color;\n  context.fill();\n  context.closePath();\n  context.restore();\n}\n\nfunction drawCircleOutline(\n  context: CanvasRenderingContext2D,\n  center: Point,\n  radius: number,\n  color: string\n): void {\n  context.save();\n  context.beginPath();\n  // inset\n  context.arc(\n    center.x,\n    center.y,\n    radius - activeNodeStrokeWidth / 2,\n    0,\n    2 * Math.PI\n  );\n  context.lineWidth = activeNodeStrokeWidth;\n  context.strokeStyle = color;\n  context.stroke();\n  context.closePath();\n  context.restore();\n}\n\nfunction drawHashPattern(\n  context: CanvasRenderingContext2D,\n  center: Point,\n  radius: number\n) {\n  context.save();\n  context.lineWidth = 2;\n  context.fillStyle = \"#FFFFFF\";\n\n  const delta = 4.5;\n  const buffer = 1;\n  const circle = 2;\n\n  // save the canvas above, now transform it for ease of drawing\n  context.translate(center.x, center.y);\n  context.rotate(Math.PI / 4);\n\n  // draw horizontal line\n  context.beginPath();\n  context.moveTo(-radius, 0);\n  context.lineTo(radius, 0);\n  context.stroke();\n\n  // draw smaller horizontal lines offset vertically from center\n  let h = 0; // vertical distance from center\n  while (h + delta < radius) {\n    h = h + delta;\n    const newRadius = radius * Math.sin(Math.acos(h / radius));\n    context.moveTo(-newRadius - buffer, h);\n    context.lineTo(newRadius + buffer, h);\n    context.stroke();\n    context.moveTo(-newRadius - buffer, -h);\n    context.lineTo(newRadius + buffer, -h);\n    context.stroke();\n  }\n  context.closePath();\n\n  // clip off the extra bits around the circle\n  context.beginPath();\n  context.arc(0, 0, radius + circle, 0, Math.PI * 2, false);\n  context.arc(0, 0, radius, 0, Math.PI * 2, true);\n  context.fill();\n\n  context.restore();\n}\n\nfunction drawNodeName(\n  context: CanvasRenderingContext2D,\n  name: string,\n  center: Point,\n  radius: number,\n  textDirection: Direction\n) {\n  const bufferText = 2;\n  context.save();\n  context.font = \"14px Helvetica\";\n  const textMetrics = context.measureText(name);\n  const width = textMetrics.width;\n  context.translate(center.x, center.y);\n  if (textDirection === \"D\") {\n    context.fillText(\n      name,\n      -width / 2,\n      textMetrics.actualBoundingBoxAscent + radius + bufferText\n    );\n  } else if (textDirection === \"R\") {\n    context.fillText(\n      name,\n      radius + bufferText,\n      textMetrics.actualBoundingBoxAscent / 2\n    );\n  } else if (textDirection === \"U\") {\n    context.fillText(\n      name,\n      -width / 2,\n      -(textMetrics.actualBoundingBoxDescent + radius + bufferText)\n    );\n  } else {\n    context.fillText(\n      name,\n      -(width + radius + bufferText),\n      textMetrics.actualBoundingBoxAscent / 2\n    );\n  }\n  context.restore();\n}\n\nexport function drawNode(\n  context: CanvasRenderingContext2D,\n  name: string,\n  center: Point,\n  radius: number,\n  isActive: boolean,\n  isBoundary: boolean,\n  textDirection: Direction\n  // temperatureDegC: number, // determines color?\n  // capacitanceJPerDegK: number // determines size?\n): void {\n  drawCircle(context, center, radius, \"red\");\n  if (isActive) {\n    drawCircleOutline(context, center, radius, \"black\");\n  }\n  if (isBoundary) {\n    drawHashPattern(context, center, radius);\n  }\n  drawNodeName(context, name, center, radius, textDirection);\n}\n\nexport function drawBidirectionalArrow(\n  context: CanvasRenderingContext2D,\n  start: Point,\n  end: Point,\n  color: string,\n  startOffset = 0,\n  endOffset = 0\n): void {\n  context.save();\n  context.beginPath();\n  context.strokeStyle = color;\n  context.lineWidth = 2;\n  const headLength = 9;\n  const headWidth = 4;\n  const arrowGap = 0;\n  const dx = end.x - start.x;\n  const dy = end.y - start.y;\n  const angle = Math.atan2(dy, dx);\n  const length = Math.sqrt(dx * dx + dy * dy);\n  const adjLength = length - endOffset;\n\n  context.translate(start.x, start.y);\n  context.rotate(angle);\n\n  context.beginPath();\n  context.moveTo(startOffset, arrowGap);\n  context.lineTo(adjLength, arrowGap);\n  context.moveTo(adjLength - headLength, headWidth + arrowGap);\n  context.lineTo(adjLength, arrowGap);\n  context.lineTo(adjLength - headLength, -(headWidth - arrowGap));\n\n  context.moveTo(adjLength, -arrowGap);\n  context.lineTo(startOffset, -arrowGap);\n  context.moveTo(startOffset + headLength, -(headWidth + arrowGap));\n  context.lineTo(startOffset, -arrowGap);\n  context.lineTo(startOffset + headLength, headWidth - arrowGap);\n\n  context.stroke();\n  context.closePath();\n  context.restore();\n}\n\nexport function drawUnidirectionalArrow(\n  context: CanvasRenderingContext2D,\n  start: Point,\n  end: Point,\n  color: string,\n  startOffset = 0,\n  endOffset = 0\n): void {\n  context.save();\n  context.beginPath();\n  context.strokeStyle = color;\n  context.lineWidth = 2;\n  const headLength = 9;\n  const headWidth = 4;\n  const dx = end.x - start.x;\n  const dy = end.y - start.y;\n  const angle = Math.atan2(dy, dx);\n  const length = Math.sqrt(dx * dx + dy * dy);\n  const adjLength = length - endOffset;\n\n  context.translate(start.x, start.y);\n  context.rotate(angle);\n\n  context.beginPath();\n  context.moveTo(startOffset, 0);\n  context.lineTo(adjLength, 0);\n  context.moveTo(adjLength - headLength, -headWidth);\n  context.lineTo(adjLength, 0);\n  context.lineTo(adjLength - headLength, headWidth);\n  context.stroke();\n  context.closePath();\n  context.restore();\n}\n\nexport function drawArrowWithoutHead(\n  context: CanvasRenderingContext2D,\n  start: Point,\n  end: Point,\n  color: string,\n  startOffset = 0,\n  endOffset = 0\n): void {\n  context.save();\n  context.beginPath();\n  context.strokeStyle = color;\n  context.lineWidth = 2;\n  const dx = end.x - start.x;\n  const dy = end.y - start.y;\n  const angle = Math.atan2(dy, dx);\n  const length = Math.sqrt(dx * dx + dy * dy);\n  context.translate(start.x, start.y);\n  context.rotate(angle);\n  context.beginPath();\n  context.moveTo(startOffset, 0);\n  const adjLength = length - endOffset;\n  context.lineTo(adjLength, 0);\n  context.stroke();\n  context.closePath();\n  context.restore();\n}\n\nexport function drawClearBox(\n  context: CanvasRenderingContext2D,\n  start: Point,\n  end: Point,\n  color: string\n): void {\n  context.save();\n  context.beginPath();\n  context.fillStyle = color;\n  context.globalAlpha = 0.2;\n  context.fillRect(start.x, start.y, end.x - start.x, end.y - start.y);\n  context.closePath();\n\n  // outline\n  context.beginPath();\n  context.strokeStyle = color;\n  context.rect(start.x, start.y, end.x - start.x, end.y - start.y);\n  context.stroke();\n  context.closePath();\n\n  context.restore();\n}\n\nexport function drawConnection(\n  context: CanvasRenderingContext2D,\n  source: AppNode,\n  target: AppNode,\n  kind: ConnectionKind\n): void {\n  if (kind === \"bi\") {\n    drawBidirectionalArrow(\n      context,\n      source.center,\n      target.center,\n      \"black\",\n      source.radius,\n      target.radius\n    );\n  } else {\n    drawUnidirectionalArrow(\n      context,\n      source.center,\n      target.center,\n      \"black\",\n      source.radius,\n      target.radius\n    );\n  }\n}\n\nexport function intersectsCircle(\n  point: Point,\n  circleCenter: Point,\n  radius: number\n): boolean {\n  const deltaX = point.x - circleCenter.x;\n  const deltaY = point.y - circleCenter.y;\n  return Math.pow(deltaX, 2) + Math.pow(deltaY, 2) <= Math.pow(radius, 2);\n}\n\nexport function isInsideBox(\n  startBox: Point,\n  endBox: Point,\n  point: Point\n): boolean {\n  const [topLeft, bottomRight] =\n    startBox.x < endBox.x && startBox.y < endBox.y\n      ? [startBox, endBox]\n      : [endBox, startBox];\n\n  const [bottomLeft, topRight] =\n    startBox.x < endBox.x && startBox.y > endBox.y\n      ? [startBox, endBox]\n      : [endBox, startBox];\n\n  return (\n    (topLeft.x <= point.x &&\n      point.x <= bottomRight.x &&\n      topLeft.y <= point.y &&\n      point.y <= bottomRight.y) ||\n    (bottomLeft.x <= point.x &&\n      point.x <= topRight.x &&\n      topRight.y <= point.y &&\n      point.y <= bottomLeft.y)\n  );\n}\n\nexport function calculateCanvasMouse(\n  event: React.MouseEvent | MouseEvent,\n  canvas: HTMLCanvasElement\n): Point {\n  const viewportMousePos = { x: event.pageX, y: event.pageY };\n  const boundingRect = canvas.getBoundingClientRect();\n  const topLeftCanvasPos = { x: boundingRect.left, y: boundingRect.top };\n  return diffPoints(viewportMousePos, topLeftCanvasPos);\n}\n\nfunction canvasMouseToNodeCoords(\n  mouse: Point,\n  offset: Point,\n  scale: number\n): Point {\n  return diffPoints(scalePoint(mouse, scale), offset);\n}\n\nexport function mouseToNodeCoords(\n  event: React.MouseEvent | MouseEvent,\n  canvasState: CanvasState\n): Point {\n  if (canvasState.context) {\n    const canvasMouse = calculateCanvasMouse(event, canvasState.context.canvas);\n    return canvasMouseToNodeCoords(\n      canvasMouse,\n      canvasState.canvasViewState.offset,\n      canvasState.canvasViewState.scale\n    );\n  } else {\n    return ORIGIN;\n  }\n}\n\nexport function rotatedDirection(direction: Direction): Direction {\n  // assume rotate counter-clockwise\n  if (direction === \"D\") {\n    return \"R\";\n  } else if (direction === \"R\") {\n    return \"U\";\n  } else if (direction === \"U\") {\n    return \"L\";\n  } else {\n    return \"D\";\n  }\n}\n","import * as React from \"react\";\nimport { useCallback, useLayoutEffect, useRef, useState } from \"react\";\nimport {\n  addPoints,\n  diffPoints,\n  ORIGIN,\n  Point,\n  scalePoint,\n} from \"../../../utils/pointUtils\";\nimport config from \"../../../config\";\nimport { calculateCanvasMouse } from \"../canvasUtils\";\nimport { CanvasViewState } from \"../Canvas\";\n\nconst { maxZoom, minZoom, zoomSensitivity } = config;\n\nexport default function usePanZoomCanvas(\n  canvasRef: React.RefObject<HTMLCanvasElement>,\n  canvasViewState: CanvasViewState,\n  setCanvasViewState: (newCanvasViewState: CanvasViewState) => void\n): [\n  CanvasRenderingContext2D | null,\n  React.Dispatch<React.SetStateAction<CanvasRenderingContext2D | null>>,\n  (event: React.MouseEvent | MouseEvent) => void\n] {\n  const [context, setContext] = useState<CanvasRenderingContext2D | null>(null);\n  const mousePosRef = useRef<Point>(ORIGIN);\n  const lastMousePosRef = useRef<Point>(ORIGIN);\n  const lastCanvasViewState = useRef<CanvasViewState>(canvasViewState);\n\n  // functions for panning\n  const mouseMove = useCallback(\n    (event: React.MouseEvent | MouseEvent) => {\n      if (context) {\n        // update mouse position\n        const newMousePos = calculateCanvasMouse(event, context.canvas);\n        lastMousePosRef.current = mousePosRef.current;\n        mousePosRef.current = newMousePos;\n\n        const mouseDiff = scalePoint(\n          diffPoints(mousePosRef.current, lastMousePosRef.current),\n          canvasViewState.scale\n        );\n        const newCanvasViewState = {\n          scale: canvasViewState.scale,\n          offset: addPoints(lastCanvasViewState.current.offset, mouseDiff),\n        };\n        setCanvasViewState(newCanvasViewState);\n        lastCanvasViewState.current = newCanvasViewState;\n      }\n    },\n    [context, canvasViewState.scale, setCanvasViewState]\n  );\n\n  const mouseUp = useCallback(() => {\n    document.removeEventListener(\"mousemove\", mouseMove);\n    document.removeEventListener(\"mouseup\", mouseUp);\n  }, [mouseMove]);\n\n  const startPan = useCallback(\n    (event: React.MouseEvent | MouseEvent) => {\n      if (context) {\n        document.addEventListener(\"mousemove\", mouseMove);\n        document.addEventListener(\"mouseup\", mouseUp);\n        mousePosRef.current = calculateCanvasMouse(event, context.canvas);\n      }\n    },\n    [context, mouseMove, mouseUp]\n  );\n\n  // add event listener on canvas for zoom\n  useLayoutEffect(() => {\n    function handleWheel(event: WheelEvent) {\n      event.preventDefault();\n      if (context) {\n        // update mouse position\n        const newMousePos = calculateCanvasMouse(event, context.canvas);\n        lastMousePosRef.current = mousePosRef.current;\n        mousePosRef.current = newMousePos;\n\n        // calculate new scale/zoom\n        const zoom = 1 - event.deltaY / zoomSensitivity;\n        const newScale = canvasViewState.scale * zoom;\n        if (newScale > maxZoom || newScale < minZoom) {\n          return;\n        }\n\n        // offset the canvas such that the point under the mouse doesn't move\n        const lastMouse = scalePoint(\n          mousePosRef.current,\n          canvasViewState.scale\n        );\n        const newMouse = scalePoint(mousePosRef.current, newScale);\n        const mouseOffset = diffPoints(lastMouse, newMouse);\n\n        const newCanvasViewState = {\n          offset: diffPoints(lastCanvasViewState.current.offset, mouseOffset),\n          scale: newScale,\n        };\n        setCanvasViewState(newCanvasViewState);\n        lastCanvasViewState.current = newCanvasViewState;\n      }\n    }\n\n    const canvasElem = canvasRef.current;\n    if (canvasElem) {\n      lastCanvasViewState.current = canvasViewState;\n      canvasElem.addEventListener(\"wheel\", handleWheel);\n      return () => canvasElem.removeEventListener(\"wheel\", handleWheel);\n    }\n  }, [canvasRef, canvasViewState, context, setCanvasViewState]);\n\n  return [context, setContext, startPan];\n}\n","import * as React from \"react\";\nimport styled from \"styled-components/macro\";\nimport { ORIGIN } from \"../../utils/pointUtils\";\nimport { CanvasState, CanvasViewState } from \"./Canvas\";\n\nconst StyledButtons = styled.div`\n  position: absolute;\n  bottom: 0;\n  left: 0;\n  display: flex;\n  flex-direction: column;\n`;\n\nconst StyledButton = styled.button`\n  margin: 0.2em;\n`;\n\ntype ControlsProps = {\n  setCanvasViewState: (canvasViewState: CanvasViewState) => void;\n  canvasState: CanvasState;\n  savedCanvasState: CanvasViewState;\n  setSavedCanvasState: (newSavedCanvasState: CanvasViewState) => void;\n};\n\nexport default function Controls(props: ControlsProps): React.ReactElement {\n  return (\n    <StyledButtons>\n      <StyledButton\n        onClick={() =>\n          props.canvasState.context &&\n          props.setCanvasViewState({ offset: ORIGIN, scale: 1 })\n        }\n      >\n        Reset View\n      </StyledButton>\n      <StyledButton\n        onClick={() =>\n          props.canvasState.context &&\n          props.setCanvasViewState({\n            offset: props.savedCanvasState.offset,\n            scale: props.savedCanvasState.scale,\n          })\n        }\n      >\n        Reset View to Saved\n      </StyledButton>\n      <StyledButton\n        onClick={() => {\n          props.setSavedCanvasState({\n            offset: props.canvasState.canvasViewState.offset,\n            scale: props.canvasState.canvasViewState.scale,\n          });\n        }}\n      >\n        Save View\n      </StyledButton>\n    </StyledButtons>\n  );\n}\n","import * as React from \"react\";\nimport { useLayoutEffect, useRef } from \"react\";\nimport styled from \"styled-components\";\nimport usePanZoomCanvas from \"./hooks/usePanZoomCanvas\";\nimport { Point } from \"../../utils/pointUtils\";\nimport Controls from \"./Controls\";\nimport useOnClickCanvas from \"./hooks/useOnClickCanvas\";\n\nconst StyledCanvasWrapper = styled.div`\n  display: block;\n  max-height: 100%;\n  position: relative;\n`;\n\nconst StyledCanvas = styled.canvas<{ cssWidth: number; cssHeight: number }>`\n  width: ${({ cssWidth }) => `${cssWidth}px`};\n  height: ${({ cssHeight }) => `${cssHeight}px`};\n`;\n\nexport type CanvasViewState = {\n  offset: Point;\n  scale: number;\n};\n\nexport type CanvasState = {\n  context: CanvasRenderingContext2D | null;\n  canvasViewState: CanvasViewState;\n  canvasWidth: number;\n  canvasHeight: number;\n};\n\nexport type CanvasProps = {\n  canvasWidth: number;\n  canvasHeight: number;\n  devicePixelRatio: number;\n  draw: (context: CanvasRenderingContext2D) => void;\n  onMouseDown: (\n    event: React.MouseEvent | MouseEvent,\n    canvasState: CanvasState,\n    defaultBehavior: (event: React.MouseEvent | MouseEvent) => void\n  ) => void;\n  handleDoubleClick: (\n    event: React.MouseEvent,\n    canvasState: CanvasState\n  ) => void;\n  canvasViewState: CanvasViewState;\n  setCanvasViewState: (newCanvasState: CanvasViewState) => void;\n  savedCanvasViewState: CanvasViewState;\n  setSavedCanvasViewState: (newSavedCanvasState: CanvasViewState) => void;\n  setKeyboardActive: React.Dispatch<React.SetStateAction<boolean>>;\n};\n\nexport default function Canvas(props: CanvasProps): React.ReactElement {\n  const {\n    canvasWidth,\n    canvasHeight,\n    devicePixelRatio,\n    draw,\n    onMouseDown,\n    handleDoubleClick,\n    canvasViewState,\n    setCanvasViewState,\n    savedCanvasViewState,\n    setSavedCanvasViewState,\n    setKeyboardActive,\n  } = props;\n\n  // hooks\n  const canvasRef = useRef<HTMLCanvasElement>(null);\n  useOnClickCanvas(canvasRef, setKeyboardActive);\n  const [context, setContext, startPan] = usePanZoomCanvas(\n    canvasRef,\n    canvasViewState,\n    setCanvasViewState\n  );\n\n  // setup canvas and set context\n  useLayoutEffect(() => {\n    if (canvasRef.current) {\n      // get new drawing context\n      const renderCtx = canvasRef.current.getContext(\"2d\");\n      setContext(renderCtx);\n    }\n  }, [setContext]);\n\n  // draw\n  useLayoutEffect(() => {\n    if (context) {\n      // clear canvas\n      context.canvas.width = canvasWidth * devicePixelRatio;\n      context.canvas.height = canvasHeight * devicePixelRatio;\n\n      context.scale(\n        canvasViewState.scale * devicePixelRatio,\n        canvasViewState.scale * devicePixelRatio\n      );\n      context.translate(canvasViewState.offset.x, canvasViewState.offset.y);\n\n      draw(context);\n    }\n  }, [\n    canvasHeight,\n    canvasWidth,\n    context,\n    devicePixelRatio,\n    draw,\n    canvasViewState.offset.x,\n    canvasViewState.offset.y,\n    canvasViewState.scale,\n  ]);\n\n  return (\n    <StyledCanvasWrapper>\n      <Controls\n        setCanvasViewState={setCanvasViewState}\n        canvasState={{\n          context,\n          canvasViewState,\n          canvasWidth,\n          canvasHeight,\n        }}\n        savedCanvasState={savedCanvasViewState}\n        setSavedCanvasState={setSavedCanvasViewState}\n      />\n      <StyledCanvas\n        ref={canvasRef}\n        width={canvasWidth * devicePixelRatio}\n        height={canvasHeight * devicePixelRatio}\n        cssWidth={canvasWidth}\n        cssHeight={canvasHeight}\n        onMouseDown={(event: React.MouseEvent | MouseEvent) =>\n          onMouseDown(\n            event,\n            { context, canvasViewState, canvasWidth, canvasHeight },\n            () => startPan(event)\n          )\n        }\n        onDoubleClick={(event: React.MouseEvent) =>\n          handleDoubleClick(event, {\n            context,\n            canvasViewState,\n            canvasWidth,\n            canvasHeight,\n          })\n        }\n      />\n    </StyledCanvasWrapper>\n  );\n}\n","import * as React from \"react\";\nimport { useEffect } from \"react\";\n\nexport default function useOnClickCanvas(\n  ref: React.RefObject<HTMLCanvasElement>,\n  onClickCanvas: React.Dispatch<React.SetStateAction<boolean>>\n): void {\n  useEffect(() => {\n    const handleClickOutside = (event: React.MouseEvent | MouseEvent) => {\n      const keyBoardActive =\n        !!ref.current && ref.current.contains(event.target as Node);\n      onClickCanvas(keyBoardActive);\n    };\n\n    // Bind the event listener\n    document.addEventListener(\"mousedown\", handleClickOutside);\n    return () => {\n      // Unbind the event listener on clean up\n      document.removeEventListener(\"mousedown\", handleClickOutside);\n    };\n  }, [ref, onClickCanvas]);\n}\n","import React, { useCallback } from \"react\";\nimport { CanvasState } from \"../components/Canvas/Canvas\";\nimport { makeNode } from \"hotstuff-network\";\nimport {\n  intersectsCircle,\n  mouseToNodeCoords,\n  rotatedDirection,\n} from \"../components/Canvas/canvasUtils\";\nimport { AppNode } from \"../App\";\nimport config from \"../config\";\n\nconst { newNodeNamePrefix, defaultNodeRadius } = config;\n\nexport default function useDoubleClick(\n  appNodes: AppNode[],\n  addNode: (node: AppNode) => void,\n  updateNodes: (nodes: AppNode[]) => void\n): (event: React.MouseEvent | MouseEvent, canvasState: CanvasState) => void {\n  return useCallback(\n    (event: React.MouseEvent | MouseEvent, canvasState: CanvasState) => {\n      event.preventDefault();\n\n      const nodeCoordsOfMouse = mouseToNodeCoords(event, canvasState);\n\n      const doubleClickedNode = appNodes.find((node) =>\n        intersectsCircle(nodeCoordsOfMouse, node.center, node.radius)\n      );\n      if (doubleClickedNode) {\n        updateNodes([\n          {\n            ...doubleClickedNode,\n            textDirection: rotatedDirection(doubleClickedNode.textDirection),\n          },\n        ]);\n        return;\n      }\n\n      const numNewNodes = appNodes.filter((node) =>\n        node.name.startsWith(newNodeNamePrefix)\n      ).length;\n\n      const newNode = makeNode({\n        name:\n          numNewNodes === 0\n            ? `${newNodeNamePrefix}`\n            : `${newNodeNamePrefix} (${numNewNodes + 1})`,\n        temperatureDegC: config.defaultTempDegC,\n        capacitanceJPerDegK: config.defaultCapJPerDegK,\n        powerGenW: config.defaultPowerGenW,\n        isBoundary: false,\n      });\n\n      const newAppNode: AppNode = {\n        ...newNode,\n        center: nodeCoordsOfMouse,\n        radius: defaultNodeRadius,\n        color: \"red\",\n        isActive: false,\n        textDirection: \"D\",\n      };\n      addNode(newAppNode);\n    },\n    [addNode, appNodes, updateNodes]\n  );\n}\n","import React, { useCallback } from \"react\";\nimport { CanvasState } from \"../components/Canvas/Canvas\";\nimport {\n  drawArrowWithoutHead,\n  intersectsCircle,\n  mouseToNodeCoords,\n} from \"../components/Canvas/canvasUtils\";\nimport { makeConnection } from \"hotstuff-network\";\nimport { AppConnection, AppNode } from \"../App\";\nimport config from \"../config\";\n\nconst { defaultResistanceDegKPerW, defaultConnectionKind } = config;\n\nexport default function useAddConnection(\n  appNodes: AppNode[],\n  appConnections: AppConnection[],\n  addConnection: (newConnection: AppConnection) => void,\n  clearAndRedraw: (canvasState: CanvasState) => void\n): (\n  event: React.MouseEvent | MouseEvent,\n  clickedNode: AppNode,\n  canvasState: CanvasState\n) => void {\n  const drawConnectionBeingMade = useCallback(\n    (\n      event: React.MouseEvent | MouseEvent,\n      clickedNode: AppNode,\n      canvasState: CanvasState\n    ) => {\n      if (canvasState.context) {\n        const nodeCoordsOfMouse = mouseToNodeCoords(event, canvasState);\n        clearAndRedraw(canvasState);\n        drawArrowWithoutHead(\n          canvasState.context,\n          clickedNode.center,\n          nodeCoordsOfMouse,\n          \"grey\"\n        );\n      }\n    },\n    [clearAndRedraw]\n  );\n\n  return useCallback(\n    (\n      event: React.MouseEvent | MouseEvent,\n      clickedNode: AppNode,\n      canvasState: CanvasState\n    ) => {\n      const drawConnWrapper = (event: React.MouseEvent | MouseEvent) => {\n        drawConnectionBeingMade(event, clickedNode, canvasState);\n      };\n\n      const mouseUp = (event: React.MouseEvent | MouseEvent) => {\n        document.removeEventListener(\"mousemove\", drawConnWrapper);\n        document.removeEventListener(\"mouseup\", mouseUp);\n\n        // if arrow released on a node, make new connection\n        const nodeCoordsOfMouse = mouseToNodeCoords(event, canvasState);\n        const mouseUpOnNode = appNodes.find(\n          (node) =>\n            intersectsCircle(nodeCoordsOfMouse, node.center, node.radius) &&\n            node.id !== clickedNode.id &&\n            !appConnections.some(\n              (conn) =>\n                (conn.source.id === node.id &&\n                  conn.target.id === clickedNode.id) ||\n                (conn.target.id === node.id &&\n                  conn.source.id === clickedNode.id)\n            )\n        );\n\n        if (mouseUpOnNode) {\n          const newConnection = {\n            ...makeConnection({\n              source: clickedNode,\n              target: mouseUpOnNode,\n              resistanceDegKPerW: defaultResistanceDegKPerW,\n              kind: defaultConnectionKind,\n            }),\n            sourceName: clickedNode.name,\n            targetName: mouseUpOnNode.name,\n          };\n          addConnection(newConnection);\n        } else {\n          clearAndRedraw(canvasState);\n        }\n      };\n      document.addEventListener(\"mousemove\", drawConnWrapper);\n      document.addEventListener(\"mouseup\", mouseUp);\n    },\n    [\n      addConnection,\n      appConnections,\n      appNodes,\n      clearAndRedraw,\n      drawConnectionBeingMade,\n    ]\n  );\n}\n","import React, { useCallback, useRef } from \"react\";\nimport { CanvasState } from \"../components/Canvas/Canvas\";\nimport { mouseToNodeCoords } from \"../components/Canvas/canvasUtils\";\nimport { AppNode } from \"../App\";\nimport { diffPoints } from \"../utils/pointUtils\";\n\nfunction getNewAppNodes(\n  clickedMouseEvent: React.MouseEvent | MouseEvent,\n  currentMouseEvent: React.MouseEvent | MouseEvent,\n  canvasState: CanvasState,\n  clickedNode: AppNode,\n  shiftKeyPressed: boolean,\n  activeNodes: AppNode[]\n): AppNode[] {\n  const offsetMouseToCenter = diffPoints(\n    mouseToNodeCoords(clickedMouseEvent, canvasState),\n    clickedNode.center\n  );\n\n  const newClickedCenter = diffPoints(\n    mouseToNodeCoords(currentMouseEvent, canvasState),\n    offsetMouseToCenter\n  );\n\n  const newClickedNode = {\n    ...clickedNode,\n    isActive: true,\n    center: newClickedCenter,\n  };\n\n  const newActiveNodes =\n    clickedNode.isActive || shiftKeyPressed\n      ? activeNodes.map((node) => {\n          const distanceFromClickedCenter = diffPoints(\n            clickedNode.center,\n            node.center\n          );\n          return {\n            ...node,\n            center: diffPoints(newClickedCenter, distanceFromClickedCenter),\n          };\n        })\n      : [];\n\n  return [newClickedNode, ...newActiveNodes];\n}\n\nexport default function useMoveNode(\n  updateNodes: (nodesToUpdate: AppNode[], clearActiveNodes?: boolean) => void\n): (\n  event: React.MouseEvent | MouseEvent,\n  clickedNode: AppNode,\n  activeNodes: AppNode[],\n  canvasState: CanvasState\n) => void {\n  const movedRef = useRef<boolean>(false);\n\n  return useCallback(\n    (\n      clickedMouseEvent: React.MouseEvent | MouseEvent,\n      clickedNode: AppNode,\n      activeNodes: AppNode[],\n      canvasState: CanvasState\n    ) => {\n      const shiftKeyPressed = clickedMouseEvent.shiftKey;\n      const moveNode = (currentMouseEvent: React.MouseEvent | MouseEvent) => {\n        if (canvasState.context) {\n          movedRef.current = true;\n          const newNodes = getNewAppNodes(\n            clickedMouseEvent,\n            currentMouseEvent,\n            canvasState,\n            clickedNode,\n            shiftKeyPressed,\n            activeNodes\n          );\n          updateNodes(newNodes, !currentMouseEvent.shiftKey);\n        }\n      };\n      const mouseUp = (mouseUpEvent: React.MouseEvent | MouseEvent) => {\n        document.removeEventListener(\"mousemove\", moveNode);\n        document.removeEventListener(\"mouseup\", mouseUp);\n        const newNodes = getNewAppNodes(\n          clickedMouseEvent,\n          mouseUpEvent,\n          canvasState,\n          clickedNode,\n          shiftKeyPressed,\n          activeNodes\n        );\n        updateNodes(newNodes, !movedRef.current && !shiftKeyPressed);\n        movedRef.current = false;\n      };\n      document.addEventListener(\"mousemove\", moveNode);\n      document.addEventListener(\"mouseup\", mouseUp);\n    },\n    [updateNodes]\n  );\n}\n","import React, { useCallback } from \"react\";\nimport { CanvasState } from \"../components/Canvas/Canvas\";\nimport {\n  drawClearBox,\n  isInsideBox,\n  mouseToNodeCoords,\n} from \"../components/Canvas/canvasUtils\";\nimport { AppNode } from \"../App\";\n\nexport default function useMultiSelect(\n  appNodes: AppNode[],\n  setActiveNodes: (activeNodeIds: string[]) => void,\n  clearAndRedraw: (canvasState: CanvasState) => void\n): (event: React.MouseEvent | MouseEvent, canvasState: CanvasState) => void {\n  return useCallback(\n    (event: React.MouseEvent | MouseEvent, canvasState: CanvasState) => {\n      const boxStart = mouseToNodeCoords(event, canvasState);\n      const drawBox = (event: React.MouseEvent | MouseEvent) => {\n        if (canvasState.context) {\n          clearAndRedraw(canvasState);\n          drawClearBox(\n            canvasState.context,\n            boxStart,\n            mouseToNodeCoords(event, canvasState),\n            \"grey\"\n          );\n        }\n      };\n      const mouseUp = (event: React.MouseEvent | MouseEvent) => {\n        document.removeEventListener(\"mousemove\", drawBox);\n        document.removeEventListener(\"mouseup\", mouseUp);\n\n        const boxEnd = mouseToNodeCoords(event, canvasState);\n        const activeNodeIds = appNodes\n          .filter(\n            (node) =>\n              isInsideBox(boxStart, boxEnd, node.center) || node.isActive\n          )\n          .map((node) => node.id);\n        setActiveNodes(activeNodeIds);\n      };\n      document.addEventListener(\"mousemove\", drawBox);\n      document.addEventListener(\"mouseup\", mouseUp);\n    },\n    [appNodes, clearAndRedraw, setActiveNodes]\n  );\n}\n","import * as React from \"react\";\nimport { useCallback } from \"react\";\nimport {\n  intersectsCircle,\n  mouseToNodeCoords,\n} from \"../components/Canvas/canvasUtils\";\nimport { AppConnection, AppNode } from \"../App\";\nimport { CanvasState } from \"../components/Canvas/Canvas\";\nimport useAddConnection from \"./useAddConnection\";\nimport useMoveNode from \"./useMoveNode\";\nimport useMultiSelect from \"./useMultiSelect\";\n\nexport default function useOnMouseDown(\n  appNodes: AppNode[],\n  appConnections: AppConnection[],\n  addConnection: (newConnection: AppConnection) => void,\n  updateNodes: (nodesToUpdate: AppNode[], clearActiveNodes?: boolean) => void,\n  setActiveNodes: (activeNodeIds: string[]) => void,\n  clearActiveNodes: () => void,\n  clearAndRedraw: (canvasState: CanvasState) => void\n): (\n  event: React.MouseEvent | MouseEvent,\n  canvasState: CanvasState,\n  defaultBehavior: (event: React.MouseEvent | MouseEvent) => void\n) => void {\n  const makeNewConnection = useAddConnection(\n    appNodes,\n    appConnections,\n    addConnection,\n    clearAndRedraw\n  );\n  const moveNode = useMoveNode(updateNodes);\n  const multiSelect = useMultiSelect(appNodes, setActiveNodes, clearAndRedraw);\n\n  return useCallback(\n    (\n      event: React.MouseEvent | MouseEvent,\n      canvasState: CanvasState,\n      defaultBehavior: (event: React.MouseEvent | MouseEvent) => void\n    ) => {\n      const nodeCoordsOfMouse = mouseToNodeCoords(event, canvasState);\n\n      const activeNodes = appNodes.filter((node) => node.isActive);\n      const activeNodeIds = activeNodes.map((node) => node.id);\n\n      const clickedNode = appNodes.find((node) =>\n        intersectsCircle(nodeCoordsOfMouse, node.center, node.radius)\n      );\n\n      if (clickedNode) {\n        if (event.altKey) {\n          makeNewConnection(event, clickedNode, canvasState);\n        } else if (event.shiftKey && activeNodeIds.includes(clickedNode.id)) {\n          setActiveNodes(activeNodeIds.filter((id) => id !== clickedNode.id));\n        } else {\n          moveNode(event, clickedNode, activeNodes, canvasState);\n        }\n      } else {\n        if (event.shiftKey) {\n          multiSelect(event, canvasState);\n        } else {\n          clearActiveNodes();\n          defaultBehavior(event);\n        }\n      }\n    },\n    [\n      appNodes,\n      clearActiveNodes,\n      moveNode,\n      multiSelect,\n      makeNewConnection,\n      setActiveNodes,\n    ]\n  );\n}\n","import { makeConnection, makeNode } from \"hotstuff-network\";\nimport { AppConnection, AppNode } from \"./App\";\nimport config from \"./config\";\nimport { ORIGIN } from \"./utils/pointUtils\";\n\nconst test1 = makeNode({\n  name: \"test1\",\n  temperatureDegC: 85,\n  capacitanceJPerDegK: 100,\n  powerGenW: 0,\n  isBoundary: true,\n});\n\nconst test2 = makeNode({\n  name: \"test2\",\n  temperatureDegC: 23,\n  capacitanceJPerDegK: 2,\n  powerGenW: 0,\n  isBoundary: false,\n});\n\nexport const defaultNodes: AppNode[] = [\n  {\n    ...test1,\n    center: { x: 200, y: 200 },\n    radius: config.defaultNodeRadius,\n    color: \"red\",\n    isActive: false,\n    textDirection: \"D\",\n  },\n  {\n    ...test2,\n    center: { x: 650, y: 450 },\n    radius: config.defaultNodeRadius,\n    color: \"red\",\n    isActive: false,\n    textDirection: \"D\",\n  },\n];\n\nexport const defaultConnections: AppConnection[] = [\n  {\n    ...makeConnection({\n      source: test1,\n      target: test2,\n      resistanceDegKPerW: 10,\n      kind: \"bi\",\n    }),\n    sourceName: test1.name,\n    targetName: test2.name,\n  },\n];\n\nexport const defaultTiming = {\n  timeStepS: config.defaultTimeStepSeconds,\n  totalTimeS: config.defaultTotalTimeSeconds,\n};\n\nexport const defaultCanvasViewState = {\n  offset: ORIGIN,\n  scale: 1,\n};\n\nexport const defaultAppState = {\n  output: undefined,\n  timing: defaultTiming,\n  nodes: defaultNodes,\n  connections: defaultConnections,\n  canvasViewState: defaultCanvasViewState,\n  savedCanvasState: defaultCanvasViewState,\n};\n","import { HSConnection, HSNode, ModelOutput, run } from \"hotstuff-network\";\nimport React, { useCallback, useState } from \"react\";\nimport styled from \"styled-components\";\nimport { Point } from \"./utils/pointUtils\";\nimport Sidebar from \"./components/Sidebar/Sidebar\";\nimport Plot from \"./components/Plot/Plot\";\nimport config from \"./config\";\nimport useWindowSize from \"./components/Canvas/hooks/useWindowSize\";\nimport Canvas, { CanvasViewState } from \"./components/Canvas/Canvas\";\nimport useDraw from \"./hooks/useDraw\";\nimport useDoubleClick from \"./hooks/useDoubleClick\";\nimport useNodeConnectionUtils from \"./hooks/useNodeConnectionUtils\";\nimport useOnMouseDown from \"./hooks/useOnMouseDown\";\nimport useKeyDown from \"./hooks/useKeyDown\";\nimport { defaultAppState } from \"./default\";\nimport useSessionStorageState from \"./hooks/useSessionStorageState\";\n\nconst {\n  editorWidthPerc,\n  canvasHeightPerc,\n  plotMargin,\n  tabHeightPx,\n  plotHeightBufferPx,\n} = config;\n\nexport type Direction = \"L\" | \"R\" | \"U\" | \"D\";\n\nexport type AppNode = HSNode & {\n  center: Point;\n  radius: number;\n  color: string;\n  isActive: boolean;\n  textDirection: Direction;\n};\n\nexport type AppConnection = HSConnection & {\n  sourceName: string;\n  targetName: string;\n};\n\nexport type Timing = {\n  timeStepS: number;\n  totalTimeS: number;\n};\n\nexport type AppState = {\n  output?: ModelOutput;\n  timing: Timing;\n  nodes: AppNode[];\n  connections: AppConnection[];\n  canvasViewState: CanvasViewState;\n  savedCanvasState: CanvasViewState;\n};\n\nconst StyledApp = styled.div<{ height: number }>`\n  display: flex;\n  height: ${(props) => props.height}px;\n  user-select: none;\n  -webkit-user-select: none; /* Chrome/Safari */\n  -moz-user-select: none; /* Firefox */\n  -ms-user-select: none; /* IE10+ */\n`;\n\nconst StyledWorkspace = styled.div<{ height: number; width: number }>`\n  height: ${(props) => props.height}px;\n  width: ${(props) => (1 - editorWidthPerc) * props.width}px;\n`;\n\nconst StyledCanvas = styled.div<{ height: number }>`\n  width: 100%;\n  height: ${(props) => props.height}px;\n`;\n\nexport default function App(): React.ReactElement {\n  const [appState, setAppState] = useSessionStorageState<AppState>(\n    defaultAppState,\n    \"hotstuffAppState\"\n  );\n\n  const setAppNodes = useCallback(\n    (newNodes: AppNode[]) => {\n      setAppState((prevState) => ({\n        ...prevState,\n        nodes: newNodes,\n      }));\n    },\n    [setAppState]\n  );\n\n  const setAppConnections = useCallback(\n    (newConnections: AppConnection[]) => {\n      setAppState((prevState) => ({\n        ...prevState,\n        connections: newConnections,\n      }));\n    },\n    [setAppState]\n  );\n\n  const setCanvasState = useCallback(\n    (newCanvasState: CanvasViewState) => {\n      setAppState((prevState) => ({\n        ...prevState,\n        canvasViewState: newCanvasState,\n      }));\n    },\n    [setAppState]\n  );\n\n  const setSavedCanvasState = useCallback(\n    (newSavedCanvasState: CanvasViewState) => {\n      setAppState((prevState) => ({\n        ...prevState,\n        savedCanvasState: newSavedCanvasState,\n      }));\n    },\n    [setAppState]\n  );\n\n  const setTiming = useCallback(\n    (newTiming: Timing) => {\n      setAppState((prevState) => ({\n        ...prevState,\n        timing: newTiming,\n        output: undefined,\n      }));\n    },\n    [setAppState]\n  );\n\n  const setModelOutput = useCallback(\n    (newModelOutput: ModelOutput | undefined) => {\n      setAppState((prevState) => ({\n        ...prevState,\n        output: newModelOutput,\n      }));\n    },\n    [setAppState]\n  );\n\n  const [\n    addNode,\n    addConnection,\n    updateNodes,\n    deleteNodes,\n    updateConnections,\n    deleteConnections,\n    setActiveNodes,\n    clearActiveNodes,\n  ] = useNodeConnectionUtils(\n    appState.nodes,\n    setAppNodes,\n    appState.connections,\n    setAppConnections,\n    setModelOutput\n  );\n\n  const [keyboardActive, setKeyboardActive] = useState<boolean>(true);\n  useKeyDown(keyboardActive, appState.nodes, setAppNodes, deleteNodes);\n\n  const [draw, clearAndRedraw] = useDraw(appState.nodes, appState.connections);\n  const handleDoubleClick = useDoubleClick(\n    appState.nodes,\n    addNode,\n    updateNodes\n  );\n  const onMouseDown = useOnMouseDown(\n    appState.nodes,\n    appState.connections,\n    addConnection,\n    updateNodes,\n    setActiveNodes,\n    clearActiveNodes,\n    clearAndRedraw\n  );\n\n  const [size, ratio] = useWindowSize();\n  const [windowWidth, windowHeight] = size;\n\n  // width/heights\n  const workspaceWidth = windowWidth;\n  const workspaceHeight = windowHeight;\n  const canvasHeight = windowHeight * canvasHeightPerc;\n  const canvasWidth = windowWidth * (1 - editorWidthPerc);\n  const plotHeight =\n    (1 - canvasHeightPerc) * windowHeight - tabHeightPx - plotHeightBufferPx;\n  const plotWidth = canvasWidth;\n  const editorWidth = editorWidthPerc * windowWidth;\n\n  return (\n    <StyledApp height={windowHeight}>\n      <StyledWorkspace height={workspaceHeight} width={workspaceWidth}>\n        <StyledCanvas height={canvasHeight}>\n          <Canvas\n            canvasWidth={canvasWidth}\n            canvasHeight={canvasHeight}\n            devicePixelRatio={ratio}\n            draw={draw}\n            onMouseDown={onMouseDown}\n            handleDoubleClick={handleDoubleClick}\n            canvasViewState={appState.canvasViewState}\n            setCanvasViewState={setCanvasState}\n            savedCanvasViewState={appState.savedCanvasState}\n            setSavedCanvasViewState={setSavedCanvasState}\n            setKeyboardActive={setKeyboardActive}\n          />\n        </StyledCanvas>\n        <Plot\n          plotDimensions={{\n            height: plotHeight,\n            width: plotWidth,\n            margin: plotMargin,\n          }}\n          modelOutput={appState.output}\n        />\n      </StyledWorkspace>\n      <Sidebar\n        appState={appState}\n        setAppState={setAppState}\n        height={windowHeight}\n        width={editorWidth}\n        timing={appState.timing}\n        setTiming={setTiming}\n        nodes={appState.nodes}\n        connections={appState.connections}\n        // addNode={addNode}\n        updateNodes={(nodes: AppNode[]) => {\n          updateNodes(nodes);\n          setModelOutput(undefined);\n        }}\n        deleteNodes={deleteNodes}\n        updateConnections={(conns: AppConnection[]) => {\n          updateConnections(conns);\n          setModelOutput(undefined);\n        }}\n        deleteConnections={deleteConnections}\n        onRunModel={() => {\n          const output = run({\n            nodes: appState.nodes,\n            connections: appState.connections,\n            timeStepS: appState.timing.timeStepS,\n            totalTimeS: appState.timing.totalTimeS,\n          });\n          if (output.errors?.length) {\n            output.errors.forEach((error) => console.error(error.message));\n          }\n          setModelOutput(output);\n        }}\n      />\n    </StyledApp>\n  );\n}\n","import * as React from \"react\";\n\nexport default function useSessionStorageState<T>(\n  defaultValue: T,\n  key: string\n): [T, React.Dispatch<React.SetStateAction<T>>] {\n  const [value, setValue] = React.useState<T>(() => {\n    const localState = window.sessionStorage.getItem(key);\n    if (localState === null || localState === undefined) {\n      return defaultValue;\n    } else {\n      return JSON.parse(localState) as T;\n    }\n  });\n\n  React.useEffect(() => {\n    window.sessionStorage.setItem(key, JSON.stringify(value));\n  }, [key, value]);\n  return [value, setValue];\n}\n","import { useCallback } from \"react\";\nimport { AppConnection, AppNode } from \"../App\";\nimport { ModelOutput } from \"hotstuff-network\";\n\nexport default function useNodeConnectionUtils(\n  appNodes: AppNode[],\n  setAppNodes: (newNodes: AppNode[]) => void,\n  appConnections: AppConnection[],\n  setAppConnections: (newConnections: AppConnection[]) => void,\n  setModelOutput: (newModelOutput: ModelOutput | undefined) => void\n): [\n  (node: AppNode) => void,\n  (connection: AppConnection) => void,\n  (nodesToUpdate: AppNode[], clearActiveNodes?: boolean) => void,\n  (nodeIds: string[]) => void,\n  (connsToUpdate: AppConnection[]) => void,\n  (connIds: string[]) => void,\n  (activeNodeIds: string[]) => void,\n  () => void\n] {\n  const addNode = useCallback(\n    (node: AppNode) => {\n      const newNodes = appNodes.map((node) => ({\n        ...node,\n        isActive: false,\n      }));\n      newNodes.push({ ...node, isActive: true });\n      setAppNodes(newNodes);\n      setModelOutput(undefined);\n    },\n    [appNodes, setAppNodes, setModelOutput]\n  );\n\n  const addConnection = useCallback(\n    (connection: AppConnection) => {\n      setAppConnections([...appConnections, connection]);\n      setModelOutput(undefined);\n    },\n    [appConnections, setAppConnections, setModelOutput]\n  );\n\n  const updateNodes = useCallback(\n    (nodesToUpdate: AppNode[], clearActiveNodes = false) => {\n      const newNodes = appNodes.map((node) => {\n        const nodeToUpdate = nodesToUpdate.find(\n          (newNode) => newNode.id === node.id\n        );\n        if (nodeToUpdate) {\n          return nodeToUpdate;\n        } else {\n          if (clearActiveNodes) {\n            return { ...node, isActive: false };\n          } else {\n            return node;\n          }\n        }\n      });\n      setAppNodes(newNodes);\n\n      const newConnections = appConnections.map((prevConn) => {\n        const newSourceNode = nodesToUpdate.find(\n          (nodeToUpdate) => prevConn.source.id == nodeToUpdate.id\n        );\n        if (newSourceNode) {\n          return {\n            ...prevConn,\n            source: newSourceNode,\n            sourceName: newSourceNode.name,\n          };\n        }\n\n        const newTargetNode = nodesToUpdate.find(\n          (nodeToUpdate) => prevConn.target.id == nodeToUpdate.id\n        );\n        if (newTargetNode) {\n          return {\n            ...prevConn,\n            target: newTargetNode,\n            targetName: newTargetNode.name,\n          };\n        }\n        return prevConn;\n      });\n      setAppConnections(newConnections);\n    },\n    [appConnections, appNodes, setAppConnections, setAppNodes]\n  );\n\n  const deleteNodes = useCallback(\n    (nodeIds: string[]) => {\n      const newConnections = appConnections.filter(\n        (conn) =>\n          !nodeIds.includes(conn.source.id) && !nodeIds.includes(conn.target.id)\n      );\n      setAppConnections(newConnections);\n      setModelOutput(undefined);\n\n      const newNodes = appNodes.filter((node) => !nodeIds.includes(node.id));\n      setAppNodes(newNodes);\n    },\n    [appConnections, appNodes, setAppConnections, setAppNodes, setModelOutput]\n  );\n\n  const updateConnections = useCallback(\n    (connsToUpdate: AppConnection[]) => {\n      const connIdsToUpdate = connsToUpdate.map((conn) => conn.id);\n      const oldConns = appConnections.filter(\n        (conn) => !connIdsToUpdate.includes(conn.id)\n      );\n      setAppConnections([...connsToUpdate, ...oldConns]);\n      setModelOutput(undefined);\n    },\n    [appConnections, setAppConnections, setModelOutput]\n  );\n\n  const deleteConnections = useCallback(\n    (connIds: string[]) => {\n      setAppConnections(\n        appConnections.filter((conn) => !connIds.includes(conn.id))\n      );\n      setModelOutput(undefined);\n    },\n    [appConnections, setAppConnections, setModelOutput]\n  );\n\n  const setActiveNodes = useCallback(\n    (activeNodeIds: string[]) => {\n      setAppNodes(\n        appNodes.map((node) => ({\n          ...node,\n          isActive: activeNodeIds.includes(node.id),\n        }))\n      );\n    },\n    [appNodes, setAppNodes]\n  );\n\n  const clearActiveNodes = useCallback(() => {\n    const anyActiveNodes = appNodes.find((node) => node.isActive) !== undefined;\n    if (anyActiveNodes) {\n      setAppNodes(\n        appNodes.map((node) => ({\n          ...node,\n          isActive: false,\n        }))\n      );\n    }\n  }, [appNodes, setAppNodes]);\n\n  return [\n    addNode,\n    addConnection,\n    updateNodes,\n    deleteNodes,\n    updateConnections,\n    deleteConnections,\n    setActiveNodes,\n    clearActiveNodes,\n  ];\n}\n","import React, { useEffect } from \"react\";\nimport { AppNode } from \"../App\";\n\nexport default function useKeyDown(\n  keyboardActive: boolean,\n  appNodes: AppNode[],\n  setAppNodes: (newNodes: AppNode[]) => void,\n  deleteNodes: (nodeIds: string[]) => void\n): void {\n  useEffect(() => {\n    const onKeyDown = (event: React.KeyboardEvent | KeyboardEvent) => {\n      if (keyboardActive) {\n        // shift + A makes all nodes active\n        if (event.metaKey) {\n          if (event.keyCode === 65) {\n            event.preventDefault();\n            setAppNodes(\n              appNodes.map((node) => {\n                return { ...node, isActive: true };\n              })\n            );\n          }\n        }\n\n        // delete active nodes on back/del\n        if (event.key === \"Backspace\" || event.key === \"Delete\") {\n          event.preventDefault();\n          deleteNodes(\n            appNodes.filter((node) => node.isActive).map((node) => node.id)\n          );\n        }\n\n        // escape key makes all inactive\n        if (event.keyCode === 27) {\n          setAppNodes(appNodes.map((node) => ({ ...node, isActive: false })));\n        }\n      }\n    };\n    document.addEventListener(\"keydown\", onKeyDown);\n    return () => document.removeEventListener(\"keydown\", onKeyDown);\n  }, [appNodes, deleteNodes, keyboardActive, setAppNodes]);\n}\n","import { useCallback } from \"react\";\nimport { drawConnection, drawNode } from \"../components/Canvas/canvasUtils\";\nimport { AppConnection, AppNode } from \"../App\";\nimport { CanvasState } from \"../components/Canvas/Canvas\";\n\nexport default function useDraw(\n  appNodes: AppNode[],\n  appConnections: AppConnection[]\n): [\n  (context: CanvasRenderingContext2D) => void,\n  (canvasState: CanvasState) => void\n] {\n  const draw = useCallback(\n    (context: CanvasRenderingContext2D) => {\n      appNodes.map((node) => {\n        drawNode(\n          context,\n          node.name,\n          node.center,\n          node.radius,\n          node.isActive,\n          node.isBoundary,\n          node.textDirection\n          // node.temperatureDegC,\n          // node.capacitanceJPerDegK\n        );\n      });\n\n      appConnections.map((conn) => {\n        const { source, target, kind } = conn;\n        const sourceAppNode = appNodes.find((node) => node.id === source.id);\n        const targetAppNode = appNodes.find((node) => node.id === target.id);\n        if (sourceAppNode && targetAppNode) {\n          drawConnection(context, sourceAppNode, targetAppNode, kind);\n        }\n      });\n    },\n    [appConnections, appNodes]\n  );\n\n  const clearAndRedraw = useCallback(\n    (canvasState: CanvasState) => {\n      if (canvasState.context) {\n        canvasState.context.clearRect(\n          -canvasState.canvasViewState.offset.x,\n          -canvasState.canvasViewState.offset.y,\n          canvasState.canvasWidth / canvasState.canvasViewState.scale,\n          canvasState.canvasHeight / canvasState.canvasViewState.scale\n        );\n        draw(canvasState.context);\n      }\n    },\n    [draw]\n  );\n\n  return [draw, clearAndRedraw];\n}\n","import { useLayoutEffect, useState } from \"react\";\n\nexport default function useWindowSize(): [[number, number], number] {\n  const [size, setSize] = useState<[number, number]>([0, 0]);\n  const [ratio, setRatio] = useState(1);\n\n  useLayoutEffect(() => {\n    function updateSize() {\n      setSize([window.innerWidth, window.innerHeight]);\n    }\n    function updateRatio() {\n      const { devicePixelRatio: ratio = 1 } = window;\n      setRatio(ratio);\n    }\n    window.addEventListener(\"resize\", updateSize);\n    window.addEventListener(\"resize\", updateRatio);\n    updateSize();\n    updateRatio();\n    return () => {\n      window.removeEventListener(\"resize\", updateSize);\n      window.removeEventListener(\"resize\", updateRatio);\n    };\n  }, []);\n  return [size, ratio];\n}\n","export function forceShowScrollbars(): void {\n  // Returns whether scrollbars show up on scrollable elements.\n  // This is false on Macs when the \"General > Show scroll bars\" setting is\n  // not set to \"Always\" (the default is \"When scrolling\"). The approach\n  // taken here is to create an element that will scroll and then compare\n  // its outer width (including scrollbars) to its inner width (excluding\n  // scrollbars).\n  function areScrollbarsVisible() {\n    const scrollableElem = document.createElement(\"div\"),\n      innerElem = document.createElement(\"div\");\n    scrollableElem.style.width = \"30px\";\n    scrollableElem.style.height = \"30px\";\n    scrollableElem.style.overflow = \"scroll\";\n    scrollableElem.style.borderWidth = \"0\";\n    innerElem.style.width = \"30px\";\n    innerElem.style.height = \"60px\";\n    scrollableElem.appendChild(innerElem);\n    document.body.appendChild(scrollableElem); // Elements only have width if they're in the layout\n    const diff = scrollableElem.offsetWidth - scrollableElem.clientWidth;\n    document.body.removeChild(scrollableElem);\n    return diff > 0;\n  }\n\n  window.addEventListener(\"load\", function () {\n    // Show scrollbars if they're hidden.\n    if (!areScrollbarsVisible()) {\n      document.body.classList.add(\"force-show-scrollbars\");\n    }\n  });\n}\n","import * as React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport { forceShowScrollbars } from \"./utils/scrollBar\";\n\nforceShowScrollbars();\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}