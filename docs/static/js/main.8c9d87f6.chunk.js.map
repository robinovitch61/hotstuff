{"version":3,"sources":["components/App.tsx","index.tsx"],"names":["colors","DEFAULT_NODES","DEFAULT_CONNECTIONS","StyledTitle","styled","h1","StyledForm","form","StyledCharts","div","StyledFormShortTextInput","StyledFormLongTextInput","StyledLabelShort","label","StyledLabelLong","StyledTextArea","textarea","StyledSubmit","input","FormShortTextInput","props","type","defaultValue","defaultVal","onChange","event","FormLongTextInput","style","marginRight","onInput","element","target","height","scrollHeight","App","useState","undefined","results","setResults","totalTimeS","setTotalTimeS","timeStepS","setTimeStepS","parseTextToNodes","nodes","setNodes","nodeText","setNodeText","parseTextToConnections","connections","setConnections","connectionText","setConnectionText","text","JSON5","map","node","makeNode","name","temperatureDegC","capacitanceJPerDegK","powerGenW","isBoundary","e","console","error","conn","sourceNode","filter","targetNode","makeConnection","source","resistanceDegKPerW","kind","useEffect","plotParams","left","right","top","bottom","res","nodeResults","length","emptyOutput","data","lowerMag","Math","floor","log10","divisibleBy","pow","includeAll","timeSeriesS","temps","heatTransfers","forEach","t","idx","val","abs","temp","ht","nodeResult","tempDegC","connectionResults","connectionResult","connection","heatTransferW","push","plotShape","tempPlotData","heatTransferPlotData","onSubmit","run","errors","err","message","runModel","preventDefault","computeTimeS","toFixed","ResponsiveContainer","className","LineChart","margin","CartesianGrid","strokeDasharray","XAxis","dataKey","value","position","dy","YAxis","angle","dx","Tooltip","Legend","layout","verticalAlign","align","wrapperStyle","paddingLeft","Line","stroke","activeDot","r","id","fontSize","parseFloat","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.8c9d87f6.chunk.js","sourcesContent":["import React, { ChangeEvent, useEffect, useRef, useState } from \"react\";\nimport Qty from \"js-quantities\"; // https://github.com/gentooboontoo/js-quantities/blob/master/src/quantities/definitions.js\nimport Canvas from \"./Canvas/Canvas\";\nimport * as JSON5 from \"json5\";\nimport {\n  run,\n  makeNode,\n  makeConnection,\n  ModelOutput,\n  HSNode,\n  HSConnection,\n  emptyOutput,\n} from \"hotstuff-network\";\nimport styled from \"styled-components\";\nimport {\n  CartesianGrid,\n  Legend,\n  Line,\n  LineChart,\n  ResponsiveContainer,\n  Tooltip,\n  XAxis,\n  YAxis,\n} from \"recharts\";\n\nconst colors = [\n  \"#2ecc71\",\n  \"#3498db\",\n  \"#9b59b6\",\n  \"#e74c3c\",\n  \"#e67e22\",\n  \"#34495e\",\n  \"#16a085\",\n];\n\nconst MAX_PLOT_POINTS_PER_NODE = 400;\nconst DEFAULT_TIMESTEP = 0.1;\nconst DEFAULT_TOTAL_TIME = 50;\nconst DEFAULT_NODES = `[\n  {\n    \"name\": \"first\",\n    \"temperatureDegC\": 120,\n    \"capacitanceJPerDegK\": 200,\n    \"powerGenW\": 0,\n    \"isBoundary\": false\n  },\n  {\n    \"name\": \"second\",\n    \"temperatureDegC\": 40,\n    \"capacitanceJPerDegK\": 10,\n    \"powerGenW\": 0,\n    \"isBoundary\": true\n  },\n  {\n    \"name\": \"third\",\n    \"temperatureDegC\": -10,\n    \"capacitanceJPerDegK\": 8,\n    \"powerGenW\": 10,\n    \"isBoundary\": false\n  },\n]`;\nconst DEFAULT_CONNECTIONS = `[\n  {\n    source: \"first\",\n    target: \"second\",\n    resistanceDegKPerW: 0.1,\n    kind: \"bi\",\n  },\n  {\n    source: \"first\",\n    target: \"third\",\n    resistanceDegKPerW: 0.5,\n    kind: \"uni\",\n  },\n  {\n    source: \"second\",\n    target: \"third\",\n    resistanceDegKPerW: 3,\n    kind: \"bi\",\n  },\n]`;\n\nexport type Point = {\n  xPos: number;\n  yPos: number;\n};\n\nexport type HotNode = {\n  topLeftCorner: Point;\n  bottomRightCorner: Point;\n  shape: \"Circle\" | \"Rectangle\";\n  thermalCapacitance: Qty;\n  temperature: Qty;\n  isBoundary: boolean;\n};\n\nconst StyledTitle = styled.h1`\n  width: 100%;\n  text-align: center;\n  padding: 1em 0 0.5em 0;\n  margin: 0;\n\n  &&:before,\n  &&:after {\n    content: \"ðŸ”¥\";\n  }\n`;\n\nconst StyledForm = styled.form`\n  display: flex;\n  flex-direction: column;\n  width: 100%;\n  align-items: center;\n`;\n\nconst StyledCharts = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  width: 100%;\n  margin-top: 2em;\n\n  .chart {\n    width: 60% !important;\n    max-width: 900px;\n\n    @media only screen and (max-width: 600px) {\n      width: 90% !important;\n      touch-action: pan-y;\n    }\n  }\n`;\n\nconst StyledFormShortTextInput = styled.div`\n  display: flex;\n  width: 100%;\n  justify-content: center;\n  margin: 0.5em;\n`;\n\nconst StyledFormLongTextInput = styled.div`\n  display: flex;\n  width: 100%;\n  justify-content: center;\n  margin: 0.5em;\n`;\n\nconst StyledLabelShort = styled.label`\n  display: flex;\n  max-width: 400px;\n  width: 95%;\n  justify-content: space-between;\n`;\n\nconst StyledLabelLong = styled.label`\n  display: flex;\n  flex-direction: column;\n  max-width: 600px;\n  width: 95%;\n  align-items: center;\n`;\n\nconst StyledTextArea = styled.textarea`\n  width: 80%;\n  min-width: 80%;\n  max-width: 80%;\n  min-height: 200px;\n`;\n\nconst StyledSubmit = styled.input`\n  display: flex;\n  align-items: center;\n  -webkit-appearance: none;\n  border: none;\n  border-radius: 10px;\n  padding: 0.8em 3em;\n  margin: 1em;\n  font-size: 1.2em;\n  background: #dbdbdb;\n\n  &&:hover {\n    cursor: pointer;\n  }\n`;\n\ntype FormShortTextInputProps = {\n  label: string;\n  defaultVal?: number;\n  onChange: (event: ChangeEvent<HTMLInputElement>) => void;\n};\n\ntype FormLongTextInputProps = {\n  label: string;\n  defaultVal?: string;\n  onChange: (event: ChangeEvent<HTMLTextAreaElement>) => void;\n};\n\nfunction adjustTextAreaHeight(element: HTMLTextAreaElement) {\n  element.style.height = \"auto\";\n  element.style.height = element.scrollHeight + \"px\";\n}\n\nfunction FormShortTextInput(props: FormShortTextInputProps) {\n  return (\n    <StyledFormShortTextInput>\n      <StyledLabelShort>\n        {props.label}\n        <input\n          type=\"text\"\n          defaultValue={props.defaultVal}\n          onChange={(event) => props.onChange(event)}\n        />\n      </StyledLabelShort>\n    </StyledFormShortTextInput>\n  );\n}\n\nfunction FormLongTextInput(props: FormLongTextInputProps) {\n  return (\n    <StyledFormLongTextInput>\n      <StyledLabelLong>\n        <div style={{ marginRight: \"10px\" }}>{props.label}</div>\n        <StyledTextArea\n          onInput={(event) =>\n            adjustTextAreaHeight(event.target as HTMLTextAreaElement)\n          }\n          defaultValue={props.defaultVal}\n          onChange={(event) => props.onChange(event)}\n        />\n      </StyledLabelLong>\n    </StyledFormLongTextInput>\n  );\n}\n\nexport default function App() {\n  const [results, setResults] = useState<ModelOutput | undefined>(undefined);\n  const [totalTimeS, setTotalTimeS] = useState(DEFAULT_TOTAL_TIME);\n  const [timeStepS, setTimeStepS] = useState(DEFAULT_TIMESTEP);\n  const [nodes, setNodes] = useState<HSNode[]>(parseTextToNodes(DEFAULT_NODES));\n  const [nodeText, setNodeText] = useState(DEFAULT_NODES);\n  const [connections, setConnections] = useState<HSConnection[]>(\n    parseTextToConnections(parseTextToNodes(DEFAULT_NODES), DEFAULT_CONNECTIONS)\n  );\n  const [connectionText, setConnectionText] = useState(DEFAULT_CONNECTIONS);\n\n  // update both nodes and connections on text update\n  useEffect(() => {\n    const nodes = parseTextToNodes(nodeText);\n    setNodes(nodes);\n    const connections = parseTextToConnections(nodes, connectionText);\n    setConnections(connections);\n  }, [nodeText, connectionText]);\n\n  function runModel(): ModelOutput {\n    const results = run({\n      nodes,\n      connections,\n      timeStepS,\n      totalTimeS,\n    });\n    if (results.errors) {\n      results.errors.map((err) => console.error(`${err.name}: ${err.message}`));\n    }\n    return results;\n  }\n\n  function parseTextToNodes(text: string): HSNode[] {\n    try {\n      const parsed = JSON5.parse(text);\n      return parsed.map((node: any) =>\n        makeNode({\n          name: node[\"name\"],\n          temperatureDegC: node[\"temperatureDegC\"],\n          capacitanceJPerDegK: node[\"capacitanceJPerDegK\"],\n          powerGenW: node[\"powerGenW\"],\n          isBoundary: node[\"isBoundary\"],\n        })\n      );\n    } catch (e) {\n      console.error(e);\n      return [];\n    }\n  }\n\n  function parseTextToConnections(\n    nodes: HSNode[],\n    text: string\n  ): HSConnection[] {\n    try {\n      const parsed = JSON5.parse(text);\n      return parsed.map((conn: any) => {\n        const sourceNode = nodes.filter(\n          (node) => node.name === conn[\"source\"]\n        )[0];\n        const targetNode = nodes.filter(\n          (node) => node.name === conn[\"target\"]\n        )[0];\n        return makeConnection({\n          source: sourceNode,\n          target: targetNode,\n          resistanceDegKPerW: conn[\"resistanceDegKPerW\"],\n          kind: conn[\"bi\"],\n        });\n      });\n    } catch (e) {\n      console.error(e);\n      return [];\n    }\n  }\n\n  // show the temps of the first node as dots vertically along the svg\n  const plotParams = {\n    height: 350,\n    margin: {\n      left: 5,\n      right: 5,\n      top: 40,\n      bottom: 40,\n    },\n  };\n\n  function plotShape(data: ModelOutput): [any[], any[]] {\n    const lowerMag = Math.floor(Math.log10(data.totalTimeS));\n    const divisibleBy = Math.pow(10, lowerMag - 1);\n\n    function include(val: number) {\n      return Math.abs(val % divisibleBy) === 0;\n    }\n\n    const includeAll = data.timeSeriesS.length < MAX_PLOT_POINTS_PER_NODE;\n    const temps: any[] = [];\n    const heatTransfers: any[] = [];\n    data.timeSeriesS.forEach((t, idx) => {\n      if (includeAll || include(t)) {\n        const temp: any = { name: t };\n        const ht: any = { name: t };\n        data.nodeResults.forEach((nodeResult) => {\n          temp[nodeResult.node.name] = nodeResult.tempDegC[idx];\n        });\n        data.connectionResults.forEach((connectionResult) => {\n          ht[\n            `${connectionResult.connection.source.name} to ${connectionResult.connection.target.name}`\n          ] = connectionResult.heatTransferW[idx];\n        });\n        temps.push(temp);\n        heatTransfers.push(ht);\n      }\n    });\n    return [temps, heatTransfers];\n  }\n\n  const res =\n    !!results && results.nodeResults.length > 0 ? results : emptyOutput;\n  const [tempPlotData, heatTransferPlotData] = plotShape(res);\n\n  return (\n    <div>\n      <StyledForm\n        onSubmit={(event) => {\n          try {\n            setResults(runModel());\n          } catch (e) {\n            console.error(e);\n          }\n          event.preventDefault();\n        }}\n      >\n        {res.timeSeriesS.length > 0 ? (\n          <>\n            <StyledTitle>\n              {`Completed in ${res.computeTimeS.toFixed(2)} seconds`}\n            </StyledTitle>\n            <StyledCharts>\n              <ResponsiveContainer\n                height={plotParams.height}\n                className={\"chart\"}\n              >\n                <LineChart\n                  data={tempPlotData}\n                  margin={{\n                    top: 0,\n                    right: plotParams.margin.right,\n                    left: plotParams.margin.left,\n                    bottom: plotParams.margin.bottom,\n                  }}\n                >\n                  <CartesianGrid strokeDasharray=\"3 3\" />\n                  <XAxis\n                    dataKey=\"name\"\n                    label={{\n                      value: \"Time [seconds]\",\n                      position: \"middle\",\n                      dy: 20,\n                    }}\n                  />\n                  <YAxis\n                    label={{\n                      value: \"Temperature [degC]\",\n                      position: \"middle\",\n                      angle: -90,\n                      dx: -20,\n                    }}\n                  />\n                  <Tooltip />\n                  <Legend\n                    layout=\"horizontal\"\n                    verticalAlign=\"top\"\n                    align=\"center\"\n                    wrapperStyle={{\n                      paddingLeft: \"10px\",\n                    }}\n                  />\n                  {res.nodeResults.map((nodeResult, idx) => {\n                    return (\n                      <Line\n                        key={nodeResult.node.id}\n                        type={\"monotone\"}\n                        dataKey={nodeResult.node.name}\n                        stroke={colors[idx]}\n                        activeDot={{ r: 8 }}\n                      />\n                    );\n                  })}\n                </LineChart>\n              </ResponsiveContainer>\n              <ResponsiveContainer\n                height={plotParams.height}\n                className={\"chart\"}\n              >\n                <LineChart\n                  height={plotParams.height}\n                  data={heatTransferPlotData}\n                  margin={{\n                    top: 0,\n                    right: plotParams.margin.right,\n                    left: plotParams.margin.left,\n                    bottom: plotParams.margin.bottom,\n                  }}\n                >\n                  <CartesianGrid strokeDasharray=\"3 3\" />\n                  <XAxis\n                    dataKey=\"name\"\n                    label={{\n                      value: \"Time [seconds]\",\n                      position: \"middle\",\n                      dy: 20,\n                    }}\n                  />\n                  <YAxis\n                    label={{\n                      value: \"Heat Transfer [Watts]\",\n                      position: \"middle\",\n                      angle: -90,\n                      dx: -20,\n                    }}\n                  />\n                  <Tooltip />\n                  <Legend\n                    layout=\"horizontal\"\n                    verticalAlign=\"top\"\n                    align=\"center\"\n                    wrapperStyle={{\n                      paddingLeft: \"10px\",\n                    }}\n                    fontSize={5}\n                  />\n                  {res.connectionResults.map((connectionResult, idx) => {\n                    return (\n                      <Line\n                        key={connectionResult.connection.id}\n                        type={\"monotone\"}\n                        dataKey={`${connectionResult.connection.source.name} to ${connectionResult.connection.target.name}`}\n                        stroke={colors[idx]}\n                        activeDot={{ r: 8 }}\n                      />\n                    );\n                  })}\n                </LineChart>\n              </ResponsiveContainer>\n            </StyledCharts>\n          </>\n        ) : (\n          <StyledTitle>Welcome to hotstuff.network</StyledTitle>\n        )}\n        <StyledSubmit type=\"submit\" value=\"Go\" />\n        <FormShortTextInput\n          label={\"Timestep[sec]\"}\n          defaultVal={DEFAULT_TIMESTEP}\n          onChange={(event) => setTimeStepS(parseFloat(event.target.value))}\n        />\n        <FormShortTextInput\n          label={\"Run Time [sec]\"}\n          defaultVal={DEFAULT_TOTAL_TIME}\n          onChange={(event) => setTotalTimeS(parseFloat(event.target.value))}\n        />\n        <FormLongTextInput\n          label={\"Nodes\"}\n          defaultVal={DEFAULT_NODES}\n          onChange={(event) => setNodeText(event.target.value)}\n        />\n        <FormLongTextInput\n          label={\"Connections\"}\n          defaultVal={DEFAULT_CONNECTIONS}\n          onChange={(event) => setConnectionText(event.target.value)}\n        />\n      </StyledForm>\n      {/*<pre>{JSON.stringify(results, null, 2)}</pre>*/}\n    </div>\n  );\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./components/App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}