{"version":3,"sources":["config.ts","components/Sidebar/EditableTable/style.ts","components/Sidebar/EditableTable/TableHeader.tsx","components/Sidebar/EditableTable/cells/DropDownTableCell.tsx","components/Sidebar/style.ts","components/Sidebar/EditableInput.tsx","components/Sidebar/EditableStringInput.tsx","components/Sidebar/EditableTable/cells/TextTableCell.tsx","components/Sidebar/EditableNumberInput.tsx","components/Sidebar/EditableTable/cells/NumericalTableCell.tsx","components/Sidebar/EditableTable/cells/BooleanTableCell.tsx","components/Sidebar/EditableTable/TableCell.tsx","components/Sidebar/EditableTable/hooks/useSortableTable.ts","components/Sidebar/EditableTable/DeleteCell.tsx","components/Sidebar/EditableTable/NodeTable/NodeTable.tsx","components/Sidebar/EditableTable/ConnectionTable/ConnectionTable.tsx","components/Tabs/Tabs.tsx","utils/pointUtils.ts","default.ts","components/Sidebar/ModelControls.tsx","components/Sidebar/Sidebar.tsx","components/Plot/LinePlot.tsx","components/Plot/Plot.tsx","components/Canvas/canvasUtils.ts","components/Canvas/hooks/usePanZoomCanvas.ts","components/Canvas/Controls.tsx","components/Canvas/Canvas.tsx","components/Canvas/hooks/useOnClickCanvas.ts","utils/nodeConnectionUtils.ts","hooks/useAddConnection.ts","hooks/useMoveNode.ts","hooks/useMultiSelect.ts","hooks/useOnMouseDown.ts","App.tsx","hooks/useSessionStorageState.ts","hooks/useNodeConnectionUtils.ts","hooks/useKeyDown.ts","hooks/useDraw.ts","hooks/useDoubleClick.ts","components/Canvas/hooks/useWindowSize.ts","utils/scrollBar.ts","index.tsx"],"names":["config","defaultTempDegC","defaultCapJPerDegK","defaultPowerGenW","canvasHeightPerc","editorWidthPerc","defaultTotalTimeSeconds","defaultTimeStepSeconds","defaultNodeRadius","defaultResistanceDegKPerW","defaultConnectionKind","newNodeNamePrefix","zoomSensitivity","minZoom","maxZoom","minRadiusPx","maxRadiusPx","activeNodeOutlineWidthPx","tabHeightPx","plotHeightBufferPx","tableDeleteCellWidthPerc","tableDeleteCellMinWidthPx","plotMargin","left","right","top","bottom","StyledTableWrapper","styled","div","StyledTable","StyledTableBody","StyledAddButton","button","StyledRow","heightOffsetPx","isActive","StyledCell","width","minWidth","StyledDeleteCell","StyledHeaderWrapper","StyledColHeader","StyledColText","StyledSortIcon","TableHeader","props","columns","sortState","setSortState","sortIcon","direction","map","col","isSortedCol","key","onClick","sortDirection","minWidthPx","text","toString","style","cursor","StyledSelect","select","DropDownTableCell","value","setOption","id","onChange","event","newVal","target","selectedOption","options","find","option","undefined","onSelectOption","rowId","StyledInput","input","EditableInput","useState","initialValue","setValue","onBlur","getNewValue","handleOnBlur","useCallback","type","onKeyDown","EditableStringInput","TextTableCell","initialVal","getFloatVal","newValueText","newValueFloat","parseFloat","isNaN","EditableNumberInput","NumericalTableCell","StyledCheckbox","BooleanTableCell","initialIsActive","setIsActive","tabIndex","onKeyUp","showWhenActive","TableCell","row","initiallySetOption","onUpdateRow","length","useSortableTable","default","first","second","DeleteCell","onDeleteRow","defaultNodeSortState","nodeColumns","NodeTable","rows","onAddButton","sortByState","tableRows","sort","tableCell","defaultConnectionSortState","connectionTypes","filterConnectionOptions","colKey","selectedSourceId","selectedTargetId","connections","otherConnections","filter","conn","source","some","c","ConnectionTable","onSelectNewSource","connection","newSourceNode","nodes","node","sourceName","name","onSelectNewTarget","newTargetNode","targetName","onSelectNewConnectionType","rowToUpdate","kind","nodeOptions","connectionColumns","useMemo","activeNodeIds","includes","StyledTabsWrapper","StyledTabs","StyledTab","StyledTabText","StyledInnerContent","Tabs","activeIdx","setActiveIdx","tabs","tab","idx","className","topLeftRounded","_","component","ORIGIN","Object","freeze","x","y","diffPoints","p1","p2","scalePoint","scale","firstNode","makeNode","temperatureDegC","capacitanceJPerDegK","powerGenW","isBoundary","firstAppNode","center","textDirection","secondNode","secondAppNode","thirdNode","thirdAppNode","fourthNode","fourthAppNode","fifthNode","fifthAppNode","sixthNode","sixthAppNode","seventhNode","seventhAppNode","eighthNode","eighthAppNode","ninthNode","defaultNodes","defaultConnections","makeConnection","resistanceDegKPerW","defaultCanvasViewState","offset","defaultAppState","output","timing","timeStepS","totalTimeS","canvasViewState","savedCanvasState","StyledModelControlsWrapper","StyledButton","StyledImport","StyledTimeControls","StyledTimeControl","StyledInputWrapper","StyledLabel","label","ModelControls","onRunModel","setTiming","stagedAppState","setStagedAppState","newTotalTimeS","newTimeStepS","navigator","clipboard","writeText","JSON","stringify","appState","setAppState","parse","StyledEditor","height","StyledTables","Sidebar","nodeTable","appNodes","updateNodes","deleteNodes","onAddNode","connectionTable","appConnections","updateConnections","deleteConnections","onAddConnection","LinePlot","plotDimensions","plotData","lines","xAxisKey","xLabel","yLabel","ResponsiveContainer","LineChart","margin","data","CartesianGrid","strokeDasharray","XAxis","dataKey","position","dy","YAxis","angle","dx","Tooltip","Legend","layout","verticalAlign","align","wrapperStyle","paddingLeft","colors","StyledCharts","StyledPlot","plotShape","lowerMag","Math","floor","log10","divisibleBy","pow","includeAll","timeSeriesS","tempsAtAllTimes","heatTransfersAtAllTimes","forEach","t","val","abs","temp","time","ht","nodeResults","nodeResult","tempDegC","connectionResults","connectionResult","heatTransferW","push","Plot","res","modelOutput","emptyOutput","tempPlotData","heatTransferPlotData","heatTransferLines","Line","stroke","activeDot","r","isAnimationActive","tempLines","tempPlot","heatTransferPlot","DEFAULT_RADIUS","drawNode","context","radius","color","save","beginPath","arc","PI","fillStyle","fill","closePath","restore","drawCircle","lineWidth","strokeStyle","drawCircleOutline","translate","rotate","moveTo","lineTo","h","newRadius","sin","acos","drawHashPattern","font","textMetrics","measureText","fillText","actualBoundingBoxAscent","actualBoundingBoxDescent","drawNodeName","drawConnection","sourceCenter","sourceRadius","targetCenter","targetRadius","start","end","startOffset","endOffset","headLength","headWidth","arrowGap","atan2","adjLength","sqrt","drawBidirectionalArrow","drawUnidirectionalArrow","intersectsCircle","point","circleCenter","deltaX","deltaY","calculateCanvasMouse","canvas","viewportMousePos","pageX","pageY","boundingRect","getBoundingClientRect","mouseToNodeCoords","canvasState","canvasMouse","mouse","determineRadius","capacitance","allCapacitances","min","max","StyledButtons","Controls","setCanvasViewState","setSavedCanvasState","StyledCanvasWrapper","StyledCanvas","cssWidth","cssHeight","Canvas","ref","onClickCanvas","canvasWidth","canvasHeight","devicePixelRatio","draw","onMouseDown","handleDoubleClick","savedCanvasViewState","setSavedCanvasViewState","setKeyboardActive","canvasRef","useRef","useEffect","handleClickOutside","keyBoardActive","current","contains","document","addEventListener","removeEventListener","setContext","mousePosRef","lastMousePosRef","lastCanvasViewState","mouseMove","newMousePos","mouseDiff","newCanvasViewState","mouseUp","startPan","useLayoutEffect","handleWheel","preventDefault","zoom","newScale","mouseOffset","canvasElem","usePanZoomCanvas","renderCtx","getContext","onDoubleClick","getNewAppNode","numNodesWithDefaultPrefix","startsWith","newNode","useAddConnection","addConnection","clearAndRedraw","drawConnectionBeingMade","clickedNode","nodeCoordsOfMouse","drawArrowWithoutHead","drawConnWrapper","mouseUpOnNode","nodeRadius","newConnection","getNewAppNodes","clickedMouseEvent","currentMouseEvent","shiftKeyPressed","activeNodes","offsetMouseToCenter","newClickedCenter","newClickedNode","newActiveNodes","distanceFromClickedCenter","useMultiSelect","setActiveNodes","boxStart","drawBox","globalAlpha","fillRect","rect","boxEnd","startBox","endBox","topLeft","bottomRight","bottomLeft","topRight","isInsideBox","useOnMouseDown","clearActiveNodes","makeNewConnection","moveNode","movedRef","mouseDownEvent","shiftKey","newNodes","mouseUpEvent","useMoveNode","multiSelect","defaultBehavior","altKey","onMouseUp","clientX","clientY","StyledApp","StyledWorkspace","App","defaultValue","React","localState","window","sessionStorage","getItem","setItem","useSessionStorageState","setAppNodes","prevState","setAppConnections","newConnections","setCanvasState","newCanvasState","newSavedCanvasState","newTiming","setModelOutput","newModelOutput","addNode","nodesToUpdate","prevConn","nodeToUpdate","nodeIds","connsToUpdate","connIdsToUpdate","oldConns","connIds","useNodeConnectionUtils","keyboardActive","metaKey","keyCode","useKeyDown","nodeColor","sourceAppNode","targetAppNode","clearRect","useDraw","doubleClickedNode","newAppNode","useDoubleClick","size","setSize","ratio","setRatio","updateSize","innerWidth","innerHeight","updateRatio","useWindowSize","windowWidth","windowHeight","workspaceWidth","workspaceHeight","plotHeight","plotWidth","editorWidth","plot","addNodeInCenterOfCanvas","topLeftPoint","getCanvasCenter","createNewLogicalConnection","console","log","found","getNewAppConnection","conns","run","errors","error","message","scrollableElem","createElement","innerElem","overflow","borderWidth","appendChild","body","diff","offsetWidth","clientWidth","removeChild","areScrollbarsVisible","classList","add","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.35286476.chunk.js","sourcesContent":["import { HSConnection } from \"hotstuff-network\";\n\nconst config = {\n  defaultTempDegC: 23,\n  defaultCapJPerDegK: 10,\n  defaultPowerGenW: 0,\n  canvasHeightPerc: 0.7,\n  editorWidthPerc: 0.3,\n  defaultTotalTimeSeconds: 60,\n  defaultTimeStepSeconds: 0.1,\n  defaultNodeRadius: 20,\n  defaultResistanceDegKPerW: 10,\n  defaultConnectionKind: \"bi\" as HSConnection[\"kind\"],\n  newNodeNamePrefix: \"New Node\",\n  zoomSensitivity: 1000, // bigger = less zoom per click\n  minZoom: 0.25,\n  maxZoom: 5,\n  minRadiusPx: 20,\n  maxRadiusPx: 40,\n  activeNodeOutlineWidthPx: 5,\n  tabHeightPx: 25,\n  plotHeightBufferPx: 10,\n  tableDeleteCellWidthPerc: 0.1,\n  tableDeleteCellMinWidthPx: 40,\n  plotMargin: {\n    left: 10,\n    right: 20,\n    top: 20,\n    bottom: 20,\n  },\n};\n\nexport default config;\n","import styled from \"styled-components/macro\";\n\nexport const StyledTableWrapper = styled.div`\n  width: 100%;\n`;\n\nexport const StyledTable = styled.div`\n  width: 100%;\n  border-collapse: collapse;\n`;\n\nexport const StyledTableBody = styled.div`\n  width: 100%;\n`;\n\nexport const StyledAddButton = styled.button``;\n\nexport const StyledRow = styled.div<{\n  heightOffsetPx?: number;\n  isActive: boolean;\n}>`\n  display: inline-flex;\n  align-items: center;\n  min-width: 100%;\n  position: sticky;\n  top: ${({ heightOffsetPx }) =>\n    heightOffsetPx ? `${heightOffsetPx}px` : \"0px\"};\n  background: ${({ isActive }) =>\n    isActive ? \"rgba(112, 165, 255, 0.2)\" : \"none\"};\n`;\n\nexport const StyledCell = styled.div<{ width: number; minWidth?: number }>`\n  display: inline-flex;\n  justify-content: center;\n  align-items: center;\n  border: 1px solid #ddd;\n  height: 2em;\n  width: ${({ width }) => `${width * 100}%`};\n  min-width: ${({ minWidth }) => (!!minWidth ? `${minWidth}px` : \"none\")};\n`;\n\nexport const StyledDeleteCell = styled(StyledCell)`\n  cursor: pointer;\n  user-select: none;\n  min-width: 40px;\n\n  &:hover {\n    background: black;\n  }\n`;\n\nexport const StyledHeaderWrapper = styled.div<{ heightOffsetPx?: number }>`\n  display: flex;\n  width: 100%;\n  height: 100%;\n  position: sticky;\n  top: ${({ heightOffsetPx }) =>\n    heightOffsetPx ? `${heightOffsetPx}px` : \"0px\"};\n  z-index: 1;\n`;\n\nexport const StyledColHeader = styled.div<{ width: number; minWidth?: number }>`\n  display: inline-flex;\n  width: ${({ width }) => `${width * 100}%`};\n  min-width: ${({ minWidth }) => (!!minWidth ? `${minWidth}px` : \"none\")};\n  justify-content: center;\n  align-items: center;\n  font-weight: bold;\n  border: 1px solid lightgrey;\n  cursor: pointer;\n  user-select: none;\n  position: relative;\n  background: white;\n  border-bottom: 1px solid black;\n`;\n\nexport const StyledColText = styled.div`\n  font-size: 0.8em;\n  padding: 1em;\n`;\n\nexport const StyledSortIcon = styled.div`\n  position: absolute;\n  bottom: 0;\n  right: 50%;\n  transform: translate(50%);\n`;\n","import config from \"../../../config\";\nimport {\n  StyledColHeader,\n  StyledColText,\n  StyledHeaderWrapper,\n  StyledSortIcon,\n} from \"./style\";\nimport * as React from \"react\";\nimport { SortDirection, TableColumn, TableSortState } from \"./types\";\n\ntype TableHeaderProps<T> = {\n  columns: TableColumn<T>[];\n  sortState: TableSortState<T>;\n  setSortState: React.Dispatch<React.SetStateAction<TableSortState<T>>>;\n};\n\nfunction oppositeSortDirection(sortDirection: SortDirection): SortDirection {\n  return sortDirection === \"ASC\" ? \"DESC\" : \"ASC\";\n}\n\nexport default function TableHeader<T>(\n  props: TableHeaderProps<T>\n): React.ReactElement {\n  const { columns, sortState, setSortState } = props;\n\n  const sortIcon = !sortState\n    ? \"\"\n    : sortState.direction === \"ASC\"\n    ? \"\\u25B2\"\n    : \"\\u25BC\";\n\n  return (\n    <StyledHeaderWrapper heightOffsetPx={config.tabHeightPx}>\n      {columns.map((col) => {\n        const isSortedCol = sortState && sortState.key === col.key;\n        const onClick = () => {\n          setSortState({\n            key: col.key,\n            direction:\n              !isSortedCol || !sortState\n                ? \"ASC\"\n                : oppositeSortDirection(sortState.direction),\n          });\n        };\n\n        return (\n          <StyledColHeader\n            key={col.key.toString()}\n            onClick={onClick}\n            width={col.width}\n            minWidth={col.minWidthPx}\n          >\n            <StyledColText>{col.text}</StyledColText>\n            <StyledSortIcon>{isSortedCol ? sortIcon : \"\"}</StyledSortIcon>\n          </StyledColHeader>\n        );\n      })}\n      <StyledColHeader\n        width={config.tableDeleteCellWidthPerc}\n        minWidth={config.tableDeleteCellMinWidthPx}\n        style={{ cursor: \"unset\" }}\n      />\n    </StyledHeaderWrapper>\n  );\n}\n","import * as React from \"react\";\nimport styled from \"styled-components/macro\";\nimport { CellOption } from \"../types\";\n\nconst StyledSelect = styled.select`\n  display: inline-flex;\n  width: 100%;\n  height: 100%;\n  background: unset;\n`;\n\nexport type DropDownTableCellProps = {\n  rowId: string;\n  options: CellOption[];\n  setOption?: CellOption;\n  onSelectOption: (id: string, option: CellOption) => void;\n  optionsFilter?: (option: CellOption) => CellOption[];\n};\n\nexport default function DropDownTableCell(\n  props: DropDownTableCellProps\n): React.ReactElement {\n  function handleChange(event: React.ChangeEvent<HTMLSelectElement>) {\n    const newVal = event.target.value;\n\n    const selectedOption = props.options.find((option) => option.id === newVal);\n\n    if (selectedOption !== undefined) {\n      props.onSelectOption(props.rowId, selectedOption);\n    }\n  }\n\n  return (\n    <StyledSelect value={props.setOption?.id} onChange={handleChange}>\n      {props.options.map((option) => (\n        <option key={option.id} value={option.id}>\n          {option.text}\n        </option>\n      ))}\n    </StyledSelect>\n  );\n}\n","import styled from \"styled-components/macro\";\n\nexport const StyledInput = styled.input`\n  display: inline-block;\n  border: none;\n  width: 100%;\n  height: 100%;\n  text-align: center;\n  padding: 0;\n  background: unset;\n\n  &::-webkit-inner-spin-button,\n  &::-webkit-outer-spin-button {\n    -webkit-appearance: none;\n    margin: 0;\n  }\n`;\n","import React, { useCallback, useState } from \"react\";\nimport { StyledInput } from \"./style\";\n\ninterface CanBeMadeString {\n  toString: () => string;\n}\n\ntype EditableInputProps<T> = {\n  initialValue: T;\n  onBlur: (value: T) => void;\n  getNewValue: (event: React.ChangeEvent<HTMLInputElement>) => T | undefined;\n};\n\nexport default function EditableInput<T extends CanBeMadeString>(\n  props: EditableInputProps<T>\n): React.ReactElement {\n  const [value, setValue] = useState<string>(props.initialValue.toString());\n\n  const { initialValue, onBlur, getNewValue } = props;\n\n  function handleOnChange(event: React.ChangeEvent<HTMLInputElement>) {\n    const newVal = event.target.value;\n    if (newVal !== undefined) {\n      setValue(newVal);\n    }\n  }\n\n  const handleOnBlur = useCallback(\n    (event: React.ChangeEvent<HTMLInputElement>) => {\n      const newVal = getNewValue(event);\n      if (event.target.value === initialValue.toString()) {\n        return;\n      } else if (newVal !== undefined) {\n        setValue(newVal.toString());\n        onBlur(newVal);\n      } else {\n        setValue(initialValue.toString());\n        onBlur(initialValue);\n      }\n    },\n    [getNewValue, initialValue, onBlur]\n  );\n\n  return (\n    <StyledInput\n      type=\"text\"\n      value={value}\n      onChange={handleOnChange}\n      onBlur={handleOnBlur}\n      // TODO LEO\n      onKeyDown={(event: React.KeyboardEvent) => {\n        if (event.key === \"Escape\") {\n        } else if (event.key === \"Enter\") {\n        }\n      }}\n    />\n  );\n}\n","import React from \"react\";\nimport EditableInput from \"./EditableInput\";\n\ntype EditableStringInputProps = {\n  initialValue: string;\n  onBlur: (value: string) => void;\n};\n\nexport default function EditableStringInput(\n  props: EditableStringInputProps\n): React.ReactElement {\n  return (\n    <EditableInput<string>\n      initialValue={props.initialValue}\n      onBlur={props.onBlur}\n      getNewValue={(event: React.ChangeEvent<HTMLInputElement>) =>\n        event.target.value\n      }\n    />\n  );\n}\n","import React from \"react\";\nimport EditableStringInput from \"../../EditableStringInput\";\n\nexport type TextTableCellProps = {\n  initialVal: string;\n  onBlur: (newValue: string) => void;\n};\n\nexport default function TextTableCell(\n  props: TextTableCellProps\n): React.ReactElement {\n  return (\n    <EditableStringInput\n      initialValue={props.initialVal}\n      onBlur={props.onBlur}\n    />\n  );\n}\n","import React from \"react\";\nimport EditableInput from \"./EditableInput\";\n\nfunction getFloatVal(\n  event: React.ChangeEvent<HTMLInputElement>\n): number | undefined {\n  const newValueText = event.target.value;\n  // things like 123.3abc will still parse as 123.3\n  const newValueFloat = parseFloat(event.target.value);\n  if (newValueText === undefined || isNaN(newValueFloat)) {\n    return undefined;\n  }\n  return newValueFloat;\n}\n\ntype EditableNumberInputProps = {\n  initialValue: number;\n  onBlur: (value: number) => void;\n};\n\nexport default function EditableNumberInput(\n  props: EditableNumberInputProps\n): React.ReactElement {\n  return (\n    <EditableInput<number>\n      initialValue={props.initialValue}\n      onBlur={props.onBlur}\n      getNewValue={getFloatVal}\n    />\n  );\n}\n","import React from \"react\";\nimport EditableNumberInput from \"../../EditableNumberInput\";\n\nexport type NumericalTableCellProps = {\n  initialVal: number;\n  onBlur: (newValue: number) => void;\n};\n\nexport default function NumericalTableCell(\n  props: NumericalTableCellProps\n): React.ReactElement {\n  return (\n    <EditableNumberInput\n      initialValue={props.initialVal}\n      onBlur={props.onBlur}\n    />\n  );\n}\n","import React, { useState } from \"react\";\nimport styled from \"styled-components/macro\";\n\nconst StyledCheckbox = styled.div`\n  display: inline-flex;\n  width: 100%;\n  height: 100%;\n  justify-content: center;\n  align-items: center;\n  cursor: pointer;\n  user-select: none;\n`;\n\nexport type BooleanTableCellProps = {\n  initialIsActive?: boolean;\n  onClick: (isActive: boolean) => void;\n  showWhenActive: string;\n};\n\nexport default function BooleanTableCell(\n  props: BooleanTableCellProps\n): React.ReactElement {\n  const [isActive, setIsActive] = useState<boolean>(\n    props.initialIsActive !== undefined ? props.initialIsActive : false\n  );\n\n  return (\n    <StyledCheckbox\n      tabIndex={0}\n      onKeyUp={(event: React.KeyboardEvent) => {\n        if (event.key === \"Enter\") {\n          setIsActive(!isActive);\n          props.onClick(!isActive);\n        }\n      }}\n      onClick={() => {\n        setIsActive(!isActive);\n        props.onClick(!isActive);\n      }}\n    >\n      &nbsp;{isActive ? props.showWhenActive : \"\"}\n    </StyledCheckbox>\n  );\n}\n","import * as React from \"react\";\nimport DropDownTableCell from \"./cells/DropDownTableCell\";\nimport TextTableCell from \"./cells/TextTableCell\";\nimport NumericalTableCell from \"./cells/NumericalTableCell\";\nimport BooleanTableCell from \"./cells/BooleanTableCell\";\nimport { CellOption, TableColumn } from \"./types\";\n\ntype TableCellType = {\n  id: string;\n};\n\ntype TableCellProps<T extends TableCellType> = {\n  row: T;\n  col: TableColumn<T>;\n  options?: CellOption[];\n  initiallySetOption?: CellOption;\n  onUpdateRow: (row: T) => void;\n};\n\nexport default function TableCell<T extends TableCellType>(\n  props: TableCellProps<T>\n): React.ReactElement {\n  const { row, col, options, initiallySetOption, onUpdateRow } = props;\n  const initialVal = row[col.key];\n\n  if (!!options && options.length > 0 && col.onSelectOption) {\n    return (\n      <DropDownTableCell\n        rowId={row.id}\n        options={options}\n        setOption={initiallySetOption}\n        onSelectOption={col.onSelectOption}\n      />\n    );\n  } else if (typeof initialVal === \"string\") {\n    return (\n      <TextTableCell\n        initialVal={initialVal}\n        onBlur={(newVal) => onUpdateRow({ ...row, [col.key]: newVal })}\n      />\n    );\n  } else if (\n    typeof initialVal === \"number\" &&\n    typeof row[col.key] === \"number\"\n  ) {\n    return (\n      <NumericalTableCell\n        initialVal={initialVal}\n        onBlur={(newVal) => onUpdateRow({ ...row, [col.key]: newVal })}\n      />\n    );\n  } else if (typeof initialVal === \"boolean\") {\n    return (\n      <BooleanTableCell\n        initialIsActive={initialVal}\n        onClick={(newVal) => onUpdateRow({ ...row, [col.key]: newVal })}\n        showWhenActive={\"✅\"}\n      />\n    );\n  } else {\n    return <></>;\n  }\n}\n","import { useState } from \"react\";\nimport { TableSortState } from \"../types\";\n\nexport default function useSortableTable<T>(props: {\n  default: TableSortState<T>;\n}): [\n  TableSortState<T>,\n  React.Dispatch<React.SetStateAction<TableSortState<T>>>,\n  (first: T, second: T) => number\n] {\n  const [sortState, setSortState] = useState<TableSortState<T>>(props.default);\n\n  function sortByState(first: T, second: T): number {\n    if (first[sortState.key] > second[sortState.key]) {\n      return sortState.direction === \"ASC\" ? 1 : -1;\n    } else {\n      return sortState.direction === \"ASC\" ? -1 : 1;\n    }\n  }\n\n  return [sortState, setSortState, sortByState];\n}\n","import React from \"react\";\nimport config from \"../../../config\";\nimport { StyledDeleteCell } from \"./style\";\n\ntype DeleteCellProps<T> = {\n  row: T;\n  onDeleteRow: (row: T) => void;\n};\n\nexport default function DeleteCell<T>(props: DeleteCellProps<T>) {\n  return (\n    <StyledDeleteCell\n      tabIndex={0}\n      onKeyUp={(event: React.KeyboardEvent) => {\n        if (event.key === \"Enter\") {\n          props.onDeleteRow(props.row);\n        }\n      }}\n      width={config.tableDeleteCellWidthPerc}\n      minWidth={config.tableDeleteCellMinWidthPx}\n      onClick={() => props.onDeleteRow(props.row)}\n    >\n      ❌\n    </StyledDeleteCell>\n  );\n}\n","import React from \"react\";\nimport config from \"../../../../config\";\nimport { AppNode } from \"../../../../App\";\nimport {\n  StyledCell,\n  StyledRow,\n  StyledTable,\n  StyledTableBody,\n  StyledTableWrapper,\n  StyledAddButton,\n} from \"../style\";\nimport { TableColumn, TableSortState } from \"../types\";\nimport TableHeader from \"../TableHeader\";\nimport TableCell from \"../TableCell\";\nimport useSortableTable from \"../hooks/useSortableTable\";\nimport DeleteCell from \"../DeleteCell\";\n\ntype NodeTableColumn = TableColumn<AppNode>;\n\nconst defaultNodeSortState: TableSortState<AppNode> = {\n  key: \"name\",\n  direction: \"ASC\",\n};\n\nconst nodeColumns: NodeTableColumn[] = [\n  {\n    key: \"name\",\n    text: \"Name\",\n    width: 0.2,\n    minWidthPx: 100,\n  },\n  {\n    key: \"temperatureDegC\",\n    text: \"Temp degC\",\n    width: 0.2,\n    minWidthPx: 100,\n  },\n  {\n    key: \"capacitanceJPerDegK\",\n    text: \"Capacitance J/degK\",\n    width: 0.2,\n    minWidthPx: 100,\n  },\n  {\n    key: \"powerGenW\",\n    text: \"Power Gen W\",\n    width: 0.15,\n    minWidthPx: 80,\n  },\n  {\n    key: \"isBoundary\",\n    text: \"Boundary?\",\n    width: 0.15,\n    minWidthPx: 80,\n  },\n];\n\ntype NodeTableProps = {\n  rows: AppNode[];\n  onUpdateRow: (row: AppNode) => void;\n  onDeleteRow: (row: AppNode) => void;\n  onAddButton: () => void;\n};\n\nexport default function NodeTable(props: NodeTableProps): React.ReactElement {\n  const { rows, onUpdateRow, onDeleteRow, onAddButton } = props;\n\n  const [sortState, setSortState, sortByState] = useSortableTable<AppNode>({\n    default: defaultNodeSortState,\n  });\n\n  const sortedRows = rows.sort(sortByState);\n\n  const tableRows = sortedRows.map((row) => {\n    return (\n      <StyledRow\n        key={row.id}\n        heightOffsetPx={config.tabHeightPx}\n        isActive={row.isActive}\n      >\n        {nodeColumns.map((col) => {\n          const tableCell = (\n            <TableCell<AppNode> row={row} col={col} onUpdateRow={onUpdateRow} />\n          );\n          return (\n            <StyledCell\n              key={col.key}\n              width={col.width}\n              minWidth={col.minWidthPx}\n            >\n              {tableCell}\n            </StyledCell>\n          );\n        })}\n        <DeleteCell row={row} onDeleteRow={() => onDeleteRow(row)} />\n      </StyledRow>\n    );\n  });\n\n  return (\n    <StyledTableWrapper>\n      <StyledTable>\n        <TableHeader<AppNode>\n          columns={nodeColumns}\n          sortState={sortState}\n          setSortState={setSortState}\n        />\n        <StyledTableBody>{tableRows}</StyledTableBody>\n        <StyledAddButton onClick={onAddButton}>+</StyledAddButton>\n      </StyledTable>\n    </StyledTableWrapper>\n  );\n}\n","import React, { useCallback, useMemo } from \"react\";\nimport config from \"../../../../config\";\nimport { AppConnection, AppNode } from \"../../../../App\";\nimport {\n  StyledAddButton,\n  StyledCell,\n  StyledDeleteCell,\n  StyledRow,\n  StyledTable,\n  StyledTableBody,\n  StyledTableWrapper,\n} from \"../style\";\nimport { CellOption, TableColumn, TableSortState } from \"../types\";\nimport TableHeader from \"../TableHeader\";\nimport TableCell from \"../TableCell\";\nimport useSortableTable from \"../hooks/useSortableTable\";\nimport { ConnectionKind } from \"../../../types\";\nimport DeleteCell from \"../DeleteCell\";\n\nexport type AppConnectionTable = AppConnection & { isActive: boolean };\ntype ConnectionTableColumn = TableColumn<AppConnection>;\n\nconst defaultConnectionSortState: TableSortState<AppConnectionTable> = {\n  key: \"sourceName\",\n  direction: \"ASC\",\n};\n\nconst connectionTypes: CellOption[] = [\n  {\n    id: \"bi\",\n    text: \"Bidirectional\",\n  },\n  {\n    id: \"uni\",\n    text: \"Unidirectional\",\n  },\n  {\n    id: \"rad\",\n    text: \"Radiative\",\n  },\n];\n\nfunction filterConnectionOptions(\n  colKey: string,\n  options: CellOption[],\n  selectedSourceId: string,\n  selectedTargetId: string,\n  connections: AppConnection[]\n): CellOption[] {\n  const otherConnections = connections.filter(\n    (conn) =>\n      !(\n        conn.source.id === selectedSourceId &&\n        conn.target.id === selectedTargetId\n      )\n  );\n\n  if (colKey === \"sourceName\") {\n    // options for source node\n    const noSelfConnectionOptions = options.filter(\n      (option) => option.id !== selectedTargetId\n    );\n    // for each source option, there is no other connection that already matches the source -> target or target -> source\n    return noSelfConnectionOptions.filter((option) => {\n      return !otherConnections.some(\n        (c) =>\n          (c.source.id === option.id && c.target.id === selectedTargetId) ||\n          (c.source.id === selectedTargetId && c.target.id === option.id)\n      );\n    });\n  } else if (colKey === \"targetName\") {\n    // options for target node\n    const noSelfConnectionOptions = options.filter(\n      (option) => option.id !== selectedSourceId\n    );\n    // for each target option, there is no other connection that already matches the source -> target or target -> source\n    return noSelfConnectionOptions.filter((option) => {\n      return !otherConnections.some(\n        (c) =>\n          (c.source.id === selectedSourceId && c.target.id === option.id) ||\n          (c.source.id === option.id && c.target.id === selectedSourceId)\n      );\n    });\n  } else {\n    return options;\n  }\n}\n\ntype ConnectionTableProps = {\n  rows: AppConnection[];\n  nodes: AppNode[];\n  onUpdateRow: (row: AppConnection) => void;\n  onDeleteRow: (row: AppConnection) => void;\n  onAddButton: () => void;\n};\n\nexport default function ConnectionTable(\n  props: ConnectionTableProps\n): React.ReactElement {\n  const [sortState, setSortState, sortByState] =\n    useSortableTable<AppConnectionTable>({\n      default: defaultConnectionSortState,\n    });\n\n  const onSelectNewSource = useCallback(\n    (id: string, option: CellOption) => {\n      const connection = props.rows.find((conn) => conn.id === id);\n      const newSourceNode = props.nodes.find((node) => node.id === option.id);\n      if (\n        !connection ||\n        !newSourceNode ||\n        newSourceNode.id === connection.target.id\n      ) {\n        return;\n      }\n      props.onUpdateRow({\n        ...connection,\n        source: newSourceNode,\n        sourceName: newSourceNode.name,\n      });\n    },\n    [props]\n  );\n\n  const onSelectNewTarget = useCallback(\n    (id: string, option: CellOption) => {\n      const connection = props.rows.find((conn) => conn.id === id);\n      const newTargetNode = props.nodes.find((node) => node.id === option.id);\n      if (\n        !connection ||\n        !newTargetNode ||\n        newTargetNode.id === connection.source.id\n      ) {\n        return;\n      }\n      props.onUpdateRow({\n        ...connection,\n        target: newTargetNode,\n        targetName: newTargetNode.name,\n      });\n    },\n    [props]\n  );\n\n  const onSelectNewConnectionType = useCallback(\n    (id: string, option: CellOption) => {\n      const rowToUpdate = props.rows.find((conn) => conn.id === id);\n      if (rowToUpdate) {\n        props.onUpdateRow({\n          ...rowToUpdate,\n          kind: option.id as ConnectionKind,\n        });\n      }\n    },\n    [props]\n  );\n\n  const nodeOptions: CellOption[] = props.nodes.map((node) => ({\n    id: node.id,\n    text: node.name,\n  }));\n\n  const connectionColumns: ConnectionTableColumn[] = useMemo(\n    () => [\n      {\n        text: \"Source\",\n        key: \"sourceName\",\n        width: 0.25,\n        minWidthPx: 100,\n        options: nodeOptions,\n        onSelectOption: onSelectNewSource,\n      },\n      {\n        text: \"Target\",\n        key: \"targetName\",\n        width: 0.25,\n        minWidthPx: 100,\n        options: nodeOptions,\n        onSelectOption: onSelectNewTarget,\n      },\n      {\n        text: \"Resistance degK/W\",\n        key: \"resistanceDegKPerW\",\n        width: 0.25,\n        minWidthPx: 100,\n      },\n      {\n        text: \"Kind\",\n        key: \"kind\",\n        width: 0.25,\n        minWidthPx: 100,\n        options: connectionTypes,\n        onSelectOption: onSelectNewConnectionType,\n      },\n    ],\n    [\n      nodeOptions,\n      onSelectNewConnectionType,\n      onSelectNewSource,\n      onSelectNewTarget,\n    ]\n  );\n\n  const activeNodeIds = props.nodes\n    .filter((node) => node.isActive)\n    .map((node) => node.id);\n\n  const sortedRowsWithIsActive: AppConnectionTable[] = props.rows\n    .map((row) => {\n      return {\n        ...row,\n        isActive:\n          activeNodeIds.includes(row.source.id) ||\n          activeNodeIds.includes(row.target.id),\n      };\n    })\n    .sort(sortByState);\n\n  const tableRows = sortedRowsWithIsActive.map((row) => {\n    return (\n      <StyledRow\n        key={row.id}\n        heightOffsetPx={config.tabHeightPx}\n        isActive={row.isActive}\n      >\n        {connectionColumns.map((col) => {\n          const setOption = col.options?.find(\n            (option) =>\n              option.id === row[col.key] || option.text === row[col.key]\n          );\n\n          const tableCell =\n            !!col.options && !!setOption ? (\n              <TableCell<AppConnectionTable>\n                row={row}\n                col={col}\n                options={[\n                  setOption,\n                  ...filterConnectionOptions(\n                    col.key,\n                    col.options || [],\n                    row.source.id,\n                    row.target.id,\n                    props.rows\n                  ),\n                ]}\n                initiallySetOption={setOption}\n                onUpdateRow={props.onUpdateRow}\n              />\n            ) : (\n              <TableCell<AppConnectionTable>\n                row={row}\n                col={col}\n                onUpdateRow={props.onUpdateRow}\n              />\n            );\n\n          return (\n            <StyledCell\n              key={col.key}\n              width={col.width}\n              minWidth={col.minWidthPx}\n            >\n              {tableCell}\n            </StyledCell>\n          );\n        })}\n        <DeleteCell row={row} onDeleteRow={() => props.onDeleteRow(row)} />\n      </StyledRow>\n    );\n  });\n\n  return (\n    <StyledTableWrapper>\n      <StyledTable>\n        <TableHeader<AppConnectionTable>\n          columns={connectionColumns}\n          sortState={sortState}\n          setSortState={setSortState}\n        />\n        <StyledTableBody>{tableRows}</StyledTableBody>\n        <StyledAddButton onClick={props.onAddButton}>+</StyledAddButton>\n      </StyledTable>\n    </StyledTableWrapper>\n  );\n}\n","import React, { useState } from \"react\";\nimport styled from \"styled-components/macro\";\nimport config from \"../../config\";\n\nconst StyledTabsWrapper = styled.div`\n  display: inline-flex;\n  width: 100%;\n  flex-direction: column;\n  overflow: auto;\n  position: relative;\n`;\n\nconst StyledTabs = styled.div`\n  display: inline-flex;\n  width: 100%;\n  height: ${config.tabHeightPx}px;\n  justify-content: space-evenly;\n  position: sticky;\n  top: 0;\n  background: white;\n  box-sizing: border-box;\n  z-index: 1;\n`;\n\nconst StyledTab = styled.div<{ width: number }>`\n  display: inline-flex;\n  width: ${({ width }) => `${width * 100}%`};\n  cursor: pointer;\n  text-decoration: none;\n  align-items: center;\n  //background: lightgray;\n  //background: rgb(85, 9, 121);\n  background: linear-gradient(\n    90deg,\n    rgba(46, 228, 233, 1) 0%,\n    rgba(46, 228, 233, 1) 40%,\n    rgba(255, 0, 230, 1) 80%,\n    rgba(85, 9, 121, 1) 100%\n  );\n  border-radius: 5px 5px 0 0;\n  border: 1px solid black;\n  border-bottom: 2px solid black;\n\n  &:hover,\n  &:focus {\n    opacity: 0.7;\n  }\n`;\n\nconst StyledTabText = styled.div`\n  font-size: 1.1em;\n  padding: 0.2em 0.5em;\n\n  &.active {\n    font-weight: bold;\n  }\n`;\n\nconst StyledInnerContent = styled.div<{ topLeftRounded: boolean }>`\n  background: white;\n  position: relative;\n`;\n\ntype Tab = {\n  text: string;\n  component: React.ReactElement;\n  width: number; // between 0 and 1\n};\n\nexport type TabsProps = {\n  tabs: Tab[];\n};\n\nexport default function Tabs(props: TabsProps): React.ReactElement {\n  const [activeIdx, setActiveIdx] = useState(0);\n\n  return (\n    <StyledTabsWrapper>\n      {props.tabs.length > 1 && (\n        <StyledTabs>\n          {props.tabs.map((tab, idx) => {\n            return (\n              <StyledTab\n                key={tab.text}\n                tabIndex={0}\n                onClick={() => setActiveIdx(idx)}\n                onKeyUp={(event: React.KeyboardEvent) => {\n                  if (event.key === \"Enter\") {\n                    setActiveIdx(idx);\n                  }\n                }}\n                width={tab.width}\n              >\n                <StyledTabText className={idx === activeIdx ? \"active\" : \"\"}>\n                  {tab.text}\n                </StyledTabText>\n              </StyledTab>\n            );\n          })}\n        </StyledTabs>\n      )}\n\n      <StyledInnerContent topLeftRounded={props.tabs.length <= 1}>\n        {props.tabs.filter((_, idx) => idx === activeIdx)[0].component}\n      </StyledInnerContent>\n    </StyledTabsWrapper>\n  );\n}\n","export type Point = {\n  x: number;\n  y: number;\n};\n\nexport const ORIGIN = Object.freeze({ x: 0, y: 0 });\n\nexport function makePoint(x: number, y: number): Point {\n  return { x, y };\n}\n\nexport function addPoints(p1: Point, p2: Point): Point {\n  return { x: p1.x + p2.x, y: p1.y + p2.y };\n}\n\nexport function diffPoints(p1: Point, p2: Point): Point {\n  return { x: p1.x - p2.x, y: p1.y - p2.y };\n}\n\nexport function scalePoint(p1: Point, scale: number): Point {\n  return { x: p1.x / scale, y: p1.y / scale };\n}\n\n// export function distanceBetweenPoints(p1: Point, p2: Point): number {\n//   return Math.sqrt(Math.pow(p2.x - p1.x, 2) + Math.pow(p2.y - p1.y, 2));\n// }\n","import { makeConnection, makeNode } from \"hotstuff-network\";\nimport { AppConnection, AppNode } from \"./App\";\nimport config from \"./config\";\nimport { ORIGIN } from \"./utils/pointUtils\";\n\nconst firstNode = makeNode({\n  name: \"1: Click to select\",\n  temperatureDegC: 85,\n  capacitanceJPerDegK: 10,\n  powerGenW: 0,\n  isBoundary: false,\n});\nconst firstAppNode: AppNode = {\n  ...firstNode,\n  center: { x: 100, y: 100 },\n  isActive: false,\n  textDirection: \"D\",\n};\n\nconst secondNode = makeNode({\n  name: \"2: Shift-click to toggle selection\",\n  temperatureDegC: 85,\n  capacitanceJPerDegK: 10,\n  powerGenW: 0,\n  isBoundary: false,\n});\nconst secondAppNode: AppNode = {\n  ...secondNode,\n  center: { x: 300, y: 150 },\n  isActive: true,\n  textDirection: \"D\",\n};\n\nconst thirdNode = makeNode({\n  name: \"3: Click+drag to move\",\n  temperatureDegC: 85,\n  capacitanceJPerDegK: 10,\n  powerGenW: 0,\n  isBoundary: false,\n});\nconst thirdAppNode: AppNode = {\n  ...thirdNode,\n  center: { x: 500, y: 100 },\n  isActive: false,\n  textDirection: \"D\",\n};\n\nconst fourthNode = makeNode({\n  name: \"4: Double click space to create node\",\n  temperatureDegC: 85,\n  capacitanceJPerDegK: 10,\n  powerGenW: 0,\n  isBoundary: false,\n});\nconst fourthAppNode: AppNode = {\n  ...fourthNode,\n  center: { x: 700, y: 150 },\n  isActive: false,\n  textDirection: \"U\",\n};\n\nconst fifthNode = makeNode({\n  name: \"5: Alt+click+drag+release to connect\",\n  temperatureDegC: 85,\n  capacitanceJPerDegK: 10,\n  powerGenW: 0,\n  isBoundary: false,\n});\nconst fifthAppNode: AppNode = {\n  ...fifthNode,\n  center: { x: 200, y: 300 },\n  isActive: false,\n  textDirection: \"D\",\n};\n\nconst sixthNode = makeNode({\n  name: \"6: Delete to remove selected\",\n  temperatureDegC: 85,\n  capacitanceJPerDegK: 10,\n  powerGenW: 0,\n  isBoundary: false,\n});\nconst sixthAppNode: AppNode = {\n  ...sixthNode,\n  center: { x: 400, y: 350 },\n  isActive: true,\n  textDirection: \"D\",\n};\n\nconst seventhNode = makeNode({\n  name: \"7: Double click node to move text\",\n  temperatureDegC: 85,\n  capacitanceJPerDegK: 10,\n  powerGenW: 0,\n  isBoundary: false,\n});\nconst seventhAppNode: AppNode = {\n  ...seventhNode,\n  center: { x: 600, y: 300 },\n  isActive: false,\n  textDirection: \"D\",\n};\n\nconst eighthNode = makeNode({\n  name: \"8: Change parameters in tables\",\n  temperatureDegC: 85,\n  capacitanceJPerDegK: 10,\n  powerGenW: 0,\n  isBoundary: false,\n});\nconst eighthAppNode: AppNode = {\n  ...eighthNode,\n  center: { x: 800, y: 350 },\n  isActive: false,\n  textDirection: \"U\",\n};\n\nconst ninthNode = makeNode({\n  name: \"9: Adjust time & run model below tables\",\n  temperatureDegC: 85,\n  capacitanceJPerDegK: 10,\n  powerGenW: 0,\n  isBoundary: false,\n});\nconst ninthAppNode: AppNode = {\n  ...ninthNode,\n  center: { x: 500, y: 500 },\n  isActive: true,\n  textDirection: \"D\",\n};\n\nexport const defaultNodes: AppNode[] = [\n  firstAppNode,\n  secondAppNode,\n  thirdAppNode,\n  fourthAppNode,\n  fifthAppNode,\n  sixthAppNode,\n  seventhAppNode,\n  eighthAppNode,\n  ninthAppNode,\n];\n\nexport const defaultConnections: AppConnection[] = [\n  {\n    ...makeConnection({\n      source: firstNode,\n      target: secondNode,\n      resistanceDegKPerW: 10,\n      kind: \"bi\",\n    }),\n    sourceName: firstNode.name,\n    targetName: secondNode.name,\n  },\n  {\n    ...makeConnection({\n      source: secondNode,\n      target: thirdNode,\n      resistanceDegKPerW: 10,\n      kind: \"bi\",\n    }),\n    sourceName: secondNode.name,\n    targetName: thirdNode.name,\n  },\n  {\n    ...makeConnection({\n      source: thirdNode,\n      target: fourthNode,\n      resistanceDegKPerW: 10,\n      kind: \"bi\",\n    }),\n    sourceName: thirdNode.name,\n    targetName: fourthNode.name,\n  },\n  {\n    ...makeConnection({\n      source: fourthNode,\n      target: fifthNode,\n      resistanceDegKPerW: 10,\n      kind: \"bi\",\n    }),\n    sourceName: fourthNode.name,\n    targetName: fifthNode.name,\n  },\n  {\n    ...makeConnection({\n      source: fifthNode,\n      target: sixthNode,\n      resistanceDegKPerW: 10,\n      kind: \"bi\",\n    }),\n    sourceName: fifthNode.name,\n    targetName: sixthNode.name,\n  },\n  {\n    ...makeConnection({\n      source: sixthNode,\n      target: seventhNode,\n      resistanceDegKPerW: 10,\n      kind: \"bi\",\n    }),\n    sourceName: sixthNode.name,\n    targetName: seventhNode.name,\n  },\n  {\n    ...makeConnection({\n      source: seventhNode,\n      target: eighthNode,\n      resistanceDegKPerW: 10,\n      kind: \"bi\",\n    }),\n    sourceName: seventhNode.name,\n    targetName: eighthNode.name,\n  },\n  {\n    ...makeConnection({\n      source: eighthNode,\n      target: ninthNode,\n      resistanceDegKPerW: 10,\n      kind: \"bi\",\n    }),\n    sourceName: eighthNode.name,\n    targetName: ninthNode.name,\n  },\n];\n\nexport const defaultTiming = {\n  timeStepS: config.defaultTimeStepSeconds,\n  totalTimeS: config.defaultTotalTimeSeconds,\n};\n\nexport const defaultCanvasViewState = {\n  offset: ORIGIN,\n  scale: 1,\n};\n\nexport const defaultAppState = {\n  output: undefined,\n  timing: defaultTiming,\n  nodes: defaultNodes,\n  connections: defaultConnections,\n  canvasViewState: defaultCanvasViewState,\n  savedCanvasState: defaultCanvasViewState,\n};\n","import * as React from \"react\";\nimport styled from \"styled-components/macro\";\nimport EditableNumberInput from \"./EditableNumberInput\";\nimport { AppState, Timing } from \"../../App\";\nimport { useState } from \"react\";\nimport { defaultAppState } from \"../../default\";\n\nconst StyledModelControlsWrapper = styled.div`\n  display: flex;\n  flex-direction: column;\n  height: 100%;\n  width: 100%;\n  justify-content: center;\n  align-items: center;\n  border-top: 3px solid black;\n  padding-top: 1em;\n`;\n\nconst StyledButton = styled.button`\n  margin-top: 5px;\n  margin-bottom: 5px;\n`;\n\nconst StyledImport = styled.div``;\n\nconst StyledTimeControls = styled.div``;\n\nconst StyledTimeControl = styled.div`\n  display: flex;\n  width: 100%;\n  align-items: center;\n  justify-content: space-between;\n  margin: 0.5em;\n`;\n\nconst StyledInputWrapper = styled.div`\n  max-width: 3em;\n  height: 1.5em;\n`;\n\nconst StyledLabel = styled.label`\n  margin-right: 0.2em;\n`;\n\nexport type ModelControlsProps = {\n  appState: AppState;\n  setAppState: React.Dispatch<React.SetStateAction<AppState>>;\n  onRunModel: () => void;\n  timing: Timing;\n  setTiming: (newTiming: Timing) => void;\n};\n\nexport default function ModelControls(\n  props: ModelControlsProps\n): React.ReactElement {\n  const { onRunModel, timing, setTiming } = props;\n  const [stagedAppState, setStagedAppState] = useState<string>(\"\");\n\n  return (\n    <StyledModelControlsWrapper>\n      <StyledTimeControls>\n        <StyledTimeControl>\n          <StyledLabel>Run Time [s]:</StyledLabel>\n          <StyledInputWrapper>\n            <EditableNumberInput\n              initialValue={timing.totalTimeS}\n              onBlur={(newTotalTimeS: number) =>\n                setTiming({ ...timing, totalTimeS: newTotalTimeS })\n              }\n            />\n          </StyledInputWrapper>\n        </StyledTimeControl>\n        <StyledTimeControl>\n          <StyledLabel>Time Step [s]:</StyledLabel>\n          <StyledInputWrapper>\n            <EditableNumberInput\n              initialValue={timing.timeStepS}\n              onBlur={(newTimeStepS: number) =>\n                setTiming({\n                  ...timing,\n                  timeStepS: newTimeStepS,\n                })\n              }\n            />\n          </StyledInputWrapper>\n        </StyledTimeControl>\n      </StyledTimeControls>\n      <StyledButton onClick={onRunModel}>Run Model</StyledButton>\n\n      <StyledButton\n        onClick={() =>\n          navigator.clipboard.writeText(JSON.stringify(props.appState))\n        }\n      >\n        Copy Model to ClipBoard\n      </StyledButton>\n      <StyledImport>\n        <input\n          value={stagedAppState}\n          onChange={(event) => setStagedAppState(event.target.value)}\n        />\n        <StyledButton\n          onClick={() => {\n            props.setAppState(JSON.parse(stagedAppState));\n            setStagedAppState(\"\");\n          }}\n        >\n          Import Model\n        </StyledButton>\n      </StyledImport>\n\n      <StyledButton onClick={() => props.setAppState(defaultAppState)}>\n        Reset to Tutorial\n      </StyledButton>\n    </StyledModelControlsWrapper>\n  );\n}\n","import * as React from \"react\";\nimport styled from \"styled-components/macro\";\nimport { AppConnection, AppNode, AppState, Timing } from \"../../App\";\nimport NodeTable from \"./EditableTable/NodeTable/NodeTable\";\nimport ConnectionTable from \"./EditableTable/ConnectionTable/ConnectionTable\";\nimport Tabs from \"../Tabs/Tabs\";\nimport ModelControls from \"./ModelControls\";\n\nconst StyledEditor = styled.div<{ width: number; height: number }>`\n  height: ${(props) => props.height}px;\n  width: ${(props) => props.width}px;\n  border-left: 3px solid black;\n`;\n\nconst StyledTables = styled.div`\n  display: inline-flex;\n  width: 100%;\n  height: 50%;\n`;\n\nconst StyledModelControlsWrapper = styled.div`\n  display: inline-flex;\n  width: 100%;\n`;\n\ntype SidebarProps = {\n  appState: AppState;\n  setAppState: React.Dispatch<React.SetStateAction<AppState>>;\n  width: number;\n  height: number;\n  timing: Timing;\n  setTiming: (newTiming: Timing) => void;\n  appNodes: AppNode[];\n  onAddNode: () => void;\n  appConnections: AppConnection[];\n  onAddConnection: () => void;\n  addConnection: (connection: AppConnection) => void;\n  updateNodes: (nodes: AppNode[], clearActiveNodes: boolean) => void;\n  deleteNodes: (nodeIds: string[]) => void;\n  updateConnections: (connections: AppConnection[]) => void;\n  deleteConnections: (connectionIds: string[]) => void;\n  onRunModel: () => void;\n};\n\nexport default function Sidebar(props: SidebarProps): React.ReactElement {\n  const nodeTable = (\n    <NodeTable\n      rows={props.appNodes}\n      onUpdateRow={(node: AppNode) => props.updateNodes([node], false)}\n      onDeleteRow={(node: AppNode) => props.deleteNodes([node.id])}\n      onAddButton={props.onAddNode}\n    />\n  );\n\n  const connectionTable = (\n    <ConnectionTable\n      rows={props.appConnections}\n      nodes={props.appNodes}\n      onUpdateRow={(connection: AppConnection) =>\n        props.updateConnections([connection])\n      }\n      onDeleteRow={(connection: AppConnection) =>\n        props.deleteConnections([connection.id])\n      }\n      onAddButton={props.onAddConnection}\n    />\n  );\n\n  return (\n    <StyledEditor width={props.width} height={props.height}>\n      <StyledTables>\n        <Tabs\n          tabs={[\n            { text: \"Nodes\", component: nodeTable, width: 0.5 },\n            { text: \"Connections\", component: connectionTable, width: 0.5 },\n          ]}\n        />\n      </StyledTables>\n      <StyledModelControlsWrapper>\n        <ModelControls\n          appState={props.appState}\n          setAppState={props.setAppState}\n          onRunModel={props.onRunModel}\n          timing={props.timing}\n          setTiming={props.setTiming}\n        />\n      </StyledModelControlsWrapper>\n    </StyledEditor>\n  );\n}\n","import {\n  CartesianGrid,\n  Legend,\n  LineChart,\n  ResponsiveContainer,\n  Tooltip,\n  XAxis,\n  YAxis,\n} from \"recharts\";\nimport * as React from \"react\";\nimport { PlotDimensions } from \"./Plot\";\n\ntype LinePlotProps = {\n  plotDimensions: PlotDimensions;\n  plotData?: ReadonlyArray<Record<string, unknown>>;\n  lines: React.ReactElement[];\n  xAxisKey: string;\n  xLabel: string;\n  yLabel: string;\n};\n\nexport default function LinePlot(props: LinePlotProps): React.ReactElement {\n  const { plotDimensions, plotData, lines, xAxisKey, xLabel, yLabel } = props;\n\n  return (\n    <ResponsiveContainer\n      height={plotDimensions.height}\n      width={plotDimensions.width}\n      className=\"chart\"\n    >\n      <LineChart\n        height={plotDimensions.height}\n        width={plotDimensions.width}\n        margin={plotDimensions.margin}\n        data={plotData}\n      >\n        <CartesianGrid strokeDasharray=\"3 3\" />\n        <XAxis\n          dataKey={xAxisKey}\n          label={{\n            value: xLabel,\n            position: \"center\",\n            dy: 20,\n          }}\n        />\n        <YAxis\n          label={{\n            value: yLabel,\n            position: \"center\",\n            angle: -90,\n            dx: -20,\n          }}\n        />\n        <Tooltip />\n        <Legend\n          layout=\"horizontal\"\n          verticalAlign=\"top\"\n          align=\"center\"\n          wrapperStyle={{\n            paddingLeft: \"10px\",\n          }}\n          // fontSize={5}\n        />\n        {lines}\n      </LineChart>\n    </ResponsiveContainer>\n  );\n}\n","import * as React from \"react\";\nimport { useMemo } from \"react\";\nimport { Line } from \"recharts\";\nimport styled from \"styled-components\";\nimport { emptyOutput, ModelOutput } from \"hotstuff-network\";\nimport LinePlot from \"./LinePlot\";\nimport Tabs from \"../Tabs/Tabs\";\n\nconst MAX_PLOT_POINTS_PER_NODE = 400;\nconst colors = [\n  \"#2ecc71\",\n  \"#3498db\",\n  \"#9b59b6\",\n  \"#e74c3c\",\n  \"#e67e22\",\n  \"#34495e\",\n  \"#16a085\",\n];\n\nconst StyledCharts = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  width: 100%;\n\n  .chart {\n    width: 60% !important;\n    max-width: 900px;\n\n    @media only screen and (max-width: 600px) {\n      width: 90% !important;\n      touch-action: pan-y;\n    }\n  }\n`;\n\n{\n  /*  */\n}\n\nconst StyledPlot = styled.div<{ height: number; width: number }>`\n  width: 100%;\n  height: ${(props) => props.height}px;\n  border-top: 3px solid black;\n  margin: 0;\n  padding: 0;\n`;\n\ntype Margin = {\n  left: number;\n  right: number;\n  top: number;\n  bottom: number;\n};\n\nexport type PlotDimensions = {\n  height: number;\n  width: number;\n  margin: Margin;\n};\n\ntype PlotDataForTime = {\n  time: number;\n  [key: string]: number;\n};\n\nfunction plotShape(data: ModelOutput): [PlotDataForTime[], PlotDataForTime[]] {\n  const lowerMag = Math.floor(Math.log10(data.totalTimeS));\n  const divisibleBy = Math.pow(10, lowerMag - 1);\n\n  function include(val: number) {\n    return Math.abs(val % divisibleBy) === 0;\n  }\n\n  const includeAll = data.timeSeriesS.length < MAX_PLOT_POINTS_PER_NODE;\n\n  const tempsAtAllTimes: PlotDataForTime[] = [];\n  const heatTransfersAtAllTimes: PlotDataForTime[] = [];\n\n  data.timeSeriesS.forEach((t, idx) => {\n    if (includeAll || include(t)) {\n      const temp: PlotDataForTime = { time: t };\n      const ht: PlotDataForTime = { time: t };\n      data.nodeResults.forEach((nodeResult) => {\n        temp[nodeResult.node.name] = nodeResult.tempDegC[idx];\n      });\n      data.connectionResults.forEach((connectionResult) => {\n        ht[\n          `${connectionResult.connection.source.name} to ${connectionResult.connection.target.name}`\n        ] = connectionResult.heatTransferW[idx];\n      });\n      tempsAtAllTimes.push(temp);\n      heatTransfersAtAllTimes.push(ht);\n    }\n  });\n  return [tempsAtAllTimes, heatTransfersAtAllTimes];\n}\n\ntype PlotProps = {\n  plotDimensions: PlotDimensions;\n  modelOutput?: ModelOutput;\n};\n\nexport default function Plot(props: PlotProps): React.ReactElement {\n  const res =\n    !!props.modelOutput && props.modelOutput.nodeResults.length > 0\n      ? props.modelOutput\n      : emptyOutput;\n\n  const [tempPlotData, heatTransferPlotData] = plotShape(res);\n\n  const heatTransferLines = useMemo(\n    () =>\n      res.connectionResults.map((connectionResult, idx) => {\n        return (\n          <Line\n            key={connectionResult.connection.id}\n            type={\"monotone\"}\n            dataKey={`${connectionResult.connection.source.name} to ${connectionResult.connection.target.name}`}\n            stroke={colors[idx]}\n            activeDot={{ r: 8 }}\n            isAnimationActive={false}\n          />\n        );\n      }),\n    [res.connectionResults]\n  );\n\n  const tempLines = useMemo(\n    () =>\n      res.nodeResults.map((nodeResult, idx) => {\n        return (\n          <Line\n            key={nodeResult.node.id}\n            type={\"monotone\"}\n            dataKey={nodeResult.node.name}\n            stroke={colors[idx]}\n            activeDot={{ r: 8 }}\n            isAnimationActive={false}\n          />\n        );\n      }),\n    [res.nodeResults]\n  );\n\n  const tempPlot = (\n    <LinePlot\n      plotDimensions={props.plotDimensions}\n      plotData={tempPlotData}\n      lines={tempLines}\n      xAxisKey={\"time\"}\n      xLabel={\"Time [s]\"}\n      yLabel={\"Temperature [degC]\"}\n    />\n  );\n\n  const heatTransferPlot = (\n    <LinePlot\n      plotDimensions={props.plotDimensions}\n      plotData={heatTransferPlotData}\n      lines={heatTransferLines}\n      xAxisKey={\"time\"}\n      xLabel={\"Time [s]\"}\n      yLabel={\"Heat Transfer [Watts]\"}\n    />\n  );\n\n  return (\n    <StyledPlot\n      height={props.plotDimensions.height}\n      width={props.plotDimensions.width}\n    >\n      <StyledCharts>\n        <Tabs\n          tabs={[\n            {\n              text: \"Temperature\",\n              component: tempPlot,\n              width: 0.5,\n            },\n            {\n              text: \"Heat Transfer\",\n              component: heatTransferPlot,\n              width: 0.5,\n            },\n          ]}\n        />\n      </StyledCharts>\n    </StyledPlot>\n  );\n}\n","import {\n  addPoints,\n  diffPoints,\n  ORIGIN,\n  Point,\n  scalePoint,\n} from \"../../utils/pointUtils\";\nimport config from \"../../config\";\nimport { Direction } from \"../../App\";\nimport * as React from \"react\";\nimport { CanvasState } from \"./Canvas\";\nimport { ConnectionKind } from \"../types\";\n\nconst { activeNodeOutlineWidthPx, minRadiusPx, maxRadiusPx } = config;\nexport const DEFAULT_RADIUS = Math.floor((minRadiusPx + maxRadiusPx) / 2);\n\nfunction drawCircle(\n  context: CanvasRenderingContext2D,\n  center: Point,\n  radius: number,\n  color: string\n): void {\n  context.save();\n  context.beginPath();\n  context.arc(center.x, center.y, radius, 0, 2 * Math.PI);\n  context.fillStyle = color;\n  context.fill();\n  context.closePath();\n  context.restore();\n}\n\nfunction drawCircleOutline(\n  context: CanvasRenderingContext2D,\n  center: Point,\n  radius: number,\n  color: string\n): void {\n  context.save();\n  context.beginPath();\n  // inset\n  context.arc(\n    center.x,\n    center.y,\n    radius - activeNodeOutlineWidthPx / 2,\n    0,\n    2 * Math.PI\n  );\n  context.lineWidth = activeNodeOutlineWidthPx;\n  context.strokeStyle = color;\n  context.stroke();\n  context.closePath();\n  context.restore();\n}\n\nfunction drawHashPattern(\n  context: CanvasRenderingContext2D,\n  center: Point,\n  radius: number\n) {\n  context.save();\n  context.lineWidth = 2;\n  context.fillStyle = \"#FFFFFF\";\n\n  const delta = 4.5;\n  const buffer = 1;\n  const circle = 2;\n\n  // save the canvas above, now transform it for ease of drawing\n  context.translate(center.x, center.y);\n  context.rotate(Math.PI / 4);\n\n  // draw horizontal line\n  context.beginPath();\n  context.moveTo(-radius, 0);\n  context.lineTo(radius, 0);\n  context.stroke();\n\n  // draw smaller horizontal lines offset vertically from center\n  let h = 0; // vertical distance from center\n  while (h + delta < radius) {\n    h = h + delta;\n    const newRadius = radius * Math.sin(Math.acos(h / radius));\n    context.moveTo(-newRadius - buffer, h);\n    context.lineTo(newRadius + buffer, h);\n    context.stroke();\n    context.moveTo(-newRadius - buffer, -h);\n    context.lineTo(newRadius + buffer, -h);\n    context.stroke();\n  }\n  context.closePath();\n\n  // clip off the extra bits around the circle\n  context.beginPath();\n  context.arc(0, 0, radius + circle, 0, Math.PI * 2, false);\n  context.arc(0, 0, radius, 0, Math.PI * 2, true);\n  context.fill();\n\n  context.restore();\n}\n\nfunction drawNodeName(\n  context: CanvasRenderingContext2D,\n  name: string,\n  center: Point,\n  radius: number,\n  textDirection: Direction\n) {\n  const bufferText = 2;\n  context.save();\n  context.font = \"14px Helvetica\";\n  const textMetrics = context.measureText(name);\n  const width = textMetrics.width;\n  context.translate(center.x, center.y);\n  if (textDirection === \"D\") {\n    context.fillText(\n      name,\n      -width / 2,\n      textMetrics.actualBoundingBoxAscent + radius + bufferText\n    );\n  } else if (textDirection === \"R\") {\n    context.fillText(\n      name,\n      radius + bufferText,\n      textMetrics.actualBoundingBoxAscent / 2\n    );\n  } else if (textDirection === \"U\") {\n    context.fillText(\n      name,\n      -width / 2,\n      -(textMetrics.actualBoundingBoxDescent + radius + bufferText)\n    );\n  } else {\n    context.fillText(\n      name,\n      -(width + radius + bufferText),\n      textMetrics.actualBoundingBoxAscent / 2\n    );\n  }\n  context.restore();\n}\n\nexport function drawNode(\n  context: CanvasRenderingContext2D,\n  name: string,\n  center: Point,\n  radius: number,\n  color: string,\n  isActive: boolean,\n  isBoundary: boolean,\n  textDirection: Direction\n): void {\n  drawCircle(context, center, radius, color);\n  if (isActive) {\n    drawCircleOutline(context, center, radius, \"black\");\n  }\n  if (isBoundary) {\n    drawHashPattern(context, center, radius);\n  }\n  drawNodeName(context, name, center, radius, textDirection);\n}\n\nexport function drawBidirectionalArrow(\n  context: CanvasRenderingContext2D,\n  start: Point,\n  end: Point,\n  color: string,\n  startOffset = 0,\n  endOffset = 0\n): void {\n  context.save();\n  context.beginPath();\n  context.strokeStyle = color;\n  context.lineWidth = 2;\n  const headLength = 9;\n  const headWidth = 4;\n  const arrowGap = 0;\n  const dx = end.x - start.x;\n  const dy = end.y - start.y;\n  const angle = Math.atan2(dy, dx);\n  const length = Math.sqrt(dx * dx + dy * dy);\n  const adjLength = length - endOffset;\n\n  context.translate(start.x, start.y);\n  context.rotate(angle);\n\n  context.beginPath();\n  context.moveTo(startOffset, arrowGap);\n  context.lineTo(adjLength, arrowGap);\n  context.moveTo(adjLength - headLength, headWidth + arrowGap);\n  context.lineTo(adjLength, arrowGap);\n  context.lineTo(adjLength - headLength, -(headWidth - arrowGap));\n\n  context.moveTo(adjLength, -arrowGap);\n  context.lineTo(startOffset, -arrowGap);\n  context.moveTo(startOffset + headLength, -(headWidth + arrowGap));\n  context.lineTo(startOffset, -arrowGap);\n  context.lineTo(startOffset + headLength, headWidth - arrowGap);\n\n  context.stroke();\n  context.closePath();\n  context.restore();\n}\n\nexport function drawUnidirectionalArrow(\n  context: CanvasRenderingContext2D,\n  start: Point,\n  end: Point,\n  color: string,\n  startOffset = 0,\n  endOffset = 0\n): void {\n  context.save();\n  context.beginPath();\n  context.strokeStyle = color;\n  context.lineWidth = 2;\n  const headLength = 9;\n  const headWidth = 4;\n  const dx = end.x - start.x;\n  const dy = end.y - start.y;\n  const angle = Math.atan2(dy, dx);\n  const length = Math.sqrt(dx * dx + dy * dy);\n  const adjLength = length - endOffset;\n\n  context.translate(start.x, start.y);\n  context.rotate(angle);\n\n  context.beginPath();\n  context.moveTo(startOffset, 0);\n  context.lineTo(adjLength, 0);\n  context.moveTo(adjLength - headLength, -headWidth);\n  context.lineTo(adjLength, 0);\n  context.lineTo(adjLength - headLength, headWidth);\n  context.stroke();\n  context.closePath();\n  context.restore();\n}\n\nexport function drawArrowWithoutHead(\n  context: CanvasRenderingContext2D,\n  start: Point,\n  end: Point,\n  color: string,\n  startOffset = 0,\n  endOffset = 0\n): void {\n  context.save();\n  context.beginPath();\n  context.strokeStyle = color;\n  context.lineWidth = 2;\n  const dx = end.x - start.x;\n  const dy = end.y - start.y;\n  const angle = Math.atan2(dy, dx);\n  const length = Math.sqrt(dx * dx + dy * dy);\n  context.translate(start.x, start.y);\n  context.rotate(angle);\n  context.beginPath();\n  context.moveTo(startOffset, 0);\n  const adjLength = length - endOffset;\n  context.lineTo(adjLength, 0);\n  context.stroke();\n  context.closePath();\n  context.restore();\n}\n\nexport function drawClearBox(\n  context: CanvasRenderingContext2D,\n  start: Point,\n  end: Point,\n  color: string\n): void {\n  context.save();\n  context.beginPath();\n  context.fillStyle = color;\n  context.globalAlpha = 0.2;\n  context.fillRect(start.x, start.y, end.x - start.x, end.y - start.y);\n  context.closePath();\n\n  // outline\n  context.beginPath();\n  context.strokeStyle = color;\n  context.rect(start.x, start.y, end.x - start.x, end.y - start.y);\n  context.stroke();\n  context.closePath();\n\n  context.restore();\n}\n\nexport function drawConnection(\n  context: CanvasRenderingContext2D,\n  sourceCenter: Point,\n  sourceRadius: number,\n  targetCenter: Point,\n  targetRadius: number,\n  kind: ConnectionKind\n): void {\n  if (kind === \"bi\") {\n    drawBidirectionalArrow(\n      context,\n      sourceCenter,\n      targetCenter,\n      \"black\",\n      sourceRadius,\n      targetRadius\n    );\n  } else {\n    drawUnidirectionalArrow(\n      context,\n      sourceCenter,\n      targetCenter,\n      \"black\",\n      sourceRadius,\n      targetRadius\n    );\n  }\n}\n\nexport function intersectsCircle(\n  point: Point,\n  circleCenter: Point,\n  radius: number\n): boolean {\n  const deltaX = point.x - circleCenter.x;\n  const deltaY = point.y - circleCenter.y;\n  return Math.pow(deltaX, 2) + Math.pow(deltaY, 2) <= Math.pow(radius, 2);\n}\n\nexport function isInsideBox(\n  startBox: Point,\n  endBox: Point,\n  point: Point\n): boolean {\n  const [topLeft, bottomRight] =\n    startBox.x < endBox.x && startBox.y < endBox.y\n      ? [startBox, endBox]\n      : [endBox, startBox];\n\n  const [bottomLeft, topRight] =\n    startBox.x < endBox.x && startBox.y > endBox.y\n      ? [startBox, endBox]\n      : [endBox, startBox];\n\n  return (\n    (topLeft.x <= point.x &&\n      point.x <= bottomRight.x &&\n      topLeft.y <= point.y &&\n      point.y <= bottomRight.y) ||\n    (bottomLeft.x <= point.x &&\n      point.x <= topRight.x &&\n      topRight.y <= point.y &&\n      point.y <= bottomLeft.y)\n  );\n}\n\nexport function calculateCanvasMouse(\n  event: React.MouseEvent | MouseEvent,\n  canvas: HTMLCanvasElement\n): Point {\n  const viewportMousePos = { x: event.pageX, y: event.pageY };\n  const boundingRect = canvas.getBoundingClientRect();\n  const topLeftCanvasPos = { x: boundingRect.left, y: boundingRect.top };\n  return diffPoints(viewportMousePos, topLeftCanvasPos);\n}\n\nfunction canvasMouseToNodeCoords(\n  mouse: Point,\n  offset: Point,\n  scale: number\n): Point {\n  return diffPoints(scalePoint(mouse, scale), offset);\n}\n\nexport function mouseToNodeCoords(\n  event: React.MouseEvent | MouseEvent,\n  canvasState: CanvasState\n): Point {\n  if (canvasState.context) {\n    const canvasMouse = calculateCanvasMouse(event, canvasState.context.canvas);\n    return canvasMouseToNodeCoords(\n      canvasMouse,\n      canvasState.canvasViewState.offset,\n      canvasState.canvasViewState.scale\n    );\n  } else {\n    return ORIGIN;\n  }\n}\n\nexport function rotatedDirection(direction: Direction): Direction {\n  // assume rotate counter-clockwise\n  if (direction === \"D\") {\n    return \"R\";\n  } else if (direction === \"R\") {\n    return \"U\";\n  } else if (direction === \"U\") {\n    return \"L\";\n  } else {\n    return \"D\";\n  }\n}\n\nexport function getCanvasCenter(\n  canvasWidth: number,\n  canvasHeight: number,\n  offset: Point,\n  scale: number\n): Point {\n  const topLeftPoint = offset;\n  const distanceToCenter = scalePoint(\n    { x: canvasWidth, y: canvasHeight },\n    2 * scale\n  );\n  return diffPoints(distanceToCenter, topLeftPoint);\n}\n\nexport function determineRadius(\n  capacitance: number,\n  allCapacitances: number[]\n): number {\n  const min = Math.min(...allCapacitances);\n  const max = Math.max(...allCapacitances);\n  // cap = min -> minRadius\n  // cap = max -> maxRadius\n  // radius = (cap - min) / (max - min) * 20 + 10\n  if (min === max) {\n    return DEFAULT_RADIUS;\n  }\n  return (\n    ((capacitance - min) / (max - min)) * (maxRadiusPx - minRadiusPx) +\n    minRadiusPx\n  );\n}\n\nexport function determineColor(\n  temperature: number,\n  allTemperatures: number[]\n): string {\n  return \"red\";\n}\n","import * as React from \"react\";\nimport { useCallback, useLayoutEffect, useRef, useState } from \"react\";\nimport {\n  addPoints,\n  diffPoints,\n  ORIGIN,\n  Point,\n  scalePoint,\n} from \"../../../utils/pointUtils\";\nimport config from \"../../../config\";\nimport { calculateCanvasMouse } from \"../canvasUtils\";\nimport { CanvasViewState } from \"../Canvas\";\n\nconst { maxZoom, minZoom, zoomSensitivity } = config;\n\nexport default function usePanZoomCanvas(\n  canvasRef: React.RefObject<HTMLCanvasElement>,\n  canvasViewState: CanvasViewState,\n  setCanvasViewState: (newCanvasViewState: CanvasViewState) => void\n): [\n  CanvasRenderingContext2D | null,\n  React.Dispatch<React.SetStateAction<CanvasRenderingContext2D | null>>,\n  (event: React.MouseEvent | MouseEvent) => void\n] {\n  const [context, setContext] = useState<CanvasRenderingContext2D | null>(null);\n  const mousePosRef = useRef<Point>(ORIGIN);\n  const lastMousePosRef = useRef<Point>(ORIGIN);\n  const lastCanvasViewState = useRef<CanvasViewState>(canvasViewState);\n\n  // functions for panning\n  const mouseMove = useCallback(\n    (event: React.MouseEvent | MouseEvent) => {\n      if (context) {\n        // update mouse position\n        const newMousePos = calculateCanvasMouse(event, context.canvas);\n        lastMousePosRef.current = mousePosRef.current;\n        mousePosRef.current = newMousePos;\n\n        const mouseDiff = scalePoint(\n          diffPoints(mousePosRef.current, lastMousePosRef.current),\n          canvasViewState.scale\n        );\n        const newCanvasViewState = {\n          scale: canvasViewState.scale,\n          offset: addPoints(lastCanvasViewState.current.offset, mouseDiff),\n        };\n        setCanvasViewState(newCanvasViewState);\n        lastCanvasViewState.current = newCanvasViewState;\n      }\n    },\n    [context, canvasViewState.scale, setCanvasViewState]\n  );\n\n  const mouseUp = useCallback(() => {\n    document.removeEventListener(\"mousemove\", mouseMove);\n    document.removeEventListener(\"mouseup\", mouseUp);\n  }, [mouseMove]);\n\n  const startPan = useCallback(\n    (event: React.MouseEvent | MouseEvent) => {\n      if (context) {\n        document.addEventListener(\"mousemove\", mouseMove);\n        document.addEventListener(\"mouseup\", mouseUp);\n        mousePosRef.current = calculateCanvasMouse(event, context.canvas);\n      }\n    },\n    [context, mouseMove, mouseUp]\n  );\n\n  // add event listener on canvas for zoom\n  useLayoutEffect(() => {\n    function handleWheel(event: WheelEvent) {\n      event.preventDefault();\n      if (context) {\n        // update mouse position\n        const newMousePos = calculateCanvasMouse(event, context.canvas);\n        lastMousePosRef.current = mousePosRef.current;\n        mousePosRef.current = newMousePos;\n\n        // calculate new scale/zoom\n        const zoom = 1 - event.deltaY / zoomSensitivity;\n        const newScale = canvasViewState.scale * zoom;\n        if (newScale > maxZoom || newScale < minZoom) {\n          return;\n        }\n\n        // offset the canvas such that the point under the mouse doesn't move\n        const lastMouse = scalePoint(\n          mousePosRef.current,\n          canvasViewState.scale\n        );\n        const newMouse = scalePoint(mousePosRef.current, newScale);\n        const mouseOffset = diffPoints(lastMouse, newMouse);\n\n        const newCanvasViewState = {\n          offset: diffPoints(lastCanvasViewState.current.offset, mouseOffset),\n          scale: newScale,\n        };\n        setCanvasViewState(newCanvasViewState);\n        lastCanvasViewState.current = newCanvasViewState;\n      }\n    }\n\n    const canvasElem = canvasRef.current;\n    if (canvasElem) {\n      lastCanvasViewState.current = canvasViewState;\n      canvasElem.addEventListener(\"wheel\", handleWheel);\n      return () => canvasElem.removeEventListener(\"wheel\", handleWheel);\n    }\n  }, [canvasRef, canvasViewState, context, setCanvasViewState]);\n\n  return [context, setContext, startPan];\n}\n","import * as React from \"react\";\nimport styled from \"styled-components/macro\";\nimport { ORIGIN } from \"../../utils/pointUtils\";\nimport { CanvasState, CanvasViewState } from \"./Canvas\";\n\nconst StyledButtons = styled.div`\n  position: absolute;\n  bottom: 0;\n  left: 0;\n  display: flex;\n  flex-direction: column;\n`;\n\nconst StyledButton = styled.button`\n  margin: 0.2em;\n`;\n\ntype ControlsProps = {\n  setCanvasViewState: (canvasViewState: CanvasViewState) => void;\n  canvasState: CanvasState;\n  savedCanvasState: CanvasViewState;\n  setSavedCanvasState: (newSavedCanvasState: CanvasViewState) => void;\n};\n\nexport default function Controls(props: ControlsProps): React.ReactElement {\n  return (\n    <StyledButtons>\n      <StyledButton\n        onClick={() =>\n          props.canvasState.context &&\n          props.setCanvasViewState({ offset: ORIGIN, scale: 1 })\n        }\n      >\n        Reset View\n      </StyledButton>\n      <StyledButton\n        onClick={() =>\n          props.canvasState.context &&\n          props.setCanvasViewState({\n            offset: props.savedCanvasState.offset,\n            scale: props.savedCanvasState.scale,\n          })\n        }\n      >\n        Reset View to Saved\n      </StyledButton>\n      <StyledButton\n        onClick={() => {\n          props.setSavedCanvasState({\n            offset: props.canvasState.canvasViewState.offset,\n            scale: props.canvasState.canvasViewState.scale,\n          });\n        }}\n      >\n        Save View\n      </StyledButton>\n    </StyledButtons>\n  );\n}\n","import * as React from \"react\";\nimport { useLayoutEffect, useRef } from \"react\";\nimport styled from \"styled-components\";\nimport usePanZoomCanvas from \"./hooks/usePanZoomCanvas\";\nimport { Point } from \"../../utils/pointUtils\";\nimport Controls from \"./Controls\";\nimport useOnClickCanvas from \"./hooks/useOnClickCanvas\";\n\nconst StyledCanvasWrapper = styled.div`\n  display: block;\n  max-height: 100%;\n  position: relative;\n`;\n\nconst StyledCanvas = styled.canvas<{ cssWidth: number; cssHeight: number }>`\n  width: ${({ cssWidth }) => `${cssWidth}px`};\n  height: ${({ cssHeight }) => `${cssHeight}px`};\n`;\n\nexport type CanvasViewState = {\n  offset: Point;\n  scale: number;\n};\n\nexport type CanvasState = {\n  context: CanvasRenderingContext2D | null;\n  canvasViewState: CanvasViewState;\n  canvasWidth: number;\n  canvasHeight: number;\n};\n\nexport type CanvasProps = {\n  canvasWidth: number;\n  canvasHeight: number;\n  devicePixelRatio: number;\n  draw: (context: CanvasRenderingContext2D) => void;\n  onMouseDown: (\n    event: React.MouseEvent | MouseEvent,\n    canvasState: CanvasState,\n    defaultBehavior: (event: React.MouseEvent | MouseEvent) => void\n  ) => void;\n  handleDoubleClick: (\n    event: React.MouseEvent,\n    canvasState: CanvasState\n  ) => void;\n  canvasViewState: CanvasViewState;\n  setCanvasViewState: (newCanvasState: CanvasViewState) => void;\n  savedCanvasViewState: CanvasViewState;\n  setSavedCanvasViewState: (newSavedCanvasState: CanvasViewState) => void;\n  setKeyboardActive: React.Dispatch<React.SetStateAction<boolean>>;\n};\n\nexport default function Canvas(props: CanvasProps): React.ReactElement {\n  const {\n    canvasWidth,\n    canvasHeight,\n    devicePixelRatio,\n    draw,\n    onMouseDown,\n    handleDoubleClick,\n    canvasViewState,\n    setCanvasViewState,\n    savedCanvasViewState,\n    setSavedCanvasViewState,\n    setKeyboardActive,\n  } = props;\n\n  // hooks\n  const canvasRef = useRef<HTMLCanvasElement>(null);\n  useOnClickCanvas(canvasRef, setKeyboardActive);\n  const [context, setContext, startPan] = usePanZoomCanvas(\n    canvasRef,\n    canvasViewState,\n    setCanvasViewState\n  );\n\n  // setup canvas and set context\n  useLayoutEffect(() => {\n    if (canvasRef.current) {\n      // get new drawing context\n      const renderCtx = canvasRef.current.getContext(\"2d\");\n      setContext(renderCtx);\n    }\n  }, [setContext]);\n\n  // draw\n  useLayoutEffect(() => {\n    if (context) {\n      // clear canvas\n      context.canvas.width = canvasWidth * devicePixelRatio;\n      context.canvas.height = canvasHeight * devicePixelRatio;\n\n      context.scale(\n        canvasViewState.scale * devicePixelRatio,\n        canvasViewState.scale * devicePixelRatio\n      );\n      context.translate(canvasViewState.offset.x, canvasViewState.offset.y);\n\n      draw(context);\n    }\n  }, [\n    canvasHeight,\n    canvasWidth,\n    context,\n    devicePixelRatio,\n    draw,\n    canvasViewState.offset.x,\n    canvasViewState.offset.y,\n    canvasViewState.scale,\n  ]);\n\n  return (\n    <StyledCanvasWrapper>\n      <Controls\n        setCanvasViewState={setCanvasViewState}\n        canvasState={{\n          context,\n          canvasViewState,\n          canvasWidth,\n          canvasHeight,\n        }}\n        savedCanvasState={savedCanvasViewState}\n        setSavedCanvasState={setSavedCanvasViewState}\n      />\n      <StyledCanvas\n        ref={canvasRef}\n        width={canvasWidth * devicePixelRatio}\n        height={canvasHeight * devicePixelRatio}\n        cssWidth={canvasWidth}\n        cssHeight={canvasHeight}\n        onMouseDown={(event: React.MouseEvent | MouseEvent) =>\n          onMouseDown(\n            event,\n            { context, canvasViewState, canvasWidth, canvasHeight },\n            () => startPan(event)\n          )\n        }\n        onDoubleClick={(event: React.MouseEvent) =>\n          handleDoubleClick(event, {\n            context,\n            canvasViewState,\n            canvasWidth,\n            canvasHeight,\n          })\n        }\n      />\n    </StyledCanvasWrapper>\n  );\n}\n","import * as React from \"react\";\nimport { useEffect } from \"react\";\n\nexport default function useOnClickCanvas(\n  ref: React.RefObject<HTMLCanvasElement>,\n  onClickCanvas: React.Dispatch<React.SetStateAction<boolean>>\n): void {\n  useEffect(() => {\n    const handleClickOutside = (event: React.MouseEvent | MouseEvent) => {\n      const keyBoardActive =\n        !!ref.current && ref.current.contains(event.target as Node);\n      onClickCanvas(keyBoardActive);\n    };\n\n    // Bind the event listener\n    document.addEventListener(\"mousedown\", handleClickOutside);\n    return () => {\n      // Unbind the event listener on clean up\n      document.removeEventListener(\"mousedown\", handleClickOutside);\n    };\n  }, [ref, onClickCanvas]);\n}\n","import { HSConnection, makeConnection, makeNode } from \"hotstuff-network\";\nimport config from \"../config\";\nimport { AppConnection, AppNode } from \"../App\";\nimport { Point } from \"./pointUtils\";\n\nconst { newNodeNamePrefix } = config;\n\nexport function getNewAppNode(appNodes: AppNode[], center: Point): AppNode {\n  const numNodesWithDefaultPrefix = appNodes.filter((node) =>\n    node.name.startsWith(newNodeNamePrefix)\n  ).length;\n\n  const newNode = makeNode({\n    name:\n      numNodesWithDefaultPrefix === 0\n        ? `${newNodeNamePrefix}`\n        : `${newNodeNamePrefix} (${numNodesWithDefaultPrefix + 1})`,\n    temperatureDegC: config.defaultTempDegC,\n    capacitanceJPerDegK: config.defaultCapJPerDegK,\n    powerGenW: config.defaultPowerGenW,\n    isBoundary: false,\n  });\n\n  return {\n    ...newNode,\n    center: center,\n    isActive: false,\n    textDirection: \"D\",\n  };\n}\n\nexport function getNewAppConnection(\n  appNodes: AppNode[],\n  appConnections: AppConnection[]\n): AppConnection | undefined {\n  console.log(\"HI\");\n  if (appNodes.length < 2) {\n    console.log(\"HI2\");\n    return;\n  }\n  let found: AppConnection | undefined = undefined;\n\n  appNodes.forEach((firstNode) => {\n    appNodes.forEach((secondNode) => {\n      if (!found && firstNode.id !== secondNode.id) {\n        const connectionForwardsExists = appConnections.find(\n          (conn) =>\n            conn.source.id === firstNode.id && conn.target.id === secondNode.id\n        );\n        if (!connectionForwardsExists) {\n          const newConnection: HSConnection = makeConnection({\n            source: firstNode,\n            target: secondNode,\n            resistanceDegKPerW: config.defaultResistanceDegKPerW,\n            kind: \"bi\",\n          });\n\n          found = {\n            ...newConnection,\n            sourceName: firstNode.name,\n            targetName: secondNode.name,\n          };\n        }\n\n        const connectionBackwardsExists = appConnections.find(\n          (conn) =>\n            conn.source.id === secondNode.id && conn.target.id === firstNode.id\n        );\n        if (!connectionBackwardsExists) {\n          const newConnection: HSConnection = makeConnection({\n            source: secondNode,\n            target: firstNode,\n            resistanceDegKPerW: config.defaultResistanceDegKPerW,\n            kind: \"bi\",\n          });\n\n          found = {\n            ...newConnection,\n            sourceName: secondNode.name,\n            targetName: firstNode.name,\n          };\n        }\n      }\n    });\n  });\n  return found;\n}\n","import React, { useCallback } from \"react\";\nimport { CanvasState } from \"../components/Canvas/Canvas\";\nimport {\n  determineRadius,\n  drawArrowWithoutHead,\n  intersectsCircle,\n  mouseToNodeCoords,\n} from \"../components/Canvas/canvasUtils\";\nimport { makeConnection } from \"hotstuff-network\";\nimport { AppConnection, AppNode } from \"../App\";\nimport config from \"../config\";\n\nconst { defaultResistanceDegKPerW, defaultConnectionKind } = config;\n\nexport default function useAddConnection(\n  appNodes: AppNode[],\n  appConnections: AppConnection[],\n  addConnection: (newConnection: AppConnection) => void,\n  clearAndRedraw: (canvasState: CanvasState) => void\n): (\n  event: React.MouseEvent | MouseEvent,\n  clickedNode: AppNode,\n  canvasState: CanvasState\n) => void {\n  const drawConnectionBeingMade = useCallback(\n    (\n      event: React.MouseEvent | MouseEvent,\n      clickedNode: AppNode,\n      canvasState: CanvasState\n    ) => {\n      if (canvasState.context) {\n        const nodeCoordsOfMouse = mouseToNodeCoords(event, canvasState);\n        clearAndRedraw(canvasState);\n        drawArrowWithoutHead(\n          canvasState.context,\n          clickedNode.center,\n          nodeCoordsOfMouse,\n          \"grey\"\n        );\n      }\n    },\n    [clearAndRedraw]\n  );\n\n  return useCallback(\n    (\n      event: React.MouseEvent | MouseEvent,\n      clickedNode: AppNode,\n      canvasState: CanvasState\n    ) => {\n      const drawConnWrapper = (event: React.MouseEvent | MouseEvent) => {\n        drawConnectionBeingMade(event, clickedNode, canvasState);\n      };\n\n      const mouseUp = (event: React.MouseEvent | MouseEvent) => {\n        document.removeEventListener(\"mousemove\", drawConnWrapper);\n        document.removeEventListener(\"mouseup\", mouseUp);\n\n        // if arrow released on a node, make new connection\n        const nodeCoordsOfMouse = mouseToNodeCoords(event, canvasState);\n        const mouseUpOnNode = appNodes.find((node) => {\n          const nodeRadius = determineRadius(\n            node.capacitanceJPerDegK,\n            appNodes.map((node) => node.capacitanceJPerDegK)\n          );\n          return (\n            intersectsCircle(nodeCoordsOfMouse, node.center, nodeRadius) &&\n            node.id !== clickedNode.id &&\n            !appConnections.some(\n              (conn) =>\n                (conn.source.id === node.id &&\n                  conn.target.id === clickedNode.id) ||\n                (conn.target.id === node.id &&\n                  conn.source.id === clickedNode.id)\n            )\n          );\n        });\n\n        if (mouseUpOnNode) {\n          const newConnection = {\n            ...makeConnection({\n              source: clickedNode,\n              target: mouseUpOnNode,\n              resistanceDegKPerW: defaultResistanceDegKPerW,\n              kind: defaultConnectionKind,\n            }),\n            sourceName: clickedNode.name,\n            targetName: mouseUpOnNode.name,\n          };\n          addConnection(newConnection);\n        } else {\n          clearAndRedraw(canvasState);\n        }\n      };\n      document.addEventListener(\"mousemove\", drawConnWrapper);\n      document.addEventListener(\"mouseup\", mouseUp);\n    },\n    [\n      addConnection,\n      appConnections,\n      appNodes,\n      clearAndRedraw,\n      drawConnectionBeingMade,\n    ]\n  );\n}\n","import React, { useCallback, useRef } from \"react\";\nimport { CanvasState } from \"../components/Canvas/Canvas\";\nimport { mouseToNodeCoords } from \"../components/Canvas/canvasUtils\";\nimport { AppNode } from \"../App\";\nimport { diffPoints } from \"../utils/pointUtils\";\n\nfunction getNewAppNodes(\n  clickedMouseEvent: React.MouseEvent | MouseEvent,\n  currentMouseEvent: React.MouseEvent | MouseEvent,\n  canvasState: CanvasState,\n  clickedNode: AppNode,\n  shiftKeyPressed: boolean,\n  activeNodes: AppNode[]\n): AppNode[] {\n  const offsetMouseToCenter = diffPoints(\n    mouseToNodeCoords(clickedMouseEvent, canvasState),\n    clickedNode.center\n  );\n\n  const newClickedCenter = diffPoints(\n    mouseToNodeCoords(currentMouseEvent, canvasState),\n    offsetMouseToCenter\n  );\n\n  const newClickedNode = {\n    ...clickedNode,\n    isActive: true,\n    center: newClickedCenter,\n  };\n\n  const newActiveNodes =\n    clickedNode.isActive || shiftKeyPressed\n      ? activeNodes.map((node) => {\n          const distanceFromClickedCenter = diffPoints(\n            clickedNode.center,\n            node.center\n          );\n          return {\n            ...node,\n            center: diffPoints(newClickedCenter, distanceFromClickedCenter),\n          };\n        })\n      : [];\n\n  return [newClickedNode, ...newActiveNodes];\n}\n\nexport default function useMoveNode(\n  updateNodes: (nodesToUpdate: AppNode[], clearActiveNodes?: boolean) => void\n): (\n  event: React.MouseEvent | MouseEvent,\n  clickedNode: AppNode,\n  activeNodes: AppNode[],\n  canvasState: CanvasState\n) => void {\n  const movedRef = useRef<boolean>(false);\n\n  return useCallback(\n    (\n      mouseDownEvent: React.MouseEvent | MouseEvent,\n      clickedNode: AppNode,\n      activeNodes: AppNode[],\n      canvasState: CanvasState\n    ) => {\n      const shiftKeyPressed = mouseDownEvent.shiftKey;\n      const moveNode = (currentMouseEvent: React.MouseEvent | MouseEvent) => {\n        if (canvasState.context) {\n          movedRef.current = true;\n          const newNodes = getNewAppNodes(\n            mouseDownEvent,\n            currentMouseEvent,\n            canvasState,\n            clickedNode,\n            shiftKeyPressed,\n            activeNodes\n          );\n          updateNodes(newNodes, !currentMouseEvent.shiftKey);\n        }\n      };\n      const mouseUp = (mouseUpEvent: React.MouseEvent | MouseEvent) => {\n        document.removeEventListener(\"mousemove\", moveNode);\n        document.removeEventListener(\"mouseup\", mouseUp);\n        const newNodes = getNewAppNodes(\n          mouseDownEvent,\n          mouseUpEvent,\n          canvasState,\n          clickedNode,\n          shiftKeyPressed,\n          activeNodes\n        );\n        updateNodes(newNodes, !shiftKeyPressed);\n        movedRef.current = false;\n      };\n      document.addEventListener(\"mousemove\", moveNode);\n      document.addEventListener(\"mouseup\", mouseUp);\n    },\n    [updateNodes]\n  );\n}\n","import React, { useCallback } from \"react\";\nimport { CanvasState } from \"../components/Canvas/Canvas\";\nimport {\n  drawClearBox,\n  isInsideBox,\n  mouseToNodeCoords,\n} from \"../components/Canvas/canvasUtils\";\nimport { AppNode } from \"../App\";\n\nexport default function useMultiSelect(\n  appNodes: AppNode[],\n  setActiveNodes: (activeNodeIds: string[]) => void,\n  clearAndRedraw: (canvasState: CanvasState) => void\n): (event: React.MouseEvent | MouseEvent, canvasState: CanvasState) => void {\n  return useCallback(\n    (event: React.MouseEvent | MouseEvent, canvasState: CanvasState) => {\n      const boxStart = mouseToNodeCoords(event, canvasState);\n      const drawBox = (event: React.MouseEvent | MouseEvent) => {\n        if (canvasState.context) {\n          clearAndRedraw(canvasState);\n          drawClearBox(\n            canvasState.context,\n            boxStart,\n            mouseToNodeCoords(event, canvasState),\n            \"grey\"\n          );\n        }\n      };\n      const mouseUp = (event: React.MouseEvent | MouseEvent) => {\n        document.removeEventListener(\"mousemove\", drawBox);\n        document.removeEventListener(\"mouseup\", mouseUp);\n\n        const boxEnd = mouseToNodeCoords(event, canvasState);\n        const activeNodeIds = appNodes\n          .filter(\n            (node) =>\n              isInsideBox(boxStart, boxEnd, node.center) || node.isActive\n          )\n          .map((node) => node.id);\n        setActiveNodes(activeNodeIds);\n      };\n      document.addEventListener(\"mousemove\", drawBox);\n      document.addEventListener(\"mouseup\", mouseUp);\n    },\n    [appNodes, clearAndRedraw, setActiveNodes]\n  );\n}\n","import * as React from \"react\";\nimport { useCallback } from \"react\";\nimport {\n  determineRadius,\n  intersectsCircle,\n  mouseToNodeCoords,\n} from \"../components/Canvas/canvasUtils\";\nimport { AppConnection, AppNode } from \"../App\";\nimport { CanvasState } from \"../components/Canvas/Canvas\";\nimport useAddConnection from \"./useAddConnection\";\nimport useMoveNode from \"./useMoveNode\";\nimport useMultiSelect from \"./useMultiSelect\";\n\nexport default function useOnMouseDown(\n  appNodes: AppNode[],\n  appConnections: AppConnection[],\n  addConnection: (newConnection: AppConnection) => void,\n  updateNodes: (nodesToUpdate: AppNode[], clearActiveNodes?: boolean) => void,\n  setActiveNodes: (activeNodeIds: string[]) => void,\n  clearActiveNodes: () => void,\n  clearAndRedraw: (canvasState: CanvasState) => void\n): (\n  event: React.MouseEvent | MouseEvent,\n  canvasState: CanvasState,\n  defaultBehavior: (event: React.MouseEvent | MouseEvent) => void\n) => void {\n  const makeNewConnection = useAddConnection(\n    appNodes,\n    appConnections,\n    addConnection,\n    clearAndRedraw\n  );\n  const moveNode = useMoveNode(updateNodes);\n  const multiSelect = useMultiSelect(appNodes, setActiveNodes, clearAndRedraw);\n\n  return useCallback(\n    (\n      mouseDownEvent: React.MouseEvent | MouseEvent,\n      canvasState: CanvasState,\n      defaultBehavior: (event: React.MouseEvent | MouseEvent) => void\n    ) => {\n      const nodeCoordsOfMouse = mouseToNodeCoords(mouseDownEvent, canvasState);\n\n      const activeNodes = appNodes.filter((node) => node.isActive);\n      const activeNodeIds = activeNodes.map((node) => node.id);\n\n      const clickedNode = appNodes.find((node) => {\n        const nodeRadius = determineRadius(\n          node.capacitanceJPerDegK,\n          appNodes.map((node) => node.capacitanceJPerDegK)\n        );\n        return intersectsCircle(nodeCoordsOfMouse, node.center, nodeRadius);\n      });\n\n      if (clickedNode) {\n        if (mouseDownEvent.altKey) {\n          makeNewConnection(mouseDownEvent, clickedNode, canvasState);\n        } else if (\n          mouseDownEvent.shiftKey &&\n          activeNodeIds.includes(clickedNode.id)\n        ) {\n          setActiveNodes(activeNodeIds.filter((id) => id !== clickedNode.id));\n        } else {\n          moveNode(mouseDownEvent, clickedNode, activeNodes, canvasState);\n        }\n      } else {\n        if (mouseDownEvent.shiftKey) {\n          multiSelect(mouseDownEvent, canvasState);\n        } else {\n          // only clear active nodes if click with no pan\n          const onMouseUp = (mouseUpEvent: React.MouseEvent | MouseEvent) => {\n            if (\n              mouseUpEvent.clientX === mouseDownEvent.clientX &&\n              mouseUpEvent.clientY === mouseDownEvent.clientY\n            ) {\n              clearActiveNodes();\n            }\n            document.removeEventListener(\"mouseup\", onMouseUp);\n          };\n          document.addEventListener(\"mouseup\", onMouseUp);\n          defaultBehavior(mouseDownEvent);\n        }\n      }\n    },\n    [\n      appNodes,\n      clearActiveNodes,\n      moveNode,\n      multiSelect,\n      makeNewConnection,\n      setActiveNodes,\n    ]\n  );\n}\n","import {\n  HSConnection,\n  HSNode,\n  makeConnection,\n  ModelOutput,\n  run,\n} from \"hotstuff-network\";\nimport React, { useCallback, useMemo, useState } from \"react\";\nimport styled from \"styled-components\";\nimport { Point } from \"./utils/pointUtils\";\nimport Sidebar from \"./components/Sidebar/Sidebar\";\nimport Plot from \"./components/Plot/Plot\";\nimport config from \"./config\";\nimport useWindowSize from \"./components/Canvas/hooks/useWindowSize\";\nimport Canvas, { CanvasViewState } from \"./components/Canvas/Canvas\";\nimport useDraw from \"./hooks/useDraw\";\nimport useDoubleClick from \"./hooks/useDoubleClick\";\nimport useNodeConnectionUtils from \"./hooks/useNodeConnectionUtils\";\nimport useOnMouseDown from \"./hooks/useOnMouseDown\";\nimport useKeyDown from \"./hooks/useKeyDown\";\nimport { defaultAppState } from \"./default\";\nimport useSessionStorageState from \"./hooks/useSessionStorageState\";\nimport { getCanvasCenter } from \"./components/Canvas/canvasUtils\";\nimport {\n  getNewAppNode,\n  getNewAppConnection,\n} from \"./utils/nodeConnectionUtils\";\n\nconst {\n  editorWidthPerc,\n  canvasHeightPerc,\n  plotMargin,\n  tabHeightPx,\n  plotHeightBufferPx,\n} = config;\n\nexport type Direction = \"L\" | \"R\" | \"U\" | \"D\";\n\nexport type AppNode = HSNode & {\n  center: Point;\n  isActive: boolean;\n  textDirection: Direction;\n};\n\nexport type AppConnection = HSConnection & {\n  sourceName: string;\n  targetName: string;\n};\n\nexport type Timing = {\n  timeStepS: number;\n  totalTimeS: number;\n};\n\nexport type AppState = {\n  output?: ModelOutput;\n  timing: Timing;\n  nodes: AppNode[];\n  connections: AppConnection[];\n  canvasViewState: CanvasViewState;\n  savedCanvasState: CanvasViewState;\n};\n\nconst StyledApp = styled.div<{ height: number }>`\n  display: flex;\n  height: ${(props) => props.height}px;\n  user-select: none;\n  -webkit-user-select: none; /* Chrome/Safari */\n  -moz-user-select: none; /* Firefox */\n  -ms-user-select: none; /* IE10+ */\n`;\n\nconst StyledWorkspace = styled.div<{ height: number; width: number }>`\n  height: ${(props) => props.height}px;\n  width: ${(props) => (1 - editorWidthPerc) * props.width}px;\n`;\n\nconst StyledCanvas = styled.div<{ height: number }>`\n  width: 100%;\n  height: ${(props) => props.height}px;\n`;\n\nexport default function App(): React.ReactElement {\n  const [appState, setAppState] = useSessionStorageState<AppState>(\n    defaultAppState,\n    \"hotstuffAppState\"\n  );\n\n  const setAppNodes = useCallback(\n    (newNodes: AppNode[]) => {\n      setAppState((prevState) => ({\n        ...prevState,\n        nodes: newNodes,\n      }));\n    },\n    [setAppState]\n  );\n\n  const setAppConnections = useCallback(\n    (newConnections: AppConnection[]) => {\n      setAppState((prevState) => ({\n        ...prevState,\n        connections: newConnections,\n      }));\n    },\n    [setAppState]\n  );\n\n  const setCanvasState = useCallback(\n    (newCanvasState: CanvasViewState) => {\n      setAppState((prevState) => ({\n        ...prevState,\n        canvasViewState: newCanvasState,\n      }));\n    },\n    [setAppState]\n  );\n\n  const setSavedCanvasState = useCallback(\n    (newSavedCanvasState: CanvasViewState) => {\n      setAppState((prevState) => ({\n        ...prevState,\n        savedCanvasState: newSavedCanvasState,\n      }));\n    },\n    [setAppState]\n  );\n\n  const setTiming = useCallback(\n    (newTiming: Timing) => {\n      setAppState((prevState) => ({\n        ...prevState,\n        timing: newTiming,\n        output: undefined,\n      }));\n    },\n    [setAppState]\n  );\n\n  const setModelOutput = useCallback(\n    (newModelOutput: ModelOutput | undefined) => {\n      setAppState((prevState) => ({\n        ...prevState,\n        output: newModelOutput,\n      }));\n    },\n    [setAppState]\n  );\n\n  const [\n    addNode,\n    addConnection,\n    updateNodes,\n    deleteNodes,\n    updateConnections,\n    deleteConnections,\n    setActiveNodes,\n    clearActiveNodes,\n  ] = useNodeConnectionUtils(\n    appState.nodes,\n    setAppNodes,\n    appState.connections,\n    setAppConnections,\n    setModelOutput\n  );\n\n  const [keyboardActive, setKeyboardActive] = useState<boolean>(true);\n  useKeyDown(keyboardActive, appState.nodes, setAppNodes, deleteNodes);\n\n  const [draw, clearAndRedraw] = useDraw(appState.nodes, appState.connections);\n  const handleDoubleClick = useDoubleClick(\n    appState.nodes,\n    addNode,\n    updateNodes\n  );\n  const onMouseDown = useOnMouseDown(\n    appState.nodes,\n    appState.connections,\n    addConnection,\n    updateNodes,\n    setActiveNodes,\n    clearActiveNodes,\n    clearAndRedraw\n  );\n\n  const [size, ratio] = useWindowSize();\n  const [windowWidth, windowHeight] = size;\n\n  // width/heights\n  const workspaceWidth = windowWidth;\n  const workspaceHeight = windowHeight;\n  const canvasHeight = windowHeight * canvasHeightPerc;\n  const canvasWidth = windowWidth * (1 - editorWidthPerc);\n  const plotHeight =\n    (1 - canvasHeightPerc) * windowHeight - tabHeightPx - plotHeightBufferPx;\n  const plotWidth = canvasWidth;\n  const editorWidth = editorWidthPerc * windowWidth;\n\n  const plot = useMemo(() => {\n    return (\n      <Plot\n        plotDimensions={{\n          height: plotHeight,\n          width: plotWidth,\n          margin: plotMargin,\n        }}\n        modelOutput={appState.output}\n      />\n    );\n  }, [appState.output, plotHeight, plotWidth]);\n\n  const addNodeInCenterOfCanvas = useCallback(() => {\n    addNode(\n      getNewAppNode(\n        appState.nodes,\n        getCanvasCenter(\n          canvasWidth,\n          canvasHeight,\n          appState.canvasViewState.offset,\n          appState.canvasViewState.scale\n        )\n      )\n    );\n  }, [\n    addNode,\n    appState.canvasViewState.offset,\n    appState.canvasViewState.scale,\n    appState.nodes,\n    canvasHeight,\n    canvasWidth,\n  ]);\n\n  const createNewLogicalConnection = useCallback(() => {\n    const newConnection = getNewAppConnection(\n      appState.nodes,\n      appState.connections\n    );\n    if (newConnection !== undefined) {\n      addConnection(newConnection);\n    }\n  }, [addConnection, appState.connections, appState.nodes]);\n\n  return (\n    <StyledApp height={windowHeight}>\n      <StyledWorkspace height={workspaceHeight} width={workspaceWidth}>\n        <StyledCanvas height={canvasHeight}>\n          <Canvas\n            canvasWidth={canvasWidth}\n            canvasHeight={canvasHeight}\n            devicePixelRatio={ratio}\n            draw={draw}\n            onMouseDown={onMouseDown}\n            handleDoubleClick={handleDoubleClick}\n            canvasViewState={appState.canvasViewState}\n            setCanvasViewState={setCanvasState}\n            savedCanvasViewState={appState.savedCanvasState}\n            setSavedCanvasViewState={setSavedCanvasState}\n            setKeyboardActive={setKeyboardActive}\n          />\n        </StyledCanvas>\n        {plot}\n      </StyledWorkspace>\n      <Sidebar\n        appState={appState}\n        setAppState={setAppState}\n        height={windowHeight}\n        width={editorWidth}\n        timing={appState.timing}\n        setTiming={setTiming}\n        appNodes={appState.nodes}\n        onAddNode={addNodeInCenterOfCanvas}\n        appConnections={appState.connections}\n        onAddConnection={createNewLogicalConnection}\n        addConnection={addConnection}\n        updateNodes={(nodes: AppNode[]) => {\n          updateNodes(nodes);\n          setModelOutput(undefined);\n        }}\n        deleteNodes={deleteNodes}\n        updateConnections={(conns: AppConnection[]) => {\n          updateConnections(conns);\n          setModelOutput(undefined);\n        }}\n        deleteConnections={deleteConnections}\n        onRunModel={() => {\n          const output = run({\n            nodes: appState.nodes,\n            connections: appState.connections,\n            timeStepS: appState.timing.timeStepS,\n            totalTimeS: appState.timing.totalTimeS,\n          });\n          if (output.errors?.length) {\n            output.errors.forEach((error) => console.error(error.message));\n          }\n          setModelOutput(output);\n        }}\n      />\n    </StyledApp>\n  );\n}\n","import * as React from \"react\";\n\nexport default function useSessionStorageState<T>(\n  defaultValue: T,\n  key: string\n): [T, React.Dispatch<React.SetStateAction<T>>] {\n  const [value, setValue] = React.useState<T>(() => {\n    const localState = window.sessionStorage.getItem(key);\n    if (localState === null || localState === undefined) {\n      return defaultValue;\n    } else {\n      return JSON.parse(localState) as T;\n    }\n  });\n\n  React.useEffect(() => {\n    window.sessionStorage.setItem(key, JSON.stringify(value));\n  }, [key, value]);\n  return [value, setValue];\n}\n","import { useCallback } from \"react\";\nimport { AppConnection, AppNode } from \"../App\";\nimport { ModelOutput } from \"hotstuff-network\";\n\nexport default function useNodeConnectionUtils(\n  appNodes: AppNode[],\n  setAppNodes: (newNodes: AppNode[]) => void,\n  appConnections: AppConnection[],\n  setAppConnections: (newConnections: AppConnection[]) => void,\n  setModelOutput: (newModelOutput: ModelOutput | undefined) => void\n): [\n  (node: AppNode) => void,\n  (connection: AppConnection) => void,\n  (nodesToUpdate: AppNode[], clearActiveNodes?: boolean) => void,\n  (nodeIds: string[]) => void,\n  (connsToUpdate: AppConnection[]) => void,\n  (connIds: string[]) => void,\n  (activeNodeIds: string[]) => void,\n  () => void\n] {\n  const addNode = useCallback(\n    (node: AppNode) => {\n      const newNodes = appNodes.map((node) => ({\n        ...node,\n        isActive: false,\n      }));\n      newNodes.push({ ...node, isActive: true });\n      setAppNodes(newNodes);\n      setModelOutput(undefined);\n    },\n    [appNodes, setAppNodes, setModelOutput]\n  );\n\n  const addConnection = useCallback(\n    (connection: AppConnection) => {\n      setAppConnections([...appConnections, connection]);\n      setModelOutput(undefined);\n    },\n    [appConnections, setAppConnections, setModelOutput]\n  );\n\n  const updateNodes = useCallback(\n    (nodesToUpdate: AppNode[], clearActiveNodes = false) => {\n      const newNodes = appNodes.map((node) => {\n        const nodeToUpdate = nodesToUpdate.find(\n          (newNode) => newNode.id === node.id\n        );\n        if (nodeToUpdate) {\n          return nodeToUpdate;\n        } else {\n          if (clearActiveNodes) {\n            return { ...node, isActive: false };\n          } else {\n            return node;\n          }\n        }\n      });\n      setAppNodes(newNodes);\n\n      const newConnections = appConnections.map((prevConn) => {\n        const newSourceNode = nodesToUpdate.find(\n          (nodeToUpdate) => prevConn.source.id == nodeToUpdate.id\n        );\n        if (newSourceNode) {\n          return {\n            ...prevConn,\n            source: newSourceNode,\n            sourceName: newSourceNode.name,\n          };\n        }\n\n        const newTargetNode = nodesToUpdate.find(\n          (nodeToUpdate) => prevConn.target.id == nodeToUpdate.id\n        );\n        if (newTargetNode) {\n          return {\n            ...prevConn,\n            target: newTargetNode,\n            targetName: newTargetNode.name,\n          };\n        }\n        return prevConn;\n      });\n      setAppConnections(newConnections);\n    },\n    [appConnections, appNodes, setAppConnections, setAppNodes]\n  );\n\n  const deleteNodes = useCallback(\n    (nodeIds: string[]) => {\n      const newConnections = appConnections.filter(\n        (conn) =>\n          !nodeIds.includes(conn.source.id) && !nodeIds.includes(conn.target.id)\n      );\n      setAppConnections(newConnections);\n      setModelOutput(undefined);\n\n      const newNodes = appNodes.filter((node) => !nodeIds.includes(node.id));\n      setAppNodes(newNodes);\n    },\n    [appConnections, appNodes, setAppConnections, setAppNodes, setModelOutput]\n  );\n\n  const updateConnections = useCallback(\n    (connsToUpdate: AppConnection[]) => {\n      const connIdsToUpdate = connsToUpdate.map((conn) => conn.id);\n      const oldConns = appConnections.filter(\n        (conn) => !connIdsToUpdate.includes(conn.id)\n      );\n      setAppConnections([...connsToUpdate, ...oldConns]);\n      setModelOutput(undefined);\n    },\n    [appConnections, setAppConnections, setModelOutput]\n  );\n\n  const deleteConnections = useCallback(\n    (connIds: string[]) => {\n      setAppConnections(\n        appConnections.filter((conn) => !connIds.includes(conn.id))\n      );\n      setModelOutput(undefined);\n    },\n    [appConnections, setAppConnections, setModelOutput]\n  );\n\n  const setActiveNodes = useCallback(\n    (activeNodeIds: string[]) => {\n      setAppNodes(\n        appNodes.map((node) => ({\n          ...node,\n          isActive: activeNodeIds.includes(node.id),\n        }))\n      );\n    },\n    [appNodes, setAppNodes]\n  );\n\n  const clearActiveNodes = useCallback(() => {\n    const anyActiveNodes = appNodes.find((node) => node.isActive) !== undefined;\n    if (anyActiveNodes) {\n      setAppNodes(\n        appNodes.map((node) => ({\n          ...node,\n          isActive: false,\n        }))\n      );\n    }\n  }, [appNodes, setAppNodes]);\n\n  return [\n    addNode,\n    addConnection,\n    updateNodes,\n    deleteNodes,\n    updateConnections,\n    deleteConnections,\n    setActiveNodes,\n    clearActiveNodes,\n  ];\n}\n","import React, { useEffect } from \"react\";\nimport { AppNode } from \"../App\";\n\nexport default function useKeyDown(\n  keyboardActive: boolean,\n  appNodes: AppNode[],\n  setAppNodes: (newNodes: AppNode[]) => void,\n  deleteNodes: (nodeIds: string[]) => void\n): void {\n  useEffect(() => {\n    const onKeyDown = (event: React.KeyboardEvent | KeyboardEvent) => {\n      if (keyboardActive) {\n        // shift + A makes all nodes active\n        if (event.metaKey) {\n          if (event.keyCode === 65) {\n            event.preventDefault();\n            setAppNodes(\n              appNodes.map((node) => {\n                return { ...node, isActive: true };\n              })\n            );\n          }\n        }\n\n        // delete active nodes on back/del\n        if (event.key === \"Backspace\" || event.key === \"Delete\") {\n          event.preventDefault();\n          deleteNodes(\n            appNodes.filter((node) => node.isActive).map((node) => node.id)\n          );\n        }\n\n        // escape key makes all inactive\n        if (event.keyCode === 27) {\n          setAppNodes(appNodes.map((node) => ({ ...node, isActive: false })));\n        }\n      }\n    };\n    document.addEventListener(\"keydown\", onKeyDown);\n    return () => document.removeEventListener(\"keydown\", onKeyDown);\n  }, [appNodes, deleteNodes, keyboardActive, setAppNodes]);\n}\n","import { useCallback } from \"react\";\nimport {\n  determineColor,\n  determineRadius,\n  drawConnection,\n  drawNode,\n} from \"../components/Canvas/canvasUtils\";\nimport { AppConnection, AppNode } from \"../App\";\nimport { CanvasState } from \"../components/Canvas/Canvas\";\n\nexport default function useDraw(\n  appNodes: AppNode[],\n  appConnections: AppConnection[]\n): [\n  (context: CanvasRenderingContext2D) => void,\n  (canvasState: CanvasState) => void\n] {\n  const draw = useCallback(\n    (context: CanvasRenderingContext2D) => {\n      appNodes.forEach((node) => {\n        const nodeRadius = determineRadius(\n          node.capacitanceJPerDegK,\n          appNodes.map((node) => node.capacitanceJPerDegK)\n        );\n        const nodeColor = determineColor(\n          node.temperatureDegC,\n          appNodes.map((node) => node.temperatureDegC)\n        );\n        drawNode(\n          context,\n          node.name,\n          node.center,\n          nodeRadius,\n          nodeColor,\n          node.isActive,\n          node.isBoundary,\n          node.textDirection\n        );\n      });\n\n      appConnections.map((conn) => {\n        const { source, target, kind } = conn;\n        const sourceAppNode = appNodes.find((node) => node.id === source.id);\n        const targetAppNode = appNodes.find((node) => node.id === target.id);\n        if (sourceAppNode && targetAppNode) {\n          const sourceRadius = determineRadius(\n            sourceAppNode.capacitanceJPerDegK,\n            appNodes.map((node) => node.capacitanceJPerDegK)\n          );\n          const targetRadius = determineRadius(\n            targetAppNode.capacitanceJPerDegK,\n            appNodes.map((node) => node.capacitanceJPerDegK)\n          );\n          drawConnection(\n            context,\n            sourceAppNode.center,\n            sourceRadius,\n            targetAppNode.center,\n            targetRadius,\n            kind\n          );\n        }\n      });\n    },\n    [appConnections, appNodes]\n  );\n\n  const clearAndRedraw = useCallback(\n    (canvasState: CanvasState) => {\n      if (canvasState.context) {\n        canvasState.context.clearRect(\n          -canvasState.canvasViewState.offset.x,\n          -canvasState.canvasViewState.offset.y,\n          canvasState.canvasWidth / canvasState.canvasViewState.scale,\n          canvasState.canvasHeight / canvasState.canvasViewState.scale\n        );\n        draw(canvasState.context);\n      }\n    },\n    [draw]\n  );\n\n  return [draw, clearAndRedraw];\n}\n","import React, { useCallback } from \"react\";\nimport { CanvasState } from \"../components/Canvas/Canvas\";\nimport {\n  determineRadius,\n  intersectsCircle,\n  mouseToNodeCoords,\n  rotatedDirection,\n} from \"../components/Canvas/canvasUtils\";\nimport { AppNode } from \"../App\";\nimport { getNewAppNode } from \"../utils/nodeConnectionUtils\";\n\nexport default function useDoubleClick(\n  appNodes: AppNode[],\n  addNode: (node: AppNode) => void,\n  updateNodes: (nodes: AppNode[]) => void\n): (event: React.MouseEvent | MouseEvent, canvasState: CanvasState) => void {\n  return useCallback(\n    (event: React.MouseEvent | MouseEvent, canvasState: CanvasState) => {\n      event.preventDefault();\n      if (event.shiftKey) {\n        return;\n      }\n\n      const nodeCoordsOfMouse = mouseToNodeCoords(event, canvasState);\n\n      const doubleClickedNode = appNodes.find((node) => {\n        const nodeRadius = determineRadius(\n          node.capacitanceJPerDegK,\n          appNodes.map((node) => node.capacitanceJPerDegK)\n        );\n        return intersectsCircle(nodeCoordsOfMouse, node.center, nodeRadius);\n      });\n\n      if (doubleClickedNode) {\n        updateNodes([\n          {\n            ...doubleClickedNode,\n            textDirection: rotatedDirection(doubleClickedNode.textDirection),\n          },\n        ]);\n      } else {\n        const newAppNode = getNewAppNode(appNodes, nodeCoordsOfMouse);\n        addNode(newAppNode);\n      }\n    },\n    [addNode, appNodes, updateNodes]\n  );\n}\n","import { useLayoutEffect, useState } from \"react\";\n\nexport default function useWindowSize(): [[number, number], number] {\n  const [size, setSize] = useState<[number, number]>([0, 0]);\n  const [ratio, setRatio] = useState(1);\n\n  useLayoutEffect(() => {\n    function updateSize() {\n      setSize([window.innerWidth, window.innerHeight]);\n    }\n    function updateRatio() {\n      const { devicePixelRatio: ratio = 1 } = window;\n      setRatio(ratio);\n    }\n    window.addEventListener(\"resize\", updateSize);\n    window.addEventListener(\"resize\", updateRatio);\n    updateSize();\n    updateRatio();\n    return () => {\n      window.removeEventListener(\"resize\", updateSize);\n      window.removeEventListener(\"resize\", updateRatio);\n    };\n  }, []);\n  return [size, ratio];\n}\n","export function forceShowScrollbars(): void {\n  // Returns whether scrollbars show up on scrollable elements.\n  // This is false on Macs when the \"General > Show scroll bars\" setting is\n  // not set to \"Always\" (the default is \"When scrolling\"). The approach\n  // taken here is to create an element that will scroll and then compare\n  // its outer width (including scrollbars) to its inner width (excluding\n  // scrollbars).\n  function areScrollbarsVisible() {\n    const scrollableElem = document.createElement(\"div\"),\n      innerElem = document.createElement(\"div\");\n    scrollableElem.style.width = \"30px\";\n    scrollableElem.style.height = \"30px\";\n    scrollableElem.style.overflow = \"scroll\";\n    scrollableElem.style.borderWidth = \"0\";\n    innerElem.style.width = \"30px\";\n    innerElem.style.height = \"60px\";\n    scrollableElem.appendChild(innerElem);\n    document.body.appendChild(scrollableElem); // Elements only have width if they're in the layout\n    const diff = scrollableElem.offsetWidth - scrollableElem.clientWidth;\n    document.body.removeChild(scrollableElem);\n    return diff > 0;\n  }\n\n  window.addEventListener(\"load\", function () {\n    // Show scrollbars if they're hidden.\n    if (!areScrollbarsVisible()) {\n      document.body.classList.add(\"force-show-scrollbars\");\n    }\n  });\n}\n","import * as React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport { forceShowScrollbars } from \"./utils/scrollBar\";\n\nforceShowScrollbars();\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}