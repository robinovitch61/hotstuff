{"version":3,"sources":["config.ts","components/Sidebar/EditableTable/style.ts","components/Sidebar/EditableTable/TableHeader.tsx","components/Sidebar/EditableTable/cells/DropDownTableCell.tsx","components/Sidebar/style.tsx","components/Sidebar/EditableInput.tsx","components/Sidebar/EditableStringInput.tsx","components/Sidebar/EditableTable/cells/TextTableCell.tsx","components/Sidebar/EditableNumberInput.tsx","components/Sidebar/EditableTable/cells/NumericalTableCell.tsx","components/Sidebar/EditableTable/cells/BooleanTableCell.tsx","components/Sidebar/EditableTable/TableCell.tsx","components/Sidebar/EditableTable/hooks/useSortableTable.ts","components/Sidebar/EditableTable/DeleteCell.tsx","components/Sidebar/EditableTable/NodeTable/NodeTable.tsx","components/Sidebar/EditableTable/ConnectionTable/ConnectionTable.tsx","components/Tabs/Tabs.tsx","utils/pointUtils.ts","default.ts","components/Sidebar/ModelControls.tsx","components/Sidebar/Sidebar.tsx","components/Plot/LinePlot.tsx","components/Plot/Plot.tsx","components/Canvas/canvasUtils.ts","components/Canvas/hooks/usePanZoomCanvas.ts","components/Canvas/Controls.tsx","components/Canvas/Canvas.tsx","components/Canvas/hooks/useOnClickCanvas.ts","hooks/useDraw.ts","utils/nodeConnectionUtils.ts","hooks/useAddConnection.ts","hooks/useMoveNode.ts","hooks/useMultiSelect.ts","hooks/useOnMouseDown.ts","hooks/useClickAndDragElement.ts","style.tsx","App.tsx","hooks/useSessionStorageState.ts","hooks/useAppStateModifiers.ts","hooks/useNodeConnectionUtils.ts","hooks/useKeyDown.ts","hooks/useDoubleClick.ts","components/Canvas/hooks/useWindowSize.ts","hooks/useResizablePanels.ts","utils/scrollBar.ts","index.tsx"],"names":["config","defaultTempDegC","defaultCapJPerDegK","defaultPowerGenW","defaultTotalTimeSeconds","defaultTimeStepSeconds","defaultNodeRadius","defaultResistanceDegKPerW","defaultConnectionKind","newNodeNamePrefix","zoomSensitivity","minZoom","maxZoom","maxZoomDelta","minRadiusPx","maxRadiusPx","activeNodeOutlineWidthPx","tabHeightPx","plotHeightBufferPx","tableDeleteCellWidthPerc","tableDeleteCellMinWidthPx","plotMargin","left","right","top","bottom","plotDomainMargin","maxPlotPoints","multiSelectKey","StyledTableWrapper","styled","div","StyledTable","StyledTableBody","StyledAddButton","button","StyledRow","heightOffsetPx","isActive","StyledCell","width","minWidth","StyledDeleteCell","StyledHeaderWrapper","StyledColHeader","StyledColText","StyledSortIcon","TableHeader","props","columns","sortState","setSortState","sortIcon","direction","map","col","isSortedCol","key","onClick","sortDirection","minWidthPx","text","toString","style","cursor","StyledSelect","select","DropDownTableCell","value","setOption","id","onChange","event","newVal","target","selectedOption","options","find","option","undefined","onSelectOption","rowId","StyledInput","input","StyledEditor","height","StyledTables","heightFrac","StyledModelControlsWrapper","EditableInput","initialValue","onBlur","getNewValue","useState","setValue","handleOnBlur","useCallback","type","onKeyDown","EditableStringInput","TextTableCell","initialVal","getFloatVal","newValueText","newValueFloat","parseFloat","isNaN","EditableNumberInput","NumericalTableCell","StyledCheckbox","BooleanTableCell","initialIsActive","setIsActive","tabIndex","onKeyUp","showWhenActive","TableCell","row","initiallySetOption","onUpdateRow","length","useSortableTable","default","first","second","DeleteCell","onDeleteRow","defaultNodeSortState","nodeColumns","NodeTable","rows","onAddButton","sortByState","tableRows","sort","tableCell","defaultConnectionSortState","connectionTypes","ConnectionTable","onSelectNewSource","connection","conn","newSourceNode","nodes","node","source","sourceName","name","onSelectNewTarget","newTargetNode","targetName","onSelectNewConnectionType","rowToUpdate","kind","nodeOptions","connectionColumns","useMemo","activeNodeIds","filter","includes","cols","makeStyledCell","colKey","selectedSourceId","selectedTargetId","connections","otherConnections","some","c","filterConnectionOptions","opt","StyledTabsWrapper","StyledTabs","StyledTab","StyledTabText","StyledInnerContent","Tabs","activeIdx","setActiveIdx","tabs","tab","idx","className","topLeftRounded","_","component","ORIGIN","Object","freeze","x","y","diffPoints","p1","p2","scalePoint","scale","jerryNode","makeNode","temperatureDegC","capacitanceJPerDegK","powerGenW","isBoundary","jerryAppNode","center","textDirection","bedNode","bedAppNode","airNode","defaultNodes","defaultConnections","makeConnection","resistanceDegKPerW","defaultCanvasViewState","offset","defaultAppState","output","timing","timeStepS","totalTimeS","canvasViewState","savedCanvasState","panelSizes","editorWidthFraction","canvasHeightFraction","tableHeightFraction","StyledButton","StyledImport","StyledTimeControls","StyledTimeControl","StyledInputWrapper","StyledLabel","label","ModelControls","appState","setAppState","onRunModel","setTiming","stagedAppState","setStagedAppState","newTotalTimeS","newTimeStepS","navigator","clipboard","writeText","JSON","stringify","parse","Sidebar","onAddNode","onAddConnection","updateNodes","deleteNodes","updateConnections","deleteConnections","nodeTable","connectionTable","StyledToolTip","StyledToolTipTitle","StyledToolTipItem","color","StyledToolTipValue","after","CustomTooltip","active","payload","sortedPayload","a","b","item","LinePlot","plotDimensions","plotData","lines","xAxisKey","xLabel","yLabel","yDomain","unit","LineChart","margin","data","CartesianGrid","strokeDasharray","XAxis","dataKey","position","dy","YAxis","domain","angle","dx","Tooltip","content","Legend","layout","verticalAlign","align","wrapperStyle","paddingLeft","paddingBottom","colors","StyledCharts","StyledPlot","roundToNearestTenth","Math","round","plotShape","lowerMag","floor","log10","divisibleBy","pow","includeAll","timeSeriesS","tempsAtAllTimes","minTemp","maxTemp","heatTransfersAtAllTimes","minHeatTransfer","maxHeatTransfer","forEach","t","val","abs","temp","time","ht","nodeResults","nodeResult","tempVal","tempDegC","connectionResults","connectionResult","heatTransferVal","heatTransferW","push","Plot","modelHasOutput","modelOutput","res","emptyOutput","tempPlotData","tempDomain","heatTransferPlotData","heatTransferDomain","yTempDomain","ceil","yHeatTransferDomain","heatTransferLines","Line","stroke","activeDot","r","isAnimationActive","tempLines","tempPlot","heatTransferPlot","DEFAULT_RADIUS","drawNode","context","radius","save","beginPath","arc","PI","fillStyle","fill","closePath","restore","drawCircle","lineWidth","strokeStyle","drawCircleOutline","translate","rotate","moveTo","lineTo","h","newRadius","sin","acos","drawHashPattern","font","textMetrics","measureText","fillText","actualBoundingBoxAscent","actualBoundingBoxDescent","drawNodeName","drawConnection","sourceCenter","sourceRadius","targetCenter","targetRadius","start","end","startOffset","endOffset","headLength","headWidth","arrowGap","atan2","adjLength","sqrt","drawBidirectionalArrow","drawUnidirectionalArrow","intersectsCircle","point","circleCenter","deltaX","deltaY","calculateMousePositionOnElement","element","viewportMousePos","pageX","pageY","boundingRect","getBoundingClientRect","mouseToNodeCoords","canvasState","canvasMouse","canvas","mouse","determineRadius","capacitance","allCapacitances","min","max","StyledButtons","Controls","setCanvasViewState","setSavedCanvasState","StyledCanvasWrapper","StyledCanvas","cssWidth","cssHeight","Canvas","ref","onClickCanvas","canvasWidth","canvasHeight","devicePixelRatio","draw","onMouseDown","handleDoubleClick","savedCanvasViewState","setSavedCanvasViewState","setKeyboardActive","canvasRef","useRef","useEffect","handleClickOutside","keyBoardActive","current","contains","document","addEventListener","removeEventListener","setContext","mousePosRef","lastMousePosRef","lastCanvasViewState","mouseMove","newMousePos","mouseDiff","newCanvasViewState","mouseUp","startPan","useLayoutEffect","handleWheel","preventDefault","zoomDelta","zoom","newScale","mouseOffset","canvasElem","usePanZoomCanvas","renderCtx","getContext","onDoubleClick","useDraw","appNodes","appConnections","nodeRadius","nodeColor","temperature","allTemperatures","range","scaleDiverging","test","determineColor","sourceAppNode","targetAppNode","clearAndRedraw","clearRect","getNewAppNode","numNodesWithDefaultPrefix","startsWith","newNode","useAddConnection","addConnection","drawConnectionBeingMade","clickedNode","nodeCoordsOfMouse","drawArrowWithoutHead","drawConnWrapper","mouseUpOnNode","newConnection","getNewAppNodes","clickedMouseEvent","currentMouseEvent","multiSelectKeyPressed","activeNodes","offsetMouseToCenter","newClickedCenter","newClickedNode","newActiveNodes","distanceFromClickedCenter","useMultiSelect","setActiveNodes","boxStart","drawBox","globalAlpha","fillRect","rect","boxEnd","startBox","endBox","topLeft","bottomRight","bottomLeft","topRight","isInsideBox","useOnMouseDown","clearActiveNodes","makeNewConnection","moveNode","movedRef","mouseDownEvent","newNodes","mouseUpEvent","useMoveNode","multiSelect","defaultBehavior","altKey","onMouseUp","clientX","clientY","useClickAndDragElement","events","lastMousePos","onDragX","onDragY","onMouseMove","mouseMoveEvent","currentMousePos","diff","StyledApp","StyledDraggableBorder","StyledCanvasPlotBorder","StyledLeftRightBorder","StyledWorkspace","App","defaultValue","React","localState","window","sessionStorage","getItem","setItem","useSessionStorageState","prevState","newConnections","newCanvasState","newSavedCanvasState","newTiming","newModelOutput","useAppStateModifiers","setAppNodes","setAppConnections","setModelOutput","addNode","nodesToUpdate","prevConn","nodeToUpdate","nodeIds","connsToUpdate","connIdsToUpdate","oldConns","connIds","useNodeConnectionUtils","keyboardActive","metaKey","keyCode","useKeyDown","doubleClickedNode","newAppNode","useDoubleClick","size","setSize","ratio","setRatio","updateSize","innerWidth","innerHeight","updateRatio","useWindowSize","windowWidth","windowHeight","deltaYPx","prevAppState","deltaXPx","useResizablePanels","canvasPlotBorderRef","onMouseDownOnCanvasPlotBorder","leftRightBorderRef","onMouseDownOnLeftRightBorder","tableControlsBorderRef","onMouseDownOnTableControlsBorder","workspaceWidth","workspaceHeight","plotHeight","plotWidth","editorWidth","plot","addNodeInCenterOfCanvas","topLeftPoint","getCanvasCenter","createNewLogicalConnection","found","firstNode","secondNode","connectionForwardsExists","connectionBackwardsExists","getNewAppConnection","conns","run","errors","error","console","message","scrollableElem","createElement","innerElem","overflow","borderWidth","appendChild","body","offsetWidth","clientWidth","removeChild","areScrollbarsVisible","classList","add","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.3483c6d6.chunk.js","sourcesContent":["import { HSConnection } from \"hotstuff-network\";\n\ntype MouseEventKey = \"shiftKey\" | \"altKey\" | \"metaKey\" | \"ctrlKey\";\n\nconst config = {\n  defaultTempDegC: 23,\n  defaultCapJPerDegK: 10,\n  defaultPowerGenW: 0,\n  defaultTotalTimeSeconds: 600,\n  defaultTimeStepSeconds: 0.1,\n  defaultNodeRadius: 20,\n  defaultResistanceDegKPerW: 10,\n  defaultConnectionKind: \"bi\" as HSConnection[\"kind\"],\n  newNodeNamePrefix: \"New Node\",\n  zoomSensitivity: 1500, // bigger = less zoom per click\n  minZoom: 0.5,\n  maxZoom: 2,\n  maxZoomDelta: 2,\n  minRadiusPx: 20,\n  maxRadiusPx: 40,\n  activeNodeOutlineWidthPx: 5,\n  tabHeightPx: 25,\n  plotHeightBufferPx: 10,\n  tableDeleteCellWidthPerc: 0.1,\n  tableDeleteCellMinWidthPx: 40,\n  plotMargin: {\n    left: 10,\n    right: 20,\n    top: 20,\n    bottom: 20,\n  },\n  plotDomainMargin: 2,\n  maxPlotPoints: 400,\n  multiSelectKey: \"metaKey\" as MouseEventKey,\n};\n\nexport default config;\n","import styled from \"styled-components/macro\";\n\nexport const StyledTableWrapper = styled.div`\n  width: 100%;\n`;\n\nexport const StyledTable = styled.div`\n  width: 100%;\n  border-collapse: collapse;\n`;\n\nexport const StyledTableBody = styled.div`\n  width: 100%;\n`;\n\nexport const StyledAddButton = styled.button``;\n\nexport const StyledRow = styled.div<{\n  heightOffsetPx?: number;\n  isActive: boolean;\n}>`\n  display: inline-flex;\n  align-items: center;\n  min-width: 100%;\n  position: sticky;\n  top: ${({ heightOffsetPx }) =>\n    heightOffsetPx ? `${heightOffsetPx}px` : \"0px\"};\n  background: ${({ isActive }) =>\n    isActive ? \"rgba(112, 165, 255, 0.2)\" : \"none\"};\n`;\n\nexport const StyledCell = styled.div<{ width: number; minWidth?: number }>`\n  display: inline-flex;\n  justify-content: center;\n  align-items: center;\n  border: 1px solid #ddd;\n  height: 2em;\n  width: ${({ width }) => `${width * 100}%`};\n  min-width: ${({ minWidth }) => (!!minWidth ? `${minWidth}px` : \"none\")};\n`;\n\nexport const StyledDeleteCell = styled(StyledCell)`\n  cursor: pointer;\n  user-select: none;\n  min-width: 40px;\n\n  &:hover {\n    background: black;\n  }\n`;\n\nexport const StyledHeaderWrapper = styled.div<{ heightOffsetPx?: number }>`\n  display: flex;\n  width: 100%;\n  height: 100%;\n  position: sticky;\n  top: ${({ heightOffsetPx }) =>\n    heightOffsetPx ? `${heightOffsetPx}px` : \"0px\"};\n  z-index: 1;\n`;\n\nexport const StyledColHeader = styled.div<{ width: number; minWidth?: number }>`\n  display: inline-flex;\n  width: ${({ width }) => `${width * 100}%`};\n  min-width: ${({ minWidth }) => (!!minWidth ? `${minWidth}px` : \"none\")};\n  justify-content: center;\n  align-items: center;\n  font-weight: bold;\n  border: 1px solid lightgrey;\n  cursor: pointer;\n  user-select: none;\n  position: relative;\n  background: white;\n  border-bottom: 1px solid black;\n`;\n\nexport const StyledColText = styled.div`\n  font-size: 0.8em;\n  padding: 1em;\n`;\n\nexport const StyledSortIcon = styled.div`\n  position: absolute;\n  bottom: 0;\n  right: 50%;\n  transform: translate(50%);\n`;\n","import config from \"../../../config\";\nimport {\n  StyledColHeader,\n  StyledColText,\n  StyledHeaderWrapper,\n  StyledSortIcon,\n} from \"./style\";\nimport * as React from \"react\";\nimport { SortDirection, TableColumn, TableSortState } from \"./types\";\n\ntype TableHeaderProps<T> = {\n  columns: TableColumn<T>[];\n  sortState: TableSortState<T>;\n  setSortState: React.Dispatch<React.SetStateAction<TableSortState<T>>>;\n};\n\nfunction oppositeSortDirection(sortDirection: SortDirection): SortDirection {\n  return sortDirection === \"ASC\" ? \"DESC\" : \"ASC\";\n}\n\nexport default function TableHeader<T>(\n  props: TableHeaderProps<T>\n): React.ReactElement {\n  const { columns, sortState, setSortState } = props;\n\n  const sortIcon = !sortState\n    ? \"\"\n    : sortState.direction === \"ASC\"\n    ? \"\\u25B2\"\n    : \"\\u25BC\";\n\n  return (\n    <StyledHeaderWrapper heightOffsetPx={config.tabHeightPx}>\n      {columns.map((col) => {\n        const isSortedCol = sortState && sortState.key === col.key;\n        const onClick = () => {\n          setSortState({\n            key: col.key,\n            direction:\n              !isSortedCol || !sortState\n                ? \"ASC\"\n                : oppositeSortDirection(sortState.direction),\n          });\n        };\n\n        return (\n          <StyledColHeader\n            key={col.key.toString()}\n            onClick={onClick}\n            width={col.width}\n            minWidth={col.minWidthPx}\n          >\n            <StyledColText>{col.text}</StyledColText>\n            <StyledSortIcon>{isSortedCol ? sortIcon : \"\"}</StyledSortIcon>\n          </StyledColHeader>\n        );\n      })}\n      <StyledColHeader\n        width={config.tableDeleteCellWidthPerc}\n        minWidth={config.tableDeleteCellMinWidthPx}\n        style={{ cursor: \"unset\" }}\n      />\n    </StyledHeaderWrapper>\n  );\n}\n","import * as React from \"react\";\nimport styled from \"styled-components/macro\";\nimport { CellOption } from \"../types\";\n\nconst StyledSelect = styled.select`\n  display: inline-flex;\n  width: 100%;\n  height: 100%;\n  background: unset;\n`;\n\nexport type DropDownTableCellProps = {\n  rowId: string;\n  options: CellOption[];\n  setOption?: CellOption;\n  onSelectOption: (id: string, option: CellOption) => void;\n  optionsFilter?: (option: CellOption) => CellOption[];\n};\n\nexport default function DropDownTableCell(\n  props: DropDownTableCellProps\n): React.ReactElement {\n  function handleChange(event: React.ChangeEvent<HTMLSelectElement>) {\n    const newVal = event.target.value;\n\n    const selectedOption = props.options.find((option) => option.id === newVal);\n\n    if (selectedOption !== undefined) {\n      props.onSelectOption(props.rowId, selectedOption);\n    }\n  }\n\n  return (\n    <StyledSelect value={props.setOption?.id} onChange={handleChange}>\n      {props.options.map((option) => (\n        <option key={option.id} value={option.id}>\n          {option.text}\n        </option>\n      ))}\n    </StyledSelect>\n  );\n}\n","import styled from \"styled-components/macro\";\n\nexport const StyledInput = styled.input`\n  display: inline-block;\n  border: none;\n  width: 100%;\n  height: 100%;\n  text-align: center;\n  padding: 0;\n  background: unset;\n\n  &::-webkit-inner-spin-button,\n  &::-webkit-outer-spin-button {\n    -webkit-appearance: none;\n    margin: 0;\n  }\n`;\n\nexport const StyledEditor = styled.div<{ width: number; height: number }>`\n  height: ${(props) => props.height}px;\n  width: ${(props) => props.width}px;\n  border-left: 3px solid black;\n`;\n\nexport const StyledTables = styled.div<{ heightFrac: number }>`\n  display: inline-flex;\n  width: 100%;\n  height: ${(props) => props.heightFrac * 100}%;\n`;\n\nexport const StyledModelControlsWrapper = styled.div<{ heightFrac: number }>`\n  display: inline-flex;\n  width: 100%;\n  height: ${(props) => props.heightFrac * 100}%;\n`;\n","import React, { useCallback, useState } from \"react\";\nimport { StyledInput } from \"./style\";\n\ninterface CanBeMadeString {\n  toString: () => string;\n}\n\ntype EditableInputProps<T> = {\n  initialValue: T;\n  onBlur: (value: T) => void;\n  getNewValue: (event: React.ChangeEvent<HTMLInputElement>) => T | undefined;\n};\n\nexport default function EditableInput<T extends CanBeMadeString>(\n  props: EditableInputProps<T>\n): React.ReactElement {\n  const { initialValue, onBlur, getNewValue } = props;\n\n  const [value, setValue] = useState<string>(initialValue.toString());\n\n  function handleOnChange(event: React.ChangeEvent<HTMLInputElement>) {\n    const newVal = event.target.value;\n    if (newVal !== undefined) {\n      setValue(newVal);\n    }\n  }\n\n  const handleOnBlur = useCallback(\n    (event: React.ChangeEvent<HTMLInputElement>) => {\n      const newVal = getNewValue(event);\n      if (event.target.value === initialValue.toString()) {\n        return;\n      } else if (newVal !== undefined) {\n        setValue(newVal.toString());\n        onBlur(newVal);\n      } else {\n        setValue(initialValue.toString());\n        onBlur(initialValue);\n      }\n    },\n    [getNewValue, initialValue, onBlur]\n  );\n\n  return (\n    <StyledInput\n      type=\"text\"\n      value={value}\n      onChange={handleOnChange}\n      onBlur={handleOnBlur}\n      // TODO LEO\n      onKeyDown={(event: React.KeyboardEvent) => {\n        if (event.key === \"Escape\") {\n        } else if (event.key === \"Enter\") {\n        }\n      }}\n    />\n  );\n}\n","import React from \"react\";\nimport EditableInput from \"./EditableInput\";\n\ntype EditableStringInputProps = {\n  initialValue: string;\n  onBlur: (value: string) => void;\n};\n\nexport default function EditableStringInput(\n  props: EditableStringInputProps\n): React.ReactElement {\n  return (\n    <EditableInput<string>\n      key={props.initialValue}\n      initialValue={props.initialValue}\n      onBlur={props.onBlur}\n      getNewValue={(event: React.ChangeEvent<HTMLInputElement>) =>\n        event.target.value\n      }\n    />\n  );\n}\n","import React from \"react\";\nimport EditableStringInput from \"../../EditableStringInput\";\n\nexport type TextTableCellProps = {\n  initialVal: string;\n  onBlur: (newValue: string) => void;\n};\n\nexport default function TextTableCell(\n  props: TextTableCellProps\n): React.ReactElement {\n  return (\n    <EditableStringInput\n      initialValue={props.initialVal}\n      onBlur={props.onBlur}\n    />\n  );\n}\n","import React from \"react\";\nimport EditableInput from \"./EditableInput\";\n\nfunction getFloatVal(\n  event: React.ChangeEvent<HTMLInputElement>\n): number | undefined {\n  const newValueText = event.target.value;\n  // things like 123.3abc will still parse as 123.3\n  const newValueFloat = parseFloat(event.target.value);\n  if (newValueText === undefined || isNaN(newValueFloat)) {\n    return undefined;\n  }\n  return newValueFloat;\n}\n\ntype EditableNumberInputProps = {\n  initialValue: number;\n  onBlur: (value: number) => void;\n};\n\nexport default function EditableNumberInput(\n  props: EditableNumberInputProps\n): React.ReactElement {\n  return (\n    <EditableInput<number>\n      key={props.initialValue}\n      initialValue={props.initialValue}\n      onBlur={props.onBlur}\n      getNewValue={getFloatVal}\n    />\n  );\n}\n","import React from \"react\";\nimport EditableNumberInput from \"../../EditableNumberInput\";\n\nexport type NumericalTableCellProps = {\n  initialVal: number;\n  onBlur: (newValue: number) => void;\n};\n\nexport default function NumericalTableCell(\n  props: NumericalTableCellProps\n): React.ReactElement {\n  return (\n    <EditableNumberInput\n      initialValue={props.initialVal}\n      onBlur={props.onBlur}\n    />\n  );\n}\n","import React, { useState } from \"react\";\nimport styled from \"styled-components/macro\";\n\nconst StyledCheckbox = styled.div`\n  display: inline-flex;\n  width: 100%;\n  height: 100%;\n  justify-content: center;\n  align-items: center;\n  cursor: pointer;\n  user-select: none;\n`;\n\nexport type BooleanTableCellProps = {\n  initialIsActive?: boolean;\n  onClick: (isActive: boolean) => void;\n  showWhenActive: string;\n};\n\nexport default function BooleanTableCell(\n  props: BooleanTableCellProps\n): React.ReactElement {\n  const [isActive, setIsActive] = useState<boolean>(\n    props.initialIsActive !== undefined ? props.initialIsActive : false\n  );\n\n  return (\n    <StyledCheckbox\n      tabIndex={0}\n      onKeyUp={(event: React.KeyboardEvent) => {\n        if (event.key === \"Enter\") {\n          setIsActive(!isActive);\n          props.onClick(!isActive);\n        }\n      }}\n      onClick={() => {\n        setIsActive(!isActive);\n        props.onClick(!isActive);\n      }}\n    >\n      &nbsp;{isActive ? props.showWhenActive : \"\"}\n    </StyledCheckbox>\n  );\n}\n","import * as React from \"react\";\nimport DropDownTableCell from \"./cells/DropDownTableCell\";\nimport TextTableCell from \"./cells/TextTableCell\";\nimport NumericalTableCell from \"./cells/NumericalTableCell\";\nimport BooleanTableCell from \"./cells/BooleanTableCell\";\nimport { CellOption, TableColumn } from \"./types\";\n\ntype TableCellType = {\n  id: string;\n};\n\ntype TableCellProps<T extends TableCellType> = {\n  row: T;\n  col: TableColumn<T>;\n  options?: CellOption[];\n  initiallySetOption?: CellOption;\n  onUpdateRow: (row: T) => void;\n};\n\nexport default function TableCell<T extends TableCellType>(\n  props: TableCellProps<T>\n): React.ReactElement {\n  const { row, col, options, initiallySetOption, onUpdateRow } = props;\n  const initialVal = row[col.key];\n\n  if (!!options && options.length > 0 && col.onSelectOption) {\n    return (\n      <DropDownTableCell\n        key={row.id}\n        rowId={row.id}\n        options={options}\n        setOption={initiallySetOption}\n        onSelectOption={col.onSelectOption}\n      />\n    );\n  } else if (typeof initialVal === \"string\") {\n    return (\n      <TextTableCell\n        initialVal={initialVal}\n        onBlur={(newVal) => onUpdateRow({ ...row, [col.key]: newVal })}\n      />\n    );\n  } else if (\n    typeof initialVal === \"number\" &&\n    typeof row[col.key] === \"number\"\n  ) {\n    return (\n      <NumericalTableCell\n        initialVal={initialVal}\n        onBlur={(newVal) => onUpdateRow({ ...row, [col.key]: newVal })}\n      />\n    );\n  } else if (typeof initialVal === \"boolean\") {\n    return (\n      <BooleanTableCell\n        key={initialVal.toString()}\n        initialIsActive={initialVal}\n        onClick={(newVal) => onUpdateRow({ ...row, [col.key]: newVal })}\n        showWhenActive={\"✅\"}\n      />\n    );\n  } else {\n    return <></>;\n  }\n}\n","import * as React from \"react\";\nimport { useState } from \"react\";\nimport { TableSortState } from \"../types\";\n\ninterface IDHavingThing {\n  id: string;\n}\n\nexport default function useSortableTable<T extends IDHavingThing>(props: {\n  default: TableSortState<T>;\n}): [\n  TableSortState<T>,\n  React.Dispatch<React.SetStateAction<TableSortState<T>>>,\n  (first: T, second: T) => number\n] {\n  const [sortState, setSortState] = useState<TableSortState<T>>(props.default);\n\n  function sortByState(first: T, second: T): number {\n    if (sortState.direction === \"ASC\") {\n      if (first[sortState.key] > second[sortState.key]) {\n        return 1;\n      } else if (first[sortState.key] === second[sortState.key]) {\n        return first.id > second.id ? 1 : -1;\n      } else {\n        return -1;\n      }\n    } else {\n      if (first[sortState.key] > second[sortState.key]) {\n        return -1;\n      } else if (first[sortState.key] === second[sortState.key]) {\n        return first.id > second.id ? 1 : -1;\n      } else {\n        return 1;\n      }\n    }\n  }\n\n  return [sortState, setSortState, sortByState];\n}\n","import React from \"react\";\nimport config from \"../../../config\";\nimport { StyledDeleteCell } from \"./style\";\n\ntype DeleteCellProps<T> = {\n  row: T;\n  onDeleteRow: (row: T) => void;\n};\n\nexport default function DeleteCell<T>(\n  props: DeleteCellProps<T>\n): React.ReactElement {\n  return (\n    <StyledDeleteCell\n      tabIndex={0}\n      onKeyUp={(event: React.KeyboardEvent) => {\n        if (event.key === \"Enter\") {\n          props.onDeleteRow(props.row);\n        }\n      }}\n      width={config.tableDeleteCellWidthPerc}\n      minWidth={config.tableDeleteCellMinWidthPx}\n      onClick={() => props.onDeleteRow(props.row)}\n    >\n      ❌\n    </StyledDeleteCell>\n  );\n}\n","import React from \"react\";\nimport config from \"../../../../config\";\nimport { AppNode } from \"../../../../App\";\nimport {\n  StyledCell,\n  StyledRow,\n  StyledTable,\n  StyledTableBody,\n  StyledTableWrapper,\n  StyledAddButton,\n} from \"../style\";\nimport { TableColumn, TableSortState } from \"../types\";\nimport TableHeader from \"../TableHeader\";\nimport TableCell from \"../TableCell\";\nimport useSortableTable from \"../hooks/useSortableTable\";\nimport DeleteCell from \"../DeleteCell\";\n\ntype NodeTableColumn = TableColumn<AppNode>;\n\nconst defaultNodeSortState: TableSortState<AppNode> = {\n  key: \"name\",\n  direction: \"ASC\",\n};\n\nconst nodeColumns: NodeTableColumn[] = [\n  {\n    key: \"name\",\n    text: \"Name\",\n    width: 0.3,\n    minWidthPx: 100,\n  },\n  {\n    key: \"temperatureDegC\",\n    text: \"Temp [degC]\",\n    width: 0.15,\n    minWidthPx: 100,\n  },\n  {\n    key: \"capacitanceJPerDegK\",\n    text: \"Capacitance [J/degK]\",\n    width: 0.15,\n    minWidthPx: 100,\n  },\n  {\n    key: \"powerGenW\",\n    text: \"Power Gen [W]\",\n    width: 0.15,\n    minWidthPx: 80,\n  },\n  {\n    key: \"isBoundary\",\n    text: \"Boundary?\",\n    width: 0.15,\n    minWidthPx: 80,\n  },\n];\n\ntype NodeTableProps = {\n  rows: AppNode[];\n  onUpdateRow: (row: AppNode) => void;\n  onDeleteRow: (row: AppNode) => void;\n  onAddButton: () => void;\n};\n\nexport default function NodeTable(props: NodeTableProps): React.ReactElement {\n  const { rows, onUpdateRow, onDeleteRow, onAddButton } = props;\n\n  const [sortState, setSortState, sortByState] = useSortableTable<AppNode>({\n    default: defaultNodeSortState,\n  });\n\n  const sortedRows = rows.sort(sortByState);\n\n  const tableRows = sortedRows.map((row) => {\n    return (\n      <StyledRow\n        key={row.id}\n        heightOffsetPx={config.tabHeightPx}\n        isActive={row.isActive}\n      >\n        {nodeColumns.map((col) => {\n          const tableCell = (\n            <TableCell<AppNode> row={row} col={col} onUpdateRow={onUpdateRow} />\n          );\n          return (\n            <StyledCell\n              key={col.key}\n              width={col.width}\n              minWidth={col.minWidthPx}\n            >\n              {tableCell}\n            </StyledCell>\n          );\n        })}\n        <DeleteCell row={row} onDeleteRow={() => onDeleteRow(row)} />\n      </StyledRow>\n    );\n  });\n\n  return (\n    <StyledTableWrapper>\n      <StyledTable>\n        <TableHeader<AppNode>\n          columns={nodeColumns}\n          sortState={sortState}\n          setSortState={setSortState}\n        />\n        <StyledTableBody>{tableRows}</StyledTableBody>\n        <StyledAddButton onClick={onAddButton}>+</StyledAddButton>\n      </StyledTable>\n    </StyledTableWrapper>\n  );\n}\n","import React, { useCallback, useMemo } from \"react\";\nimport config from \"../../../../config\";\nimport { AppConnection, AppNode } from \"../../../../App\";\nimport {\n  StyledAddButton,\n  StyledCell,\n  StyledRow,\n  StyledTable,\n  StyledTableBody,\n  StyledTableWrapper,\n} from \"../style\";\nimport { CellOption, TableColumn, TableSortState } from \"../types\";\nimport TableHeader from \"../TableHeader\";\nimport TableCell from \"../TableCell\";\nimport useSortableTable from \"../hooks/useSortableTable\";\nimport { ConnectionKind } from \"../../../types\";\nimport DeleteCell from \"../DeleteCell\";\n\nexport type AppConnectionTable = AppConnection & { isActive: boolean };\ntype ConnectionTableColumn = TableColumn<AppConnection>;\n\nconst defaultConnectionSortState: TableSortState<AppConnectionTable> = {\n  key: \"sourceName\",\n  direction: \"ASC\",\n};\n\nconst connectionTypes: CellOption[] = [\n  {\n    id: \"bi\",\n    text: \"Bidirectional\",\n  },\n  {\n    id: \"uni\",\n    text: \"Unidirectional\",\n  },\n  {\n    id: \"rad\",\n    text: \"Radiative\",\n  },\n];\n\nfunction filterConnectionOptions(\n  colKey: string,\n  options: CellOption[],\n  selectedSourceId: string,\n  selectedTargetId: string,\n  connections: AppConnection[]\n): CellOption[] {\n  const otherConnections = connections.filter(\n    (conn) =>\n      !(\n        conn.source.id === selectedSourceId &&\n        conn.target.id === selectedTargetId\n      )\n  );\n\n  if (colKey === \"sourceName\") {\n    // options for source node\n    const noSelfConnectionOptions = options.filter(\n      (option) => option.id !== selectedTargetId\n    );\n    // for each source option, there is no other connection that already matches the source -> target or target -> source\n    return noSelfConnectionOptions.filter((option) => {\n      return !otherConnections.some(\n        (c) =>\n          (c.source.id === option.id && c.target.id === selectedTargetId) ||\n          (c.source.id === selectedTargetId && c.target.id === option.id)\n      );\n    });\n  } else if (colKey === \"targetName\") {\n    // options for target node\n    const noSelfConnectionOptions = options.filter(\n      (option) => option.id !== selectedSourceId\n    );\n    // for each target option, there is no other connection that already matches the source -> target or target -> source\n    return noSelfConnectionOptions.filter((option) => {\n      return !otherConnections.some(\n        (c) =>\n          (c.source.id === selectedSourceId && c.target.id === option.id) ||\n          (c.source.id === option.id && c.target.id === selectedSourceId)\n      );\n    });\n  } else {\n    return options;\n  }\n}\n\ntype ConnectionTableProps = {\n  rows: AppConnection[];\n  nodes: AppNode[];\n  onUpdateRow: (row: AppConnection) => void;\n  onDeleteRow: (row: AppConnection) => void;\n  onAddButton: () => void;\n};\n\nexport default function ConnectionTable(\n  props: ConnectionTableProps\n): React.ReactElement {\n  const [sortState, setSortState, sortByState] =\n    useSortableTable<AppConnectionTable>({\n      default: defaultConnectionSortState,\n    });\n\n  const onSelectNewSource = useCallback(\n    (id: string, option: CellOption) => {\n      const connection = props.rows.find((conn) => conn.id === id);\n      const newSourceNode = props.nodes.find((node) => node.id === option.id);\n      if (\n        !connection ||\n        !newSourceNode ||\n        newSourceNode.id === connection.target.id\n      ) {\n        return;\n      }\n      props.onUpdateRow({\n        ...connection,\n        source: newSourceNode,\n        sourceName: newSourceNode.name,\n      });\n    },\n    [props]\n  );\n\n  const onSelectNewTarget = useCallback(\n    (id: string, option: CellOption) => {\n      const connection = props.rows.find((conn) => conn.id === id);\n      const newTargetNode = props.nodes.find((node) => node.id === option.id);\n      if (\n        !connection ||\n        !newTargetNode ||\n        newTargetNode.id === connection.source.id\n      ) {\n        return;\n      }\n      props.onUpdateRow({\n        ...connection,\n        target: newTargetNode,\n        targetName: newTargetNode.name,\n      });\n    },\n    [props]\n  );\n\n  const onSelectNewConnectionType = useCallback(\n    (id: string, option: CellOption) => {\n      const rowToUpdate = props.rows.find((conn) => conn.id === id);\n      if (rowToUpdate) {\n        props.onUpdateRow({\n          ...rowToUpdate,\n          kind: option.id as ConnectionKind,\n        });\n      }\n    },\n    [props]\n  );\n\n  const nodeOptions: CellOption[] = props.nodes.map((node) => ({\n    id: node.id,\n    text: node.name,\n  }));\n\n  const connectionColumns: ConnectionTableColumn[] = useMemo(\n    () => [\n      {\n        text: \"Source\",\n        key: \"sourceName\",\n        width: 0.3,\n        minWidthPx: 100,\n        options: nodeOptions,\n        onSelectOption: onSelectNewSource,\n      },\n      {\n        text: \"Target\",\n        key: \"targetName\",\n        width: 0.3,\n        minWidthPx: 100,\n        options: nodeOptions,\n        onSelectOption: onSelectNewTarget,\n      },\n      {\n        text: \"Resistance [degK/W]\",\n        key: \"resistanceDegKPerW\",\n        width: 0.2,\n        minWidthPx: 100,\n      },\n      {\n        text: \"Kind\",\n        key: \"kind\",\n        width: 0.2,\n        minWidthPx: 100,\n        options: connectionTypes,\n        onSelectOption: onSelectNewConnectionType,\n      },\n    ],\n    [\n      nodeOptions,\n      onSelectNewConnectionType,\n      onSelectNewSource,\n      onSelectNewTarget,\n    ]\n  );\n\n  const activeNodeIds = props.nodes\n    .filter((node) => node.isActive)\n    .map((node) => node.id);\n\n  const sortedRowsWithActiveInfo: AppConnectionTable[] = props.rows\n    .map((row) => {\n      return {\n        ...row,\n        isActive:\n          activeNodeIds.includes(row.source.id) ||\n          activeNodeIds.includes(row.target.id),\n      };\n    })\n    .sort(sortByState);\n\n  const tableRows = sortedRowsWithActiveInfo.map((row) => {\n    const cols = connectionColumns.map((col) => {\n      function makeStyledCell(tableCell: React.ReactElement) {\n        return (\n          <StyledCell key={col.key} width={col.width} minWidth={col.minWidthPx}>\n            {tableCell}\n          </StyledCell>\n        );\n      }\n\n      if (!!col.options) {\n        const setOption = col.options?.find(\n          (option) => option.id === row[col.key] || option.text === row[col.key]\n        );\n        const options = !!setOption\n          ? [\n              setOption,\n              ...filterConnectionOptions(\n                col.key,\n                col.options || [],\n                row.source.id,\n                row.target.id,\n                props.rows\n              ).filter((opt) => opt.id !== setOption.id),\n            ]\n          : [];\n\n        const tableCell = (\n          <TableCell<AppConnectionTable>\n            row={row}\n            col={col}\n            options={options}\n            initiallySetOption={setOption}\n            onUpdateRow={props.onUpdateRow}\n          />\n        );\n        return makeStyledCell(tableCell);\n      } else {\n        return makeStyledCell(\n          <TableCell<AppConnectionTable>\n            row={row}\n            col={col}\n            onUpdateRow={props.onUpdateRow}\n          />\n        );\n      }\n    });\n\n    return (\n      <StyledRow\n        key={row.id}\n        heightOffsetPx={config.tabHeightPx}\n        isActive={row.isActive}\n      >\n        {cols}\n        <DeleteCell row={row} onDeleteRow={() => props.onDeleteRow(row)} />\n      </StyledRow>\n    );\n  });\n\n  return (\n    <StyledTableWrapper>\n      <StyledTable>\n        <TableHeader<AppConnectionTable>\n          columns={connectionColumns}\n          sortState={sortState}\n          setSortState={setSortState}\n        />\n        <StyledTableBody>{tableRows}</StyledTableBody>\n        <StyledAddButton onClick={props.onAddButton}>+</StyledAddButton>\n      </StyledTable>\n    </StyledTableWrapper>\n  );\n}\n","import React, { useState } from \"react\";\nimport styled from \"styled-components/macro\";\nimport config from \"../../config\";\n\nconst StyledTabsWrapper = styled.div`\n  display: inline-flex;\n  width: 100%;\n  flex-direction: column;\n  overflow: auto;\n  position: relative;\n`;\n\nconst StyledTabs = styled.div`\n  display: inline-flex;\n  width: 100%;\n  height: ${config.tabHeightPx}px;\n  justify-content: space-evenly;\n  position: sticky;\n  top: 0;\n  background: white;\n  box-sizing: border-box;\n  z-index: 1;\n`;\n\nconst StyledTab = styled.div<{ width: number }>`\n  display: inline-flex;\n  width: ${({ width }) => `${width * 100}%`};\n  cursor: pointer;\n  text-decoration: none;\n  align-items: center;\n  //background: lightgray;\n  //background: rgb(85, 9, 121);\n  background: linear-gradient(\n    90deg,\n    rgba(46, 228, 233, 1) 0%,\n    rgba(46, 228, 233, 1) 40%,\n    rgba(255, 0, 230, 1) 80%,\n    rgba(85, 9, 121, 1) 100%\n  );\n  border-radius: 5px 5px 0 0;\n  border: 1px solid black;\n  border-bottom: 2px solid black;\n\n  &:hover,\n  &:focus {\n    opacity: 0.7;\n  }\n`;\n\nconst StyledTabText = styled.div`\n  font-size: 1.1em;\n  padding: 0.2em 0.5em;\n\n  &.active {\n    font-weight: bold;\n  }\n`;\n\nconst StyledInnerContent = styled.div<{ topLeftRounded: boolean }>`\n  background: white;\n  position: relative;\n`;\n\ntype Tab = {\n  text: string;\n  component: React.ReactElement;\n  width: number; // between 0 and 1\n};\n\nexport type TabsProps = {\n  tabs: Tab[];\n};\n\nexport default function Tabs(props: TabsProps): React.ReactElement {\n  const [activeIdx, setActiveIdx] = useState(0);\n\n  return (\n    <StyledTabsWrapper>\n      {props.tabs.length > 1 && (\n        <StyledTabs>\n          {props.tabs.map((tab, idx) => {\n            return (\n              <StyledTab\n                key={tab.text}\n                tabIndex={0}\n                onClick={() => setActiveIdx(idx)}\n                onKeyUp={(event: React.KeyboardEvent) => {\n                  if (event.key === \"Enter\") {\n                    setActiveIdx(idx);\n                  }\n                }}\n                width={tab.width}\n              >\n                <StyledTabText className={idx === activeIdx ? \"active\" : \"\"}>\n                  {tab.text}\n                </StyledTabText>\n              </StyledTab>\n            );\n          })}\n        </StyledTabs>\n      )}\n\n      <StyledInnerContent topLeftRounded={props.tabs.length <= 1}>\n        {props.tabs.filter((_, idx) => idx === activeIdx)[0].component}\n      </StyledInnerContent>\n    </StyledTabsWrapper>\n  );\n}\n","export type Point = {\n  x: number;\n  y: number;\n};\n\nexport const ORIGIN = Object.freeze({ x: 0, y: 0 });\n\nexport function makePoint(x: number, y: number): Point {\n  return { x, y };\n}\n\nexport function addPoints(p1: Point, p2: Point): Point {\n  return { x: p1.x + p2.x, y: p1.y + p2.y };\n}\n\nexport function diffPoints(p1: Point, p2: Point): Point {\n  return { x: p1.x - p2.x, y: p1.y - p2.y };\n}\n\nexport function scalePoint(p1: Point, scale: number): Point {\n  return { x: p1.x / scale, y: p1.y / scale };\n}\n\n// export function distanceBetweenPoints(p1: Point, p2: Point): number {\n//   return Math.sqrt(Math.pow(p2.x - p1.x, 2) + Math.pow(p2.y - p1.y, 2));\n// }\n","import { makeConnection, makeNode } from \"hotstuff-network\";\nimport { AppConnection, AppNode, PanelSizes, Timing } from \"./App\";\nimport config from \"./config\";\nimport { ORIGIN } from \"./utils/pointUtils\";\nimport { CanvasViewState } from \"./components/Canvas/Canvas\";\n\nconst jerryNode = makeNode({\n  name: \"Jerry the Cat\",\n  temperatureDegC: 38.3,\n  capacitanceJPerDegK: 16.2e3, // 3.6kJ/kg/degK * 4.5kg\n  powerGenW: 100, // ??\n  isBoundary: false,\n});\nconst jerryAppNode: AppNode = {\n  ...jerryNode,\n  center: { x: 200, y: 150 },\n  isActive: false,\n  textDirection: \"L\",\n};\n\nconst bedNode = makeNode({\n  name: \"Heated Cat Bed\",\n  temperatureDegC: 40, // ??\n  capacitanceJPerDegK: 10e3,\n  powerGenW: 4,\n  isBoundary: false,\n});\nconst bedAppNode: AppNode = {\n  ...bedNode,\n  center: { x: 500, y: 150 },\n  isActive: false,\n  textDirection: \"R\",\n};\n\nconst airNode = makeNode({\n  name: \"Apartment Air\",\n  temperatureDegC: 22.5,\n  capacitanceJPerDegK: 6e5, // 1.0035J/g/degK * 600,000g\n  powerGenW: 0,\n  isBoundary: false,\n});\nconst airAppNode: AppNode = {\n  ...airNode,\n  center: { x: 350, y: 300 },\n  isActive: false,\n  textDirection: \"D\",\n};\n\nexport const defaultNodes: AppNode[] = [jerryAppNode, bedAppNode, airAppNode];\n\nexport const defaultConnections: AppConnection[] = [\n  {\n    ...makeConnection({\n      source: jerryNode,\n      target: bedNode,\n      resistanceDegKPerW: 2.5, // 0.01m / 0.1m^2 / 0.04W/m/degK\n      kind: \"bi\",\n    }),\n    sourceName: jerryNode.name,\n    targetName: bedNode.name,\n  },\n  {\n    ...makeConnection({\n      source: jerryNode,\n      target: airNode,\n      resistanceDegKPerW: 0.33, // 1 / 0.3m^2 / 10W/m^2/degK\n      kind: \"bi\",\n    }),\n    sourceName: jerryNode.name,\n    targetName: airNode.name,\n  },\n  {\n    ...makeConnection({\n      source: bedNode,\n      target: airNode,\n      resistanceDegKPerW: 0.33, // 1 / 0.3m^2 / 5W/m^2/degK\n      kind: \"bi\",\n    }),\n    sourceName: bedNode.name,\n    targetName: airNode.name,\n  },\n];\n\nexport const defaultTiming: Timing = {\n  timeStepS: config.defaultTimeStepSeconds,\n  totalTimeS: config.defaultTotalTimeSeconds,\n};\n\nexport const defaultCanvasViewState: CanvasViewState = {\n  offset: ORIGIN,\n  scale: 1,\n};\n\nexport const defaultPanelSizes: PanelSizes = {\n  editorWidthFraction: 1 - 1 / 1.61803398875,\n  canvasHeightFraction: 1 / 1.61803398875,\n  tableHeightFraction: 0.5,\n};\n\nexport const defaultAppState = {\n  output: undefined,\n  timing: defaultTiming,\n  nodes: defaultNodes,\n  connections: defaultConnections,\n  canvasViewState: defaultCanvasViewState,\n  savedCanvasState: defaultCanvasViewState,\n  panelSizes: defaultPanelSizes,\n};\n","import * as React from \"react\";\nimport { useState } from \"react\";\nimport styled from \"styled-components/macro\";\nimport EditableNumberInput from \"./EditableNumberInput\";\nimport { AppState, Timing } from \"../../App\";\nimport { defaultAppState } from \"../../default\";\n\nconst StyledModelControlsWrapper = styled.div`\n  display: flex;\n  flex-direction: column;\n  height: 100%;\n  width: 100%;\n  justify-content: center;\n  align-items: center;\n  border-top: 3px solid black;\n  padding-top: 1em;\n`;\n\nconst StyledButton = styled.button`\n  margin-top: 5px;\n  margin-bottom: 5px;\n`;\n\nconst StyledImport = styled.div``;\n\nconst StyledTimeControls = styled.div``;\n\nconst StyledTimeControl = styled.div`\n  display: flex;\n  width: 100%;\n  align-items: center;\n  justify-content: space-between;\n  margin: 0.5em;\n`;\n\nconst StyledInputWrapper = styled.div`\n  max-width: 3em;\n  height: 1.5em;\n`;\n\nconst StyledLabel = styled.label`\n  margin-right: 0.2em;\n`;\n\nexport type ModelControlsProps = {\n  appState: AppState;\n  setAppState: React.Dispatch<React.SetStateAction<AppState>>;\n  onRunModel: () => void;\n  setTiming: (newTiming: Timing) => void;\n};\n\nexport default function ModelControls(\n  props: ModelControlsProps\n): React.ReactElement {\n  const { appState, setAppState, onRunModel, setTiming } = props;\n  const [stagedAppState, setStagedAppState] = useState<string>(\"\");\n\n  return (\n    <StyledModelControlsWrapper>\n      <StyledTimeControls>\n        <StyledTimeControl>\n          <StyledLabel>Run Time [s]:</StyledLabel>\n          <StyledInputWrapper>\n            <EditableNumberInput\n              initialValue={appState.timing.totalTimeS}\n              onBlur={(newTotalTimeS: number) =>\n                setTiming({ ...appState.timing, totalTimeS: newTotalTimeS })\n              }\n            />\n          </StyledInputWrapper>\n        </StyledTimeControl>\n        <StyledTimeControl>\n          <StyledLabel>Time Step [s]:</StyledLabel>\n          <StyledInputWrapper>\n            <EditableNumberInput\n              initialValue={appState.timing.timeStepS}\n              onBlur={(newTimeStepS: number) =>\n                setTiming({\n                  ...appState.timing,\n                  timeStepS: newTimeStepS,\n                })\n              }\n            />\n          </StyledInputWrapper>\n        </StyledTimeControl>\n      </StyledTimeControls>\n      <StyledButton onClick={onRunModel}>Run Model</StyledButton>\n\n      <StyledButton\n        onClick={() => navigator.clipboard.writeText(JSON.stringify(appState))}\n      >\n        Copy Model to ClipBoard\n      </StyledButton>\n      <StyledImport>\n        <input\n          value={stagedAppState}\n          onChange={(event) => setStagedAppState(event.target.value)}\n        />\n        <StyledButton\n          onClick={() => {\n            setAppState(JSON.parse(stagedAppState));\n            setStagedAppState(\"\");\n          }}\n        >\n          Import Model\n        </StyledButton>\n      </StyledImport>\n\n      <StyledButton onClick={() => setAppState(defaultAppState)}>\n        Reset to Tutorial\n      </StyledButton>\n    </StyledModelControlsWrapper>\n  );\n}\n","import * as React from \"react\";\nimport { AppConnection, AppNode, AppState, Timing } from \"../../App\";\nimport NodeTable from \"./EditableTable/NodeTable/NodeTable\";\nimport ConnectionTable from \"./EditableTable/ConnectionTable/ConnectionTable\";\nimport Tabs from \"../Tabs/Tabs\";\nimport ModelControls from \"./ModelControls\";\nimport {\n  StyledEditor,\n  StyledModelControlsWrapper,\n  StyledTables,\n} from \"./style\";\n\ntype SidebarProps = {\n  appState: AppState;\n  setAppState: React.Dispatch<React.SetStateAction<AppState>>;\n  width: number;\n  height: number;\n  setTiming: (newTiming: Timing) => void;\n  onAddNode: () => void;\n  onAddConnection: () => void;\n  updateNodes: (nodes: AppNode[], clearActiveNodes: boolean) => void;\n  deleteNodes: (nodeIds: string[]) => void;\n  updateConnections: (connections: AppConnection[]) => void;\n  deleteConnections: (connectionIds: string[]) => void;\n  onRunModel: () => void;\n};\n\nexport default function Sidebar(props: SidebarProps): React.ReactElement {\n  const {\n    appState,\n    setAppState,\n    width,\n    height,\n    setTiming,\n    onAddNode,\n    onAddConnection,\n    updateNodes,\n    deleteNodes,\n    updateConnections,\n    deleteConnections,\n    onRunModel,\n  } = props;\n\n  const nodeTable = (\n    <NodeTable\n      rows={appState.nodes}\n      onUpdateRow={(node: AppNode) => updateNodes([node], false)}\n      onDeleteRow={(node: AppNode) => deleteNodes([node.id])}\n      onAddButton={onAddNode}\n    />\n  );\n\n  const connectionTable = (\n    <ConnectionTable\n      rows={appState.connections}\n      nodes={appState.nodes}\n      onUpdateRow={(connection: AppConnection) =>\n        updateConnections([connection])\n      }\n      onDeleteRow={(connection: AppConnection) =>\n        deleteConnections([connection.id])\n      }\n      onAddButton={onAddConnection}\n    />\n  );\n\n  return (\n    <StyledEditor width={width} height={height}>\n      <StyledTables heightFrac={appState.panelSizes.tableHeightFraction}>\n        <Tabs\n          tabs={[\n            { text: \"Nodes\", component: nodeTable, width: 0.5 },\n            { text: \"Connections\", component: connectionTable, width: 0.5 },\n          ]}\n        />\n      </StyledTables>\n      <StyledModelControlsWrapper\n        heightFrac={1 - appState.panelSizes.tableHeightFraction}\n      >\n        <ModelControls\n          appState={appState}\n          setAppState={setAppState}\n          onRunModel={onRunModel}\n          setTiming={setTiming}\n        />\n      </StyledModelControlsWrapper>\n    </StyledEditor>\n  );\n}\n","import {\n  CartesianGrid,\n  Legend,\n  LineChart,\n  Tooltip,\n  TooltipPayload,\n  TooltipProps,\n  XAxis,\n  YAxis,\n} from \"recharts\";\nimport * as React from \"react\";\nimport { PlotDimensions } from \"./Plot\";\nimport styled from \"styled-components/macro\";\n\nconst StyledToolTip = styled.div`\n  background: rgba(255, 255, 255, 0.7);\n  padding: 0.2em;\n  //border-radius: 10px;\n  border: 1px solid black;\n`;\n\nconst StyledToolTipTitle = styled.div`\n  font-size: 1em;\n  font-weight: bold;\n`;\n\nconst StyledToolTipItem = styled.div<{ color: string }>`\n  color: ${(props) => props.color};\n  display: flex;\n  justify-content: space-between;\n`;\n\nconst StyledToolTipValue = styled.div<{ after: string }>`\n  margin-left: 1em;\n\n  &::after {\n    content: \"${(props) => props.after}\";\n  }\n`;\n\nfunction CustomTooltip(props: TooltipProps & { after: string }) {\n  const { active, payload, label, after } = props;\n\n  if (active && payload && payload.length) {\n    const sortedPayload = [...payload].sort(\n      (a: TooltipPayload, b: TooltipPayload) => {\n        if (a.value > b.value) {\n          return -1;\n        } else if (a.value === b.value) {\n          if (a.name > b.name) {\n            return 1;\n          } else {\n            return -1;\n          }\n        } else {\n          return 1;\n        }\n      }\n    );\n\n    return (\n      <StyledToolTip>\n        <StyledToolTipTitle>{`Time: ${label}s`}</StyledToolTipTitle>\n        {sortedPayload.map((item) => {\n          return (\n            <StyledToolTipItem key={item.name} color={item.color || \"black\"}>\n              <div>{item.name}</div>\n              <StyledToolTipValue after={after}>\n                {item.value}\n              </StyledToolTipValue>\n            </StyledToolTipItem>\n          );\n        })}\n      </StyledToolTip>\n    );\n  }\n\n  return null;\n}\n\ntype LinePlotProps = {\n  plotDimensions: PlotDimensions;\n  plotData?: ReadonlyArray<Record<string, unknown>>;\n  lines: React.ReactElement[];\n  xAxisKey: string;\n  xLabel: string;\n  yLabel: string;\n  yDomain?: [number, number];\n  unit: string;\n};\n\nexport default function LinePlot(props: LinePlotProps): React.ReactElement {\n  const {\n    plotDimensions,\n    plotData,\n    lines,\n    xAxisKey,\n    xLabel,\n    yLabel,\n    yDomain,\n    unit,\n  } = props;\n\n  return (\n    <LineChart\n      height={plotDimensions.height}\n      width={plotDimensions.width}\n      margin={plotDimensions.margin}\n      data={plotData}\n    >\n      <CartesianGrid strokeDasharray=\"3 3\" />\n      <XAxis\n        dataKey={xAxisKey}\n        label={{\n          value: xLabel,\n          position: \"center\",\n          dy: 20,\n        }}\n      />\n      <YAxis\n        domain={yDomain}\n        label={{\n          value: yLabel,\n          position: \"center\",\n          angle: -90,\n          dx: -20,\n        }}\n      />\n      <Tooltip content={<CustomTooltip after={unit} />} />\n      <Legend\n        layout=\"horizontal\"\n        verticalAlign=\"top\"\n        align=\"center\"\n        wrapperStyle={{\n          paddingLeft: \"10px\",\n          paddingBottom: \"10px\",\n        }}\n      />\n      {lines}\n    </LineChart>\n  );\n}\n","import * as React from \"react\";\nimport { useMemo } from \"react\";\nimport { Line } from \"recharts\";\nimport styled from \"styled-components\";\nimport { emptyOutput, ModelOutput } from \"hotstuff-network\";\nimport LinePlot from \"./LinePlot\";\nimport Tabs from \"../Tabs/Tabs\";\nimport config from \"../../config\";\n\nconst { maxPlotPoints, plotDomainMargin } = config;\n\nconst colors = [\n  \"#2ecc71\",\n  \"#3498db\",\n  \"#9b59b6\",\n  \"#e74c3c\",\n  \"#e67e22\",\n  \"#34495e\",\n  \"#16a085\",\n];\n\nconst StyledCharts = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  width: 100%;\n\n  .chart {\n    width: 60% !important;\n    max-width: 900px;\n\n    @media only screen and (max-width: 600px) {\n      width: 90% !important;\n      touch-action: pan-y;\n    }\n  }\n`;\n\nconst StyledPlot = styled.div<{ height: number; width: number }>`\n  width: 100%;\n  height: ${(props) => props.height}px;\n  border-top: 3px solid black;\n  margin: 0;\n  padding: 0;\n`;\n\ntype Margin = {\n  left: number;\n  right: number;\n  top: number;\n  bottom: number;\n};\n\nexport type PlotDimensions = {\n  height: number;\n  width: number;\n  margin: Margin;\n};\n\ntype TimeSeriesPlotData = {\n  time: number;\n  [key: string]: number;\n};\n\ntype PlotDomain = [number, number];\n\nfunction roundToNearestTenth(input: number): number {\n  return Math.round(input * 10) / 10;\n}\n\nfunction plotShape(\n  data: ModelOutput\n): [TimeSeriesPlotData[], PlotDomain, TimeSeriesPlotData[], PlotDomain] {\n  // the number of points depends on the order of magnitude\n  const lowerMag = Math.floor(Math.log10(data.totalTimeS));\n  const divisibleBy = Math.pow(10, lowerMag - 1);\n  function include(val: number) {\n    return Math.abs(val % divisibleBy) === 0;\n  }\n\n  const includeAll = data.timeSeriesS.length < maxPlotPoints;\n\n  const tempsAtAllTimes: TimeSeriesPlotData[] = [];\n  let minTemp = 1e9;\n  let maxTemp = -1e9;\n  const heatTransfersAtAllTimes: TimeSeriesPlotData[] = [];\n  let minHeatTransfer = 1e9;\n  let maxHeatTransfer = -1e9;\n\n  data.timeSeriesS.forEach((t, idx) => {\n    if (includeAll || include(t)) {\n      const temp: TimeSeriesPlotData = { time: t };\n      const ht: TimeSeriesPlotData = { time: t };\n\n      data.nodeResults.forEach((nodeResult) => {\n        const tempVal = nodeResult.tempDegC[idx];\n        if (tempVal < minTemp) {\n          minTemp = tempVal;\n        } else if (tempVal > maxTemp) {\n          maxTemp = tempVal;\n        }\n        temp[nodeResult.node.name] = roundToNearestTenth(tempVal);\n      });\n\n      data.connectionResults.forEach((connectionResult) => {\n        const heatTransferVal = connectionResult.heatTransferW[idx];\n        if (heatTransferVal < minHeatTransfer) {\n          minHeatTransfer = heatTransferVal;\n        } else if (heatTransferVal > maxHeatTransfer) {\n          maxHeatTransfer = heatTransferVal;\n        }\n        ht[\n          `${connectionResult.connection.source.name} to ${connectionResult.connection.target.name}`\n        ] = roundToNearestTenth(heatTransferVal);\n      });\n\n      tempsAtAllTimes.push(temp);\n      heatTransfersAtAllTimes.push(ht);\n    }\n  });\n  return [\n    tempsAtAllTimes,\n    [minTemp, maxTemp],\n    heatTransfersAtAllTimes,\n    [minHeatTransfer, maxHeatTransfer],\n  ];\n}\n\ntype PlotProps = {\n  plotDimensions: PlotDimensions;\n  modelOutput?: ModelOutput;\n};\n\nexport default function Plot(props: PlotProps): React.ReactElement {\n  const modelHasOutput = !!(\n    props.modelOutput && props.modelOutput.nodeResults.length > 0\n  );\n  const res =\n    modelHasOutput && props.modelOutput ? props.modelOutput : emptyOutput;\n\n  const [tempPlotData, tempDomain, heatTransferPlotData, heatTransferDomain] =\n    plotShape(res);\n\n  const yTempDomain: [number, number] | undefined = modelHasOutput\n    ? [\n        Math.floor(tempDomain[0]) - plotDomainMargin,\n        Math.ceil(tempDomain[1] + plotDomainMargin),\n      ]\n    : undefined;\n  const yHeatTransferDomain: [number, number] | undefined = modelHasOutput\n    ? [\n        Math.floor(heatTransferDomain[0]) - plotDomainMargin,\n        Math.ceil(heatTransferDomain[1] + plotDomainMargin),\n      ]\n    : undefined;\n\n  const heatTransferLines = useMemo(\n    () =>\n      res.connectionResults.map((connectionResult, idx) => {\n        return (\n          <Line\n            key={connectionResult.connection.id}\n            type={\"monotone\"}\n            dataKey={`${connectionResult.connection.source.name} to ${connectionResult.connection.target.name}`}\n            stroke={colors[idx]}\n            activeDot={{ r: 8 }}\n            isAnimationActive={false}\n          />\n        );\n      }),\n    [res.connectionResults]\n  );\n\n  const tempLines = useMemo(\n    () =>\n      res.nodeResults.map((nodeResult, idx) => {\n        return (\n          <Line\n            key={nodeResult.node.id}\n            type={\"monotone\"}\n            dataKey={nodeResult.node.name}\n            stroke={colors[idx]}\n            activeDot={{ r: 8 }}\n            isAnimationActive={false}\n          />\n        );\n      }),\n    [res.nodeResults]\n  );\n\n  const tempPlot = (\n    <LinePlot\n      plotDimensions={props.plotDimensions}\n      plotData={tempPlotData}\n      lines={tempLines}\n      xAxisKey={\"time\"}\n      xLabel={\"Time [s]\"}\n      yLabel={\"Temperature [degC]\"}\n      yDomain={yTempDomain}\n      unit={\"degC\"}\n    />\n  );\n\n  const heatTransferPlot = (\n    <LinePlot\n      plotDimensions={props.plotDimensions}\n      plotData={heatTransferPlotData}\n      lines={heatTransferLines}\n      xAxisKey={\"time\"}\n      xLabel={\"Time [s]\"}\n      yLabel={\"Heat Transfer [Watts]\"}\n      yDomain={yHeatTransferDomain}\n      unit={\"W\"}\n    />\n  );\n\n  return (\n    <StyledPlot\n      height={props.plotDimensions.height}\n      width={props.plotDimensions.width}\n    >\n      <StyledCharts>\n        <Tabs\n          tabs={[\n            {\n              text: \"Temperature\",\n              component: tempPlot,\n              width: 0.5,\n            },\n            {\n              text: \"Heat Transfer\",\n              component: heatTransferPlot,\n              width: 0.5,\n            },\n          ]}\n        />\n      </StyledCharts>\n    </StyledPlot>\n  );\n}\n","import { diffPoints, ORIGIN, Point, scalePoint } from \"../../utils/pointUtils\";\nimport config from \"../../config\";\nimport { Direction } from \"../../App\";\nimport * as React from \"react\";\nimport { CanvasState } from \"./Canvas\";\nimport { ConnectionKind } from \"../types\";\nimport { scaleDiverging } from \"d3-scale\";\n\nconst { activeNodeOutlineWidthPx, minRadiusPx, maxRadiusPx } = config;\nexport const DEFAULT_RADIUS = Math.floor((minRadiusPx + maxRadiusPx) / 2);\n\nfunction drawCircle(\n  context: CanvasRenderingContext2D,\n  center: Point,\n  radius: number,\n  color: string\n): void {\n  context.save();\n  context.beginPath();\n  context.arc(center.x, center.y, radius, 0, 2 * Math.PI);\n  context.fillStyle = color;\n  context.fill();\n  context.closePath();\n  context.restore();\n}\n\nfunction drawCircleOutline(\n  context: CanvasRenderingContext2D,\n  center: Point,\n  radius: number,\n  color: string\n): void {\n  context.save();\n  context.beginPath();\n  // inset\n  context.arc(\n    center.x,\n    center.y,\n    radius - activeNodeOutlineWidthPx / 2,\n    0,\n    2 * Math.PI\n  );\n  context.lineWidth = activeNodeOutlineWidthPx;\n  context.strokeStyle = color;\n  context.stroke();\n  context.closePath();\n  context.restore();\n}\n\nfunction drawHashPattern(\n  context: CanvasRenderingContext2D,\n  center: Point,\n  radius: number\n) {\n  context.save();\n  context.lineWidth = 2;\n  context.fillStyle = \"#FFFFFF\";\n\n  const delta = 4.5;\n  const buffer = 1;\n  const circle = 2;\n\n  // save the canvas above, now transform it for ease of drawing\n  context.translate(center.x, center.y);\n  context.rotate(Math.PI / 4);\n\n  // draw horizontal line\n  context.beginPath();\n  context.moveTo(-radius, 0);\n  context.lineTo(radius, 0);\n  context.stroke();\n\n  // draw smaller horizontal lines offset vertically from center\n  let h = 0; // vertical distance from center\n  while (h + delta < radius) {\n    h = h + delta;\n    const newRadius = radius * Math.sin(Math.acos(h / radius));\n    context.moveTo(-newRadius - buffer, h);\n    context.lineTo(newRadius + buffer, h);\n    context.stroke();\n    context.moveTo(-newRadius - buffer, -h);\n    context.lineTo(newRadius + buffer, -h);\n    context.stroke();\n  }\n  context.closePath();\n\n  // clip off the extra bits around the circle\n  context.beginPath();\n  context.arc(0, 0, radius + circle, 0, Math.PI * 2, false);\n  context.arc(0, 0, radius, 0, Math.PI * 2, true);\n  context.fill();\n\n  context.restore();\n}\n\nfunction drawNodeName(\n  context: CanvasRenderingContext2D,\n  name: string,\n  center: Point,\n  radius: number,\n  textDirection: Direction\n) {\n  const bufferText = 2;\n  context.save();\n  context.font = \"14px Helvetica\";\n  const textMetrics = context.measureText(name);\n  const width = textMetrics.width;\n  context.translate(center.x, center.y);\n  if (textDirection === \"D\") {\n    context.fillText(\n      name,\n      -width / 2,\n      textMetrics.actualBoundingBoxAscent + radius + bufferText\n    );\n  } else if (textDirection === \"R\") {\n    context.fillText(\n      name,\n      radius + bufferText,\n      textMetrics.actualBoundingBoxAscent / 2\n    );\n  } else if (textDirection === \"U\") {\n    context.fillText(\n      name,\n      -width / 2,\n      -(textMetrics.actualBoundingBoxDescent + radius + bufferText)\n    );\n  } else {\n    context.fillText(\n      name,\n      -(width + radius + bufferText),\n      textMetrics.actualBoundingBoxAscent / 2\n    );\n  }\n  context.restore();\n}\n\nexport function drawNode(\n  context: CanvasRenderingContext2D,\n  name: string,\n  center: Point,\n  radius: number,\n  color: string,\n  isActive: boolean,\n  isBoundary: boolean,\n  textDirection: Direction\n): void {\n  drawCircle(context, center, radius, color);\n  if (isActive) {\n    drawCircleOutline(context, center, radius, \"black\");\n  }\n  if (isBoundary) {\n    drawHashPattern(context, center, radius);\n  }\n  drawNodeName(context, name, center, radius, textDirection);\n}\n\nexport function drawBidirectionalArrow(\n  context: CanvasRenderingContext2D,\n  start: Point,\n  end: Point,\n  color: string,\n  startOffset = 0,\n  endOffset = 0\n): void {\n  context.save();\n  context.beginPath();\n  context.strokeStyle = color;\n  context.lineWidth = 2;\n  const headLength = 9;\n  const headWidth = 4;\n  const arrowGap = 0;\n  const dx = end.x - start.x;\n  const dy = end.y - start.y;\n  const angle = Math.atan2(dy, dx);\n  const length = Math.sqrt(dx * dx + dy * dy);\n  const adjLength = length - endOffset;\n\n  context.translate(start.x, start.y);\n  context.rotate(angle);\n\n  context.beginPath();\n  context.moveTo(startOffset, arrowGap);\n  context.lineTo(adjLength, arrowGap);\n  context.moveTo(adjLength - headLength, headWidth + arrowGap);\n  context.lineTo(adjLength, arrowGap);\n  context.lineTo(adjLength - headLength, -(headWidth - arrowGap));\n\n  context.moveTo(adjLength, -arrowGap);\n  context.lineTo(startOffset, -arrowGap);\n  context.moveTo(startOffset + headLength, -(headWidth + arrowGap));\n  context.lineTo(startOffset, -arrowGap);\n  context.lineTo(startOffset + headLength, headWidth - arrowGap);\n\n  context.stroke();\n  context.closePath();\n  context.restore();\n}\n\nexport function drawUnidirectionalArrow(\n  context: CanvasRenderingContext2D,\n  start: Point,\n  end: Point,\n  color: string,\n  startOffset = 0,\n  endOffset = 0\n): void {\n  context.save();\n  context.beginPath();\n  context.strokeStyle = color;\n  context.lineWidth = 2;\n  const headLength = 9;\n  const headWidth = 4;\n  const dx = end.x - start.x;\n  const dy = end.y - start.y;\n  const angle = Math.atan2(dy, dx);\n  const length = Math.sqrt(dx * dx + dy * dy);\n  const adjLength = length - endOffset;\n\n  context.translate(start.x, start.y);\n  context.rotate(angle);\n\n  context.beginPath();\n  context.moveTo(startOffset, 0);\n  context.lineTo(adjLength, 0);\n  context.moveTo(adjLength - headLength, -headWidth);\n  context.lineTo(adjLength, 0);\n  context.lineTo(adjLength - headLength, headWidth);\n  context.stroke();\n  context.closePath();\n  context.restore();\n}\n\nexport function drawArrowWithoutHead(\n  context: CanvasRenderingContext2D,\n  start: Point,\n  end: Point,\n  color: string,\n  startOffset = 0,\n  endOffset = 0\n): void {\n  context.save();\n  context.beginPath();\n  context.strokeStyle = color;\n  context.lineWidth = 2;\n  const dx = end.x - start.x;\n  const dy = end.y - start.y;\n  const angle = Math.atan2(dy, dx);\n  const length = Math.sqrt(dx * dx + dy * dy);\n  context.translate(start.x, start.y);\n  context.rotate(angle);\n  context.beginPath();\n  context.moveTo(startOffset, 0);\n  const adjLength = length - endOffset;\n  context.lineTo(adjLength, 0);\n  context.stroke();\n  context.closePath();\n  context.restore();\n}\n\nexport function drawClearBox(\n  context: CanvasRenderingContext2D,\n  start: Point,\n  end: Point,\n  color: string\n): void {\n  context.save();\n  context.beginPath();\n  context.fillStyle = color;\n  context.globalAlpha = 0.2;\n  context.fillRect(start.x, start.y, end.x - start.x, end.y - start.y);\n  context.closePath();\n\n  // outline\n  context.beginPath();\n  context.strokeStyle = color;\n  context.rect(start.x, start.y, end.x - start.x, end.y - start.y);\n  context.stroke();\n  context.closePath();\n\n  context.restore();\n}\n\nexport function drawConnection(\n  context: CanvasRenderingContext2D,\n  sourceCenter: Point,\n  sourceRadius: number,\n  targetCenter: Point,\n  targetRadius: number,\n  kind: ConnectionKind\n): void {\n  if (kind === \"bi\") {\n    drawBidirectionalArrow(\n      context,\n      sourceCenter,\n      targetCenter,\n      \"black\",\n      sourceRadius,\n      targetRadius\n    );\n  } else {\n    drawUnidirectionalArrow(\n      context,\n      sourceCenter,\n      targetCenter,\n      \"black\",\n      sourceRadius,\n      targetRadius\n    );\n  }\n}\n\nexport function intersectsCircle(\n  point: Point,\n  circleCenter: Point,\n  radius: number\n): boolean {\n  const deltaX = point.x - circleCenter.x;\n  const deltaY = point.y - circleCenter.y;\n  return Math.pow(deltaX, 2) + Math.pow(deltaY, 2) <= Math.pow(radius, 2);\n}\n\nexport function isInsideBox(\n  startBox: Point,\n  endBox: Point,\n  point: Point\n): boolean {\n  const [topLeft, bottomRight] =\n    startBox.x < endBox.x && startBox.y < endBox.y\n      ? [startBox, endBox]\n      : [endBox, startBox];\n\n  const [bottomLeft, topRight] =\n    startBox.x < endBox.x && startBox.y > endBox.y\n      ? [startBox, endBox]\n      : [endBox, startBox];\n\n  return (\n    (topLeft.x <= point.x &&\n      point.x <= bottomRight.x &&\n      topLeft.y <= point.y &&\n      point.y <= bottomRight.y) ||\n    (bottomLeft.x <= point.x &&\n      point.x <= topRight.x &&\n      topRight.y <= point.y &&\n      point.y <= bottomLeft.y)\n  );\n}\n\nexport function calculateMousePositionOnElement(\n  event: React.MouseEvent | MouseEvent,\n  element: HTMLElement\n): Point {\n  const viewportMousePos = { x: event.pageX, y: event.pageY };\n  const boundingRect = element.getBoundingClientRect();\n  const topLeftCanvasPos = { x: boundingRect.left, y: boundingRect.top };\n  return diffPoints(viewportMousePos, topLeftCanvasPos);\n}\n\nfunction canvasMouseToNodeCoords(\n  mouse: Point,\n  offset: Point,\n  scale: number\n): Point {\n  return diffPoints(scalePoint(mouse, scale), offset);\n}\n\nexport function mouseToNodeCoords(\n  event: React.MouseEvent | MouseEvent,\n  canvasState: CanvasState\n): Point {\n  if (canvasState.context) {\n    const canvasMouse = calculateMousePositionOnElement(\n      event,\n      canvasState.context.canvas\n    );\n    return canvasMouseToNodeCoords(\n      canvasMouse,\n      canvasState.canvasViewState.offset,\n      canvasState.canvasViewState.scale\n    );\n  } else {\n    return ORIGIN;\n  }\n}\n\nexport function rotatedDirection(direction: Direction): Direction {\n  // assume rotate counter-clockwise\n  if (direction === \"D\") {\n    return \"R\";\n  } else if (direction === \"R\") {\n    return \"U\";\n  } else if (direction === \"U\") {\n    return \"L\";\n  } else {\n    return \"D\";\n  }\n}\n\nexport function getCanvasCenter(\n  canvasWidth: number,\n  canvasHeight: number,\n  offset: Point,\n  scale: number\n): Point {\n  const topLeftPoint = offset;\n  const distanceToCenter = scalePoint(\n    { x: canvasWidth, y: canvasHeight },\n    2 * scale\n  );\n  return diffPoints(distanceToCenter, topLeftPoint);\n}\n\nexport function determineRadius(\n  capacitance: number,\n  allCapacitances: number[]\n): number {\n  const min = Math.min(...allCapacitances);\n  const max = Math.max(...allCapacitances);\n  // cap = min -> minRadius\n  // cap = max -> maxRadius\n  // radius = (cap - min) / (max - min) * 20 + 10\n  if (min === max) {\n    return DEFAULT_RADIUS;\n  }\n  return (\n    ((capacitance - min) / (max - min)) * (maxRadiusPx - minRadiusPx) +\n    minRadiusPx\n  );\n}\n\nexport function determineColor(\n  temperature: number,\n  allTemperatures: number[]\n): string {\n  const minTemp = Math.min(...allTemperatures);\n  const maxTemp = Math.max(...allTemperatures);\n  const range = maxTemp - minTemp;\n  const test = scaleDiverging<string>()\n    .domain([minTemp - range / 3, (minTemp + maxTemp) / 2, maxTemp + range / 3])\n    .range([\"blue\", \"#ababab\", \"red\"]);\n  return test(temperature);\n}\n","import * as React from \"react\";\nimport { useCallback, useLayoutEffect, useRef, useState } from \"react\";\nimport {\n  addPoints,\n  diffPoints,\n  ORIGIN,\n  Point,\n  scalePoint,\n} from \"../../../utils/pointUtils\";\nimport config from \"../../../config\";\nimport { calculateMousePositionOnElement } from \"../canvasUtils\";\nimport { CanvasViewState } from \"../Canvas\";\n\nconst { maxZoom, minZoom, zoomSensitivity, maxZoomDelta } = config;\n\nexport default function usePanZoomCanvas(\n  canvasRef: React.RefObject<HTMLCanvasElement>,\n  canvasViewState: CanvasViewState,\n  setCanvasViewState: (newCanvasViewState: CanvasViewState) => void\n): [\n  CanvasRenderingContext2D | null,\n  React.Dispatch<React.SetStateAction<CanvasRenderingContext2D | null>>,\n  (event: React.MouseEvent | MouseEvent) => void\n] {\n  const [context, setContext] = useState<CanvasRenderingContext2D | null>(null);\n  const mousePosRef = useRef<Point>(ORIGIN);\n  const lastMousePosRef = useRef<Point>(ORIGIN);\n  const lastCanvasViewState = useRef<CanvasViewState>(canvasViewState);\n\n  // functions for panning\n  const mouseMove = useCallback(\n    (event: React.MouseEvent | MouseEvent) => {\n      if (context) {\n        // update mouse position\n        const newMousePos = calculateMousePositionOnElement(\n          event,\n          context.canvas\n        );\n        lastMousePosRef.current = mousePosRef.current;\n        mousePosRef.current = newMousePos;\n\n        const mouseDiff = scalePoint(\n          diffPoints(mousePosRef.current, lastMousePosRef.current),\n          canvasViewState.scale\n        );\n        const newCanvasViewState = {\n          scale: canvasViewState.scale,\n          offset: addPoints(lastCanvasViewState.current.offset, mouseDiff),\n        };\n        setCanvasViewState(newCanvasViewState);\n        lastCanvasViewState.current = newCanvasViewState;\n      }\n    },\n    [context, canvasViewState.scale, setCanvasViewState]\n  );\n\n  const mouseUp = useCallback(() => {\n    document.removeEventListener(\"mousemove\", mouseMove);\n    document.removeEventListener(\"mouseup\", mouseUp);\n  }, [mouseMove]);\n\n  const startPan = useCallback(\n    (event: React.MouseEvent | MouseEvent) => {\n      if (context) {\n        document.addEventListener(\"mousemove\", mouseMove);\n        document.addEventListener(\"mouseup\", mouseUp);\n        mousePosRef.current = calculateMousePositionOnElement(\n          event,\n          context.canvas\n        );\n      }\n    },\n    [context, mouseMove, mouseUp]\n  );\n\n  // add event listener on canvas for zoom\n  useLayoutEffect(() => {\n    function handleWheel(event: WheelEvent) {\n      event.preventDefault();\n      if (context) {\n        // update mouse position\n        const newMousePos = calculateMousePositionOnElement(\n          event,\n          context.canvas\n        );\n        lastMousePosRef.current = mousePosRef.current;\n        mousePosRef.current = newMousePos;\n\n        // calculate new scale/zoom\n        const zoomDelta = event.deltaY / zoomSensitivity;\n        const zoom =\n          1 -\n          (Math.abs(zoomDelta) > maxZoomDelta\n            ? (zoomDelta / Math.abs(zoomDelta)) * maxZoomDelta\n            : zoomDelta);\n        const newScale = canvasViewState.scale * zoom;\n        if (newScale > maxZoom || newScale < minZoom) {\n          return;\n        }\n\n        // offset the canvas such that the point under the mouse doesn't move\n        const lastMouse = scalePoint(\n          mousePosRef.current,\n          canvasViewState.scale\n        );\n        const newMouse = scalePoint(mousePosRef.current, newScale);\n        const mouseOffset = diffPoints(lastMouse, newMouse);\n\n        const newCanvasViewState = {\n          offset: diffPoints(lastCanvasViewState.current.offset, mouseOffset),\n          scale: newScale,\n        };\n        setCanvasViewState(newCanvasViewState);\n        lastCanvasViewState.current = newCanvasViewState;\n      }\n    }\n\n    const canvasElem = canvasRef.current;\n    if (canvasElem) {\n      lastCanvasViewState.current = canvasViewState;\n      canvasElem.addEventListener(\"wheel\", handleWheel);\n      return () => canvasElem.removeEventListener(\"wheel\", handleWheel);\n    }\n  }, [canvasRef, canvasViewState, context, setCanvasViewState]);\n\n  return [context, setContext, startPan];\n}\n","import * as React from \"react\";\nimport styled from \"styled-components/macro\";\nimport { ORIGIN } from \"../../utils/pointUtils\";\nimport { CanvasState, CanvasViewState } from \"./Canvas\";\n\nconst StyledButtons = styled.div`\n  position: absolute;\n  bottom: 0;\n  left: 0;\n  display: flex;\n  flex-direction: column;\n`;\n\nconst StyledButton = styled.button`\n  margin: 0.2em;\n`;\n\ntype ControlsProps = {\n  setCanvasViewState: (canvasViewState: CanvasViewState) => void;\n  canvasState: CanvasState;\n  savedCanvasState: CanvasViewState;\n  setSavedCanvasState: (newSavedCanvasState: CanvasViewState) => void;\n};\n\nexport default function Controls(props: ControlsProps): React.ReactElement {\n  return (\n    <StyledButtons>\n      <StyledButton\n        onClick={() =>\n          props.canvasState.context &&\n          props.setCanvasViewState({ offset: ORIGIN, scale: 1 })\n        }\n      >\n        Reset View\n      </StyledButton>\n      <StyledButton\n        onClick={() =>\n          props.canvasState.context &&\n          props.setCanvasViewState({\n            offset: props.savedCanvasState.offset,\n            scale: props.savedCanvasState.scale,\n          })\n        }\n      >\n        Reset View to Saved\n      </StyledButton>\n      <StyledButton\n        onClick={() => {\n          props.setSavedCanvasState({\n            offset: props.canvasState.canvasViewState.offset,\n            scale: props.canvasState.canvasViewState.scale,\n          });\n        }}\n      >\n        Save View\n      </StyledButton>\n    </StyledButtons>\n  );\n}\n","import * as React from \"react\";\nimport { useLayoutEffect, useRef } from \"react\";\nimport styled from \"styled-components\";\nimport usePanZoomCanvas from \"./hooks/usePanZoomCanvas\";\nimport { Point } from \"../../utils/pointUtils\";\nimport Controls from \"./Controls\";\nimport useOnClickCanvas from \"./hooks/useOnClickCanvas\";\n\nconst StyledCanvasWrapper = styled.div`\n  display: block;\n  max-height: 100%;\n  position: relative;\n`;\n\nconst StyledCanvas = styled.canvas<{ cssWidth: number; cssHeight: number }>`\n  width: ${({ cssWidth }) => `${cssWidth}px`};\n  height: ${({ cssHeight }) => `${cssHeight}px`};\n`;\n\nexport type CanvasViewState = {\n  offset: Point;\n  scale: number;\n};\n\nexport type CanvasState = {\n  context: CanvasRenderingContext2D | null;\n  canvasViewState: CanvasViewState;\n  canvasWidth: number;\n  canvasHeight: number;\n};\n\nexport type CanvasProps = {\n  canvasWidth: number;\n  canvasHeight: number;\n  devicePixelRatio: number;\n  draw: (context: CanvasRenderingContext2D) => void;\n  onMouseDown: (\n    event: React.MouseEvent | MouseEvent,\n    canvasState: CanvasState,\n    defaultBehavior: (event: React.MouseEvent | MouseEvent) => void\n  ) => void;\n  handleDoubleClick: (\n    event: React.MouseEvent,\n    canvasState: CanvasState\n  ) => void;\n  canvasViewState: CanvasViewState;\n  setCanvasViewState: (newCanvasState: CanvasViewState) => void;\n  savedCanvasViewState: CanvasViewState;\n  setSavedCanvasViewState: (newSavedCanvasState: CanvasViewState) => void;\n  setKeyboardActive: React.Dispatch<React.SetStateAction<boolean>>;\n};\n\nexport default function Canvas(props: CanvasProps): React.ReactElement {\n  const {\n    canvasWidth,\n    canvasHeight,\n    devicePixelRatio,\n    draw,\n    onMouseDown,\n    handleDoubleClick,\n    canvasViewState,\n    setCanvasViewState,\n    savedCanvasViewState,\n    setSavedCanvasViewState,\n    setKeyboardActive,\n  } = props;\n\n  // hooks\n  const canvasRef = useRef<HTMLCanvasElement>(null);\n  useOnClickCanvas(canvasRef, setKeyboardActive);\n  const [context, setContext, startPan] = usePanZoomCanvas(\n    canvasRef,\n    canvasViewState,\n    setCanvasViewState\n  );\n\n  // setup canvas and set context\n  useLayoutEffect(() => {\n    if (canvasRef.current) {\n      // get new drawing context\n      const renderCtx = canvasRef.current.getContext(\"2d\");\n      setContext(renderCtx);\n    }\n  }, [setContext]);\n\n  // draw\n  useLayoutEffect(() => {\n    if (context) {\n      // clear canvas\n      context.canvas.width = canvasWidth * devicePixelRatio;\n      context.canvas.height = canvasHeight * devicePixelRatio;\n\n      context.scale(\n        canvasViewState.scale * devicePixelRatio,\n        canvasViewState.scale * devicePixelRatio\n      );\n      context.translate(canvasViewState.offset.x, canvasViewState.offset.y);\n\n      draw(context);\n    }\n  }, [\n    canvasHeight,\n    canvasWidth,\n    context,\n    devicePixelRatio,\n    draw,\n    canvasViewState.offset.x,\n    canvasViewState.offset.y,\n    canvasViewState.scale,\n  ]);\n\n  return (\n    <StyledCanvasWrapper>\n      <Controls\n        setCanvasViewState={setCanvasViewState}\n        canvasState={{\n          context,\n          canvasViewState,\n          canvasWidth,\n          canvasHeight,\n        }}\n        savedCanvasState={savedCanvasViewState}\n        setSavedCanvasState={setSavedCanvasViewState}\n      />\n      <StyledCanvas\n        ref={canvasRef}\n        width={canvasWidth * devicePixelRatio}\n        height={canvasHeight * devicePixelRatio}\n        cssWidth={canvasWidth}\n        cssHeight={canvasHeight}\n        onMouseDown={(event: React.MouseEvent | MouseEvent) =>\n          onMouseDown(\n            event,\n            { context, canvasViewState, canvasWidth, canvasHeight },\n            () => startPan(event)\n          )\n        }\n        onDoubleClick={(event: React.MouseEvent) =>\n          handleDoubleClick(event, {\n            context,\n            canvasViewState,\n            canvasWidth,\n            canvasHeight,\n          })\n        }\n      />\n    </StyledCanvasWrapper>\n  );\n}\n","import * as React from \"react\";\nimport { useEffect } from \"react\";\n\nexport default function useOnClickCanvas(\n  ref: React.RefObject<HTMLCanvasElement>,\n  onClickCanvas: React.Dispatch<React.SetStateAction<boolean>>\n): void {\n  useEffect(() => {\n    const handleClickOutside = (event: React.MouseEvent | MouseEvent) => {\n      const keyBoardActive =\n        !!ref.current && ref.current.contains(event.target as Node);\n      onClickCanvas(keyBoardActive);\n    };\n\n    // Bind the event listener\n    document.addEventListener(\"mousedown\", handleClickOutside);\n    return () => {\n      // Unbind the event listener on clean up\n      document.removeEventListener(\"mousedown\", handleClickOutside);\n    };\n  }, [ref, onClickCanvas]);\n}\n","import { useCallback } from \"react\";\nimport {\n  determineColor,\n  determineRadius,\n  drawConnection,\n  drawNode,\n} from \"../components/Canvas/canvasUtils\";\nimport { AppConnection, AppNode } from \"../App\";\nimport { CanvasState } from \"../components/Canvas/Canvas\";\n\nexport default function useDraw(\n  appNodes: AppNode[],\n  appConnections: AppConnection[]\n): [\n  (context: CanvasRenderingContext2D) => void,\n  (canvasState: CanvasState) => void\n] {\n  const draw = useCallback(\n    (context: CanvasRenderingContext2D) => {\n      appNodes.forEach((node) => {\n        const nodeRadius = determineRadius(\n          node.capacitanceJPerDegK,\n          appNodes.map((node) => node.capacitanceJPerDegK)\n        );\n        const nodeColor = determineColor(\n          node.temperatureDegC,\n          appNodes.map((node) => node.temperatureDegC)\n        );\n        drawNode(\n          context,\n          node.name,\n          node.center,\n          nodeRadius,\n          nodeColor,\n          node.isActive,\n          node.isBoundary,\n          node.textDirection\n        );\n      });\n\n      appConnections.map((conn) => {\n        const { source, target, kind } = conn;\n        const sourceAppNode = appNodes.find((node) => node.id === source.id);\n        const targetAppNode = appNodes.find((node) => node.id === target.id);\n        if (sourceAppNode && targetAppNode) {\n          const sourceRadius = determineRadius(\n            sourceAppNode.capacitanceJPerDegK,\n            appNodes.map((node) => node.capacitanceJPerDegK)\n          );\n          const targetRadius = determineRadius(\n            targetAppNode.capacitanceJPerDegK,\n            appNodes.map((node) => node.capacitanceJPerDegK)\n          );\n          drawConnection(\n            context,\n            sourceAppNode.center,\n            sourceRadius,\n            targetAppNode.center,\n            targetRadius,\n            kind\n          );\n        }\n      });\n    },\n    [appConnections, appNodes]\n  );\n\n  const clearAndRedraw = useCallback(\n    (canvasState: CanvasState) => {\n      if (canvasState.context) {\n        canvasState.context.clearRect(\n          -canvasState.canvasViewState.offset.x,\n          -canvasState.canvasViewState.offset.y,\n          canvasState.canvasWidth / canvasState.canvasViewState.scale,\n          canvasState.canvasHeight / canvasState.canvasViewState.scale\n        );\n        draw(canvasState.context);\n      }\n    },\n    [draw]\n  );\n\n  return [draw, clearAndRedraw];\n}\n","import { HSConnection, makeConnection, makeNode } from \"hotstuff-network\";\nimport config from \"../config\";\nimport { AppConnection, AppNode } from \"../App\";\nimport { Point } from \"./pointUtils\";\n\nconst { newNodeNamePrefix } = config;\n\nexport function getNewAppNode(appNodes: AppNode[], center: Point): AppNode {\n  const numNodesWithDefaultPrefix = appNodes.filter((node) =>\n    node.name.startsWith(newNodeNamePrefix)\n  ).length;\n\n  const newNode = makeNode({\n    name:\n      numNodesWithDefaultPrefix === 0\n        ? `${newNodeNamePrefix}`\n        : `${newNodeNamePrefix} (${numNodesWithDefaultPrefix + 1})`,\n    temperatureDegC: config.defaultTempDegC,\n    capacitanceJPerDegK: config.defaultCapJPerDegK,\n    powerGenW: config.defaultPowerGenW,\n    isBoundary: false,\n  });\n\n  return {\n    ...newNode,\n    center: center,\n    isActive: false,\n    textDirection: \"D\",\n  };\n}\n\nexport function getNewAppConnection(\n  appNodes: AppNode[],\n  appConnections: AppConnection[]\n): AppConnection | undefined {\n  if (appNodes.length < 2) {\n    return;\n  }\n  let found: AppConnection | undefined = undefined;\n\n  appNodes.forEach((firstNode) => {\n    appNodes.forEach((secondNode) => {\n      if (!found && firstNode.id !== secondNode.id) {\n        const connectionForwardsExists = appConnections.find(\n          (conn) =>\n            conn.source.id === firstNode.id && conn.target.id === secondNode.id\n        );\n        const connectionBackwardsExists = appConnections.find(\n          (conn) =>\n            conn.source.id === secondNode.id && conn.target.id === firstNode.id\n        );\n        if (!connectionForwardsExists && !connectionBackwardsExists) {\n          const newConnection: HSConnection = makeConnection({\n            source: firstNode,\n            target: secondNode,\n            resistanceDegKPerW: config.defaultResistanceDegKPerW,\n            kind: \"bi\",\n          });\n\n          found = {\n            ...newConnection,\n            sourceName: firstNode.name,\n            targetName: secondNode.name,\n          };\n        }\n      }\n    });\n  });\n  return found;\n}\n","import React, { useCallback } from \"react\";\nimport { CanvasState } from \"../components/Canvas/Canvas\";\nimport {\n  determineRadius,\n  drawArrowWithoutHead,\n  intersectsCircle,\n  mouseToNodeCoords,\n} from \"../components/Canvas/canvasUtils\";\nimport { makeConnection } from \"hotstuff-network\";\nimport { AppConnection, AppNode } from \"../App\";\nimport config from \"../config\";\n\nconst { defaultResistanceDegKPerW, defaultConnectionKind } = config;\n\nexport default function useAddConnection(\n  appNodes: AppNode[],\n  appConnections: AppConnection[],\n  addConnection: (newConnection: AppConnection) => void,\n  clearAndRedraw: (canvasState: CanvasState) => void\n): (\n  event: React.MouseEvent | MouseEvent,\n  clickedNode: AppNode,\n  canvasState: CanvasState\n) => void {\n  const drawConnectionBeingMade = useCallback(\n    (\n      event: React.MouseEvent | MouseEvent,\n      clickedNode: AppNode,\n      canvasState: CanvasState\n    ) => {\n      if (canvasState.context) {\n        const nodeCoordsOfMouse = mouseToNodeCoords(event, canvasState);\n        clearAndRedraw(canvasState);\n        drawArrowWithoutHead(\n          canvasState.context,\n          clickedNode.center,\n          nodeCoordsOfMouse,\n          \"grey\"\n        );\n      }\n    },\n    [clearAndRedraw]\n  );\n\n  return useCallback(\n    (\n      event: React.MouseEvent | MouseEvent,\n      clickedNode: AppNode,\n      canvasState: CanvasState\n    ) => {\n      const drawConnWrapper = (event: React.MouseEvent | MouseEvent) => {\n        drawConnectionBeingMade(event, clickedNode, canvasState);\n      };\n\n      const mouseUp = (event: React.MouseEvent | MouseEvent) => {\n        document.removeEventListener(\"mousemove\", drawConnWrapper);\n        document.removeEventListener(\"mouseup\", mouseUp);\n\n        // if arrow released on a node, make new connection\n        const nodeCoordsOfMouse = mouseToNodeCoords(event, canvasState);\n        const mouseUpOnNode = appNodes.find((node) => {\n          const nodeRadius = determineRadius(\n            node.capacitanceJPerDegK,\n            appNodes.map((node) => node.capacitanceJPerDegK)\n          );\n          return (\n            intersectsCircle(nodeCoordsOfMouse, node.center, nodeRadius) &&\n            node.id !== clickedNode.id &&\n            !appConnections.some(\n              (conn) =>\n                (conn.source.id === node.id &&\n                  conn.target.id === clickedNode.id) ||\n                (conn.target.id === node.id &&\n                  conn.source.id === clickedNode.id)\n            )\n          );\n        });\n\n        if (mouseUpOnNode) {\n          const newConnection = {\n            ...makeConnection({\n              source: clickedNode,\n              target: mouseUpOnNode,\n              resistanceDegKPerW: defaultResistanceDegKPerW,\n              kind: defaultConnectionKind,\n            }),\n            sourceName: clickedNode.name,\n            targetName: mouseUpOnNode.name,\n          };\n          addConnection(newConnection);\n        } else {\n          clearAndRedraw(canvasState);\n        }\n      };\n      document.addEventListener(\"mousemove\", drawConnWrapper);\n      document.addEventListener(\"mouseup\", mouseUp);\n    },\n    [\n      addConnection,\n      appConnections,\n      appNodes,\n      clearAndRedraw,\n      drawConnectionBeingMade,\n    ]\n  );\n}\n","import React, { useCallback, useRef } from \"react\";\nimport { CanvasState } from \"../components/Canvas/Canvas\";\nimport { mouseToNodeCoords } from \"../components/Canvas/canvasUtils\";\nimport { AppNode } from \"../App\";\nimport { diffPoints } from \"../utils/pointUtils\";\nimport config from \"../config\";\n\nfunction getNewAppNodes(\n  clickedMouseEvent: React.MouseEvent | MouseEvent,\n  currentMouseEvent: React.MouseEvent | MouseEvent,\n  canvasState: CanvasState,\n  clickedNode: AppNode,\n  multiSelectKeyPressed: boolean,\n  activeNodes: AppNode[]\n): AppNode[] {\n  const offsetMouseToCenter = diffPoints(\n    mouseToNodeCoords(clickedMouseEvent, canvasState),\n    clickedNode.center\n  );\n\n  const newClickedCenter = diffPoints(\n    mouseToNodeCoords(currentMouseEvent, canvasState),\n    offsetMouseToCenter\n  );\n\n  const newClickedNode = {\n    ...clickedNode,\n    isActive: true,\n    center: newClickedCenter,\n  };\n\n  const newActiveNodes =\n    clickedNode.isActive || multiSelectKeyPressed\n      ? activeNodes.map((node) => {\n          const distanceFromClickedCenter = diffPoints(\n            clickedNode.center,\n            node.center\n          );\n          return {\n            ...node,\n            center: diffPoints(newClickedCenter, distanceFromClickedCenter),\n          };\n        })\n      : [];\n\n  return [newClickedNode, ...newActiveNodes];\n}\n\nexport default function useMoveNode(\n  updateNodes: (nodesToUpdate: AppNode[], clearActiveNodes?: boolean) => void\n): (\n  event: React.MouseEvent | MouseEvent,\n  clickedNode: AppNode,\n  activeNodes: AppNode[],\n  canvasState: CanvasState\n) => void {\n  const movedRef = useRef<boolean>(false);\n\n  return useCallback(\n    (\n      mouseDownEvent: React.MouseEvent | MouseEvent,\n      clickedNode: AppNode,\n      activeNodes: AppNode[],\n      canvasState: CanvasState\n    ) => {\n      const multiSelectKeyPressed = mouseDownEvent[config.multiSelectKey];\n      const moveNode = (currentMouseEvent: React.MouseEvent | MouseEvent) => {\n        if (canvasState.context) {\n          movedRef.current = true;\n          const newNodes = getNewAppNodes(\n            mouseDownEvent,\n            currentMouseEvent,\n            canvasState,\n            clickedNode,\n            multiSelectKeyPressed,\n            activeNodes\n          );\n          updateNodes(newNodes, !currentMouseEvent[config.multiSelectKey]);\n        }\n      };\n      const mouseUp = (mouseUpEvent: React.MouseEvent | MouseEvent) => {\n        document.removeEventListener(\"mousemove\", moveNode);\n        document.removeEventListener(\"mouseup\", mouseUp);\n        const newNodes = getNewAppNodes(\n          mouseDownEvent,\n          mouseUpEvent,\n          canvasState,\n          clickedNode,\n          multiSelectKeyPressed,\n          activeNodes\n        );\n        updateNodes(newNodes, !multiSelectKeyPressed);\n        movedRef.current = false;\n      };\n      document.addEventListener(\"mousemove\", moveNode);\n      document.addEventListener(\"mouseup\", mouseUp);\n    },\n    [updateNodes]\n  );\n}\n","import React, { useCallback } from \"react\";\nimport { CanvasState } from \"../components/Canvas/Canvas\";\nimport {\n  drawClearBox,\n  isInsideBox,\n  mouseToNodeCoords,\n} from \"../components/Canvas/canvasUtils\";\nimport { AppNode } from \"../App\";\n\nexport default function useMultiSelect(\n  appNodes: AppNode[],\n  setActiveNodes: (activeNodeIds: string[]) => void,\n  clearAndRedraw: (canvasState: CanvasState) => void\n): (event: React.MouseEvent | MouseEvent, canvasState: CanvasState) => void {\n  return useCallback(\n    (event: React.MouseEvent | MouseEvent, canvasState: CanvasState) => {\n      const boxStart = mouseToNodeCoords(event, canvasState);\n      const drawBox = (event: React.MouseEvent | MouseEvent) => {\n        if (canvasState.context) {\n          clearAndRedraw(canvasState);\n          drawClearBox(\n            canvasState.context,\n            boxStart,\n            mouseToNodeCoords(event, canvasState),\n            \"grey\"\n          );\n        }\n      };\n      const mouseUp = (event: React.MouseEvent | MouseEvent) => {\n        document.removeEventListener(\"mousemove\", drawBox);\n        document.removeEventListener(\"mouseup\", mouseUp);\n\n        const boxEnd = mouseToNodeCoords(event, canvasState);\n        const activeNodeIds = appNodes\n          .filter(\n            (node) =>\n              isInsideBox(boxStart, boxEnd, node.center) || node.isActive\n          )\n          .map((node) => node.id);\n        setActiveNodes(activeNodeIds);\n      };\n      document.addEventListener(\"mousemove\", drawBox);\n      document.addEventListener(\"mouseup\", mouseUp);\n    },\n    [appNodes, clearAndRedraw, setActiveNodes]\n  );\n}\n","import * as React from \"react\";\nimport { useCallback } from \"react\";\nimport {\n  determineRadius,\n  intersectsCircle,\n  mouseToNodeCoords,\n} from \"../components/Canvas/canvasUtils\";\nimport { AppConnection, AppNode } from \"../App\";\nimport { CanvasState } from \"../components/Canvas/Canvas\";\nimport useAddConnection from \"./useAddConnection\";\nimport useMoveNode from \"./useMoveNode\";\nimport useMultiSelect from \"./useMultiSelect\";\nimport config from \"../config\";\n\nexport default function useOnMouseDown(\n  appNodes: AppNode[],\n  appConnections: AppConnection[],\n  addConnection: (newConnection: AppConnection) => void,\n  updateNodes: (nodesToUpdate: AppNode[], clearActiveNodes?: boolean) => void,\n  setActiveNodes: (activeNodeIds: string[]) => void,\n  clearActiveNodes: () => void,\n  clearAndRedraw: (canvasState: CanvasState) => void\n): (\n  event: React.MouseEvent | MouseEvent,\n  canvasState: CanvasState,\n  defaultBehavior: (event: React.MouseEvent | MouseEvent) => void\n) => void {\n  const makeNewConnection = useAddConnection(\n    appNodes,\n    appConnections,\n    addConnection,\n    clearAndRedraw\n  );\n  const moveNode = useMoveNode(updateNodes);\n  const multiSelect = useMultiSelect(appNodes, setActiveNodes, clearAndRedraw);\n\n  return useCallback(\n    (\n      mouseDownEvent: React.MouseEvent | MouseEvent,\n      canvasState: CanvasState,\n      defaultBehavior: (event: React.MouseEvent | MouseEvent) => void\n    ) => {\n      const nodeCoordsOfMouse = mouseToNodeCoords(mouseDownEvent, canvasState);\n\n      const activeNodes = appNodes.filter((node) => node.isActive);\n      const activeNodeIds = activeNodes.map((node) => node.id);\n\n      const clickedNode = appNodes.find((node) => {\n        const nodeRadius = determineRadius(\n          node.capacitanceJPerDegK,\n          appNodes.map((node) => node.capacitanceJPerDegK)\n        );\n        return intersectsCircle(nodeCoordsOfMouse, node.center, nodeRadius);\n      });\n\n      if (clickedNode) {\n        if (mouseDownEvent.altKey) {\n          makeNewConnection(mouseDownEvent, clickedNode, canvasState);\n        } else if (\n          mouseDownEvent[config.multiSelectKey] &&\n          activeNodeIds.includes(clickedNode.id)\n        ) {\n          setActiveNodes(activeNodeIds.filter((id) => id !== clickedNode.id));\n        } else {\n          moveNode(mouseDownEvent, clickedNode, activeNodes, canvasState);\n        }\n      } else {\n        if (mouseDownEvent[config.multiSelectKey]) {\n          multiSelect(mouseDownEvent, canvasState);\n        } else {\n          // only clear active nodes if click with no pan\n          const onMouseUp = (mouseUpEvent: React.MouseEvent | MouseEvent) => {\n            if (\n              mouseUpEvent.clientX === mouseDownEvent.clientX &&\n              mouseUpEvent.clientY === mouseDownEvent.clientY\n            ) {\n              clearActiveNodes();\n            }\n            document.removeEventListener(\"mouseup\", onMouseUp);\n          };\n          document.addEventListener(\"mouseup\", onMouseUp);\n          defaultBehavior(mouseDownEvent);\n        }\n      }\n    },\n    [\n      appNodes,\n      clearActiveNodes,\n      moveNode,\n      multiSelect,\n      makeNewConnection,\n      setActiveNodes,\n    ]\n  );\n}\n","import * as React from \"react\";\nimport { useRef } from \"react\";\nimport { diffPoints, Point } from \"../utils/pointUtils\";\n\nexport default function useClickAndDragElement(events: {\n  onDragX?: (deltaXPx: number) => void;\n  onDragY?: (deltaYPx: number) => void;\n}): (mouseDownEvent: React.MouseEvent | MouseEvent) => void {\n  const lastMousePos = useRef<Point | undefined>(undefined);\n\n  const { onDragX, onDragY } = events;\n\n  const onMouseUp = () => {\n    document.removeEventListener(\"mousemove\", onMouseMove);\n    document.removeEventListener(\"mouseup\", onMouseUp);\n  };\n\n  const onMouseMove = (mouseMoveEvent: React.MouseEvent | MouseEvent) => {\n    if (lastMousePos.current) {\n      const currentMousePos = {\n        x: mouseMoveEvent.pageX,\n        y: mouseMoveEvent.pageY,\n      };\n      const diff = diffPoints(currentMousePos, lastMousePos.current);\n      onDragX && onDragX(diff.x);\n      onDragY && onDragY(diff.y);\n      lastMousePos.current = currentMousePos;\n    }\n  };\n\n  return (mouseDownEvent: React.MouseEvent | MouseEvent) => {\n    document.addEventListener(\"mousemove\", onMouseMove);\n    document.addEventListener(\"mouseup\", onMouseUp);\n    lastMousePos.current = { x: mouseDownEvent.pageX, y: mouseDownEvent.pageY };\n  };\n}\n","import styled from \"styled-components/macro\";\n\nexport const StyledApp = styled.div<{ height: number }>`\n  display: flex;\n  height: ${(props) => props.height}px;\n  user-select: none;\n  -webkit-user-select: none; /* Chrome/Safari */\n  -moz-user-select: none; /* Firefox */\n  -ms-user-select: none; /* IE10+ */\n`;\n\nexport const StyledDraggableBorder = styled.div`\n  position: absolute;\n  z-index: 1;\n`;\n\nexport const StyledCanvasPlotBorder = styled(StyledDraggableBorder)<{\n  width: number;\n  y: number;\n  left: number;\n}>`\n  width: ${(props) => props.width * 100}%;\n  height: 10px;\n  top: ${(props) => props.y * 100}%;\n  transform: translate(0, -5px);\n  cursor: row-resize;\n  left: ${(props) => props.left * 100}%;\n`;\n\nexport const StyledLeftRightBorder = styled(StyledDraggableBorder)<{\n  x: number;\n}>`\n  height: 100%;\n  width: 10px;\n  left: ${(props) => props.x * 100}%;\n  transform: translate(-5px, 0);\n  cursor: col-resize;\n`;\n\nexport const StyledWorkspace = styled.div<{ height: number; width: number }>`\n  height: ${(props) => props.height}px;\n  width: ${(props) => props.width}px;\n`;\n\nexport const StyledCanvas = styled.div<{ height: number }>`\n  width: 100%;\n  height: ${(props) => props.height}px;\n`;\n","import { HSConnection, HSNode, ModelOutput, run } from \"hotstuff-network\";\nimport React, { useCallback, useMemo, useState } from \"react\";\nimport { Point } from \"./utils/pointUtils\";\nimport Sidebar from \"./components/Sidebar/Sidebar\";\nimport Plot from \"./components/Plot/Plot\";\nimport config from \"./config\";\nimport useWindowSize from \"./components/Canvas/hooks/useWindowSize\";\nimport Canvas, { CanvasViewState } from \"./components/Canvas/Canvas\";\nimport useDraw from \"./hooks/useDraw\";\nimport useDoubleClick from \"./hooks/useDoubleClick\";\nimport useNodeConnectionUtils from \"./hooks/useNodeConnectionUtils\";\nimport useOnMouseDown from \"./hooks/useOnMouseDown\";\nimport useKeyDown from \"./hooks/useKeyDown\";\nimport { defaultAppState } from \"./default\";\nimport useSessionStorageState from \"./hooks/useSessionStorageState\";\nimport { getCanvasCenter } from \"./components/Canvas/canvasUtils\";\nimport {\n  getNewAppConnection,\n  getNewAppNode,\n} from \"./utils/nodeConnectionUtils\";\nimport useAppStateModifiers from \"./hooks/useAppStateModifiers\";\nimport useResizablePanels from \"./hooks/useResizablePanels\";\nimport {\n  StyledApp,\n  StyledCanvas,\n  StyledCanvasPlotBorder,\n  StyledLeftRightBorder,\n  StyledWorkspace,\n} from \"./style\";\n\nconst { plotMargin, tabHeightPx, plotHeightBufferPx } = config;\n\nexport type Direction = \"L\" | \"R\" | \"U\" | \"D\";\n\nexport type AppNode = HSNode & {\n  center: Point;\n  isActive: boolean;\n  textDirection: Direction;\n};\n\nexport type AppConnection = HSConnection & {\n  sourceName: string;\n  targetName: string;\n};\n\nexport type Timing = {\n  timeStepS: number;\n  totalTimeS: number;\n};\n\nexport type PanelSizes = {\n  editorWidthFraction: number;\n  canvasHeightFraction: number;\n  tableHeightFraction: number;\n};\n\nexport type AppState = {\n  output?: ModelOutput;\n  timing: Timing;\n  nodes: AppNode[];\n  connections: AppConnection[];\n  canvasViewState: CanvasViewState;\n  savedCanvasState: CanvasViewState;\n  panelSizes: PanelSizes;\n};\n\nexport default function App(): React.ReactElement {\n  const [appState, setAppState] = useSessionStorageState<AppState>(\n    defaultAppState,\n    \"hotstuffAppState\"\n  );\n\n  const [\n    setAppNodes,\n    setAppConnections,\n    setCanvasViewState,\n    setSavedCanvasState,\n    setTiming,\n    setModelOutput,\n  ] = useAppStateModifiers(setAppState);\n\n  const [\n    addNode,\n    addConnection,\n    updateNodes,\n    deleteNodes,\n    updateConnections,\n    deleteConnections,\n    setActiveNodes,\n    clearActiveNodes,\n  ] = useNodeConnectionUtils(\n    appState.nodes,\n    setAppNodes,\n    appState.connections,\n    setAppConnections,\n    setModelOutput\n  );\n\n  const [keyboardActive, setKeyboardActive] = useState<boolean>(true);\n  useKeyDown(keyboardActive, appState.nodes, setAppNodes, deleteNodes);\n\n  const [draw, clearAndRedraw] = useDraw(appState.nodes, appState.connections);\n  const handleDoubleClick = useDoubleClick(\n    appState.nodes,\n    addNode,\n    updateNodes\n  );\n  const onMouseDown = useOnMouseDown(\n    appState.nodes,\n    appState.connections,\n    addConnection,\n    updateNodes,\n    setActiveNodes,\n    clearActiveNodes,\n    clearAndRedraw\n  );\n\n  const [size, ratio] = useWindowSize();\n  const [windowWidth, windowHeight] = size;\n\n  const [\n    canvasPlotBorderRef,\n    onMouseDownOnCanvasPlotBorder,\n    leftRightBorderRef,\n    onMouseDownOnLeftRightBorder,\n    tableControlsBorderRef,\n    onMouseDownOnTableControlsBorder,\n  ] = useResizablePanels(setAppState, windowHeight, windowWidth);\n\n  // width/heights\n  const workspaceWidth = windowWidth;\n  const workspaceHeight = windowHeight;\n  const canvasHeight = windowHeight * appState.panelSizes.canvasHeightFraction;\n  const canvasWidth =\n    windowWidth * (1 - appState.panelSizes.editorWidthFraction);\n  const plotHeight =\n    (1 - appState.panelSizes.canvasHeightFraction) * windowHeight -\n    tabHeightPx -\n    plotHeightBufferPx;\n  const plotWidth = canvasWidth;\n  const editorWidth = appState.panelSizes.editorWidthFraction * windowWidth;\n\n  const plot = useMemo(() => {\n    return (\n      <Plot\n        plotDimensions={{\n          height: plotHeight,\n          width: plotWidth,\n          margin: plotMargin,\n        }}\n        modelOutput={appState.output}\n      />\n    );\n  }, [appState.output, plotHeight, plotWidth]);\n\n  const addNodeInCenterOfCanvas = useCallback(() => {\n    addNode(\n      getNewAppNode(\n        appState.nodes,\n        getCanvasCenter(\n          canvasWidth,\n          canvasHeight,\n          appState.canvasViewState.offset,\n          appState.canvasViewState.scale\n        )\n      )\n    );\n  }, [\n    addNode,\n    appState.canvasViewState.offset,\n    appState.canvasViewState.scale,\n    appState.nodes,\n    canvasHeight,\n    canvasWidth,\n  ]);\n\n  const createNewLogicalConnection = useCallback(() => {\n    const newConnection = getNewAppConnection(\n      appState.nodes,\n      appState.connections\n    );\n    if (newConnection !== undefined) {\n      addConnection(newConnection);\n    }\n  }, [addConnection, appState.connections, appState.nodes]);\n\n  return (\n    <StyledApp height={windowHeight}>\n      <StyledCanvasPlotBorder\n        ref={canvasPlotBorderRef}\n        onMouseDown={onMouseDownOnCanvasPlotBorder}\n        y={appState.panelSizes.canvasHeightFraction}\n        width={1 - appState.panelSizes.editorWidthFraction}\n        left={0}\n      />\n      <StyledLeftRightBorder\n        ref={leftRightBorderRef}\n        onMouseDown={onMouseDownOnLeftRightBorder}\n        x={1 - appState.panelSizes.editorWidthFraction}\n      />\n      <StyledCanvasPlotBorder\n        ref={tableControlsBorderRef}\n        onMouseDown={onMouseDownOnTableControlsBorder}\n        y={appState.panelSizes.tableHeightFraction}\n        width={appState.panelSizes.editorWidthFraction}\n        left={1 - appState.panelSizes.editorWidthFraction}\n      />\n      <StyledWorkspace\n        height={workspaceHeight}\n        width={(1 - appState.panelSizes.editorWidthFraction) * workspaceWidth}\n      >\n        <StyledCanvas height={canvasHeight}>\n          <Canvas\n            canvasWidth={canvasWidth}\n            canvasHeight={canvasHeight}\n            devicePixelRatio={ratio}\n            draw={draw}\n            onMouseDown={onMouseDown}\n            handleDoubleClick={handleDoubleClick}\n            canvasViewState={appState.canvasViewState}\n            setCanvasViewState={setCanvasViewState}\n            savedCanvasViewState={appState.savedCanvasState}\n            setSavedCanvasViewState={setSavedCanvasState}\n            setKeyboardActive={setKeyboardActive}\n          />\n        </StyledCanvas>\n        {plot}\n      </StyledWorkspace>\n      <Sidebar\n        appState={appState}\n        setAppState={setAppState}\n        height={windowHeight}\n        width={editorWidth}\n        setTiming={setTiming}\n        onAddNode={addNodeInCenterOfCanvas}\n        onAddConnection={createNewLogicalConnection}\n        updateNodes={(nodes: AppNode[]) => {\n          updateNodes(nodes);\n          setModelOutput(undefined);\n        }}\n        deleteNodes={deleteNodes}\n        updateConnections={(conns: AppConnection[]) => {\n          updateConnections(conns);\n          setModelOutput(undefined);\n        }}\n        deleteConnections={deleteConnections}\n        onRunModel={() => {\n          const output = run({\n            nodes: appState.nodes,\n            connections: appState.connections,\n            timeStepS: appState.timing.timeStepS,\n            totalTimeS: appState.timing.totalTimeS,\n          });\n          if (output.errors?.length) {\n            output.errors.forEach((error) => console.error(error.message));\n          }\n          setModelOutput(output);\n        }}\n      />\n    </StyledApp>\n  );\n}\n","import * as React from \"react\";\n\nexport default function useSessionStorageState<T>(\n  defaultValue: T,\n  key: string\n): [T, React.Dispatch<React.SetStateAction<T>>] {\n  const [value, setValue] = React.useState<T>(() => {\n    const localState = window.sessionStorage.getItem(key);\n    if (localState === null || localState === undefined) {\n      return defaultValue;\n    } else {\n      return JSON.parse(localState) as T;\n    }\n  });\n\n  React.useEffect(() => {\n    window.sessionStorage.setItem(key, JSON.stringify(value));\n  }, [key, value]);\n  return [value, setValue];\n}\n","import * as React from \"react\";\nimport { useCallback } from \"react\";\nimport { CanvasViewState } from \"../components/Canvas/Canvas\";\nimport { ModelOutput } from \"hotstuff-network\";\nimport { AppConnection, AppNode, AppState, Timing } from \"../App\";\n\nexport default function useAppStateModifiers(\n  setAppState: React.Dispatch<React.SetStateAction<AppState>>\n): [\n  (newNodes: AppNode[]) => void,\n  (newConnections: AppConnection[]) => void,\n  (newCanvasState: CanvasViewState) => void,\n  (newCanvasState: CanvasViewState) => void,\n  (newTiming: Timing) => void,\n  (newModelOutput: ModelOutput | undefined) => void\n] {\n  const setAppNodes = useCallback(\n    (newNodes: AppNode[]) => {\n      setAppState((prevState) => ({\n        ...prevState,\n        nodes: newNodes,\n      }));\n    },\n    [setAppState]\n  );\n\n  const setAppConnections = useCallback(\n    (newConnections: AppConnection[]) => {\n      setAppState((prevState) => ({\n        ...prevState,\n        connections: newConnections,\n      }));\n    },\n    [setAppState]\n  );\n\n  const setCanvasViewState = useCallback(\n    (newCanvasState: CanvasViewState) => {\n      setAppState((prevState) => ({\n        ...prevState,\n        canvasViewState: newCanvasState,\n      }));\n    },\n    [setAppState]\n  );\n\n  const setSavedCanvasState = useCallback(\n    (newSavedCanvasState: CanvasViewState) => {\n      setAppState((prevState) => ({\n        ...prevState,\n        savedCanvasState: newSavedCanvasState,\n      }));\n    },\n    [setAppState]\n  );\n\n  const setTiming = useCallback(\n    (newTiming: Timing) => {\n      setAppState((prevState) => ({\n        ...prevState,\n        timing: newTiming,\n        output: undefined,\n      }));\n    },\n    [setAppState]\n  );\n\n  const setModelOutput = useCallback(\n    (newModelOutput: ModelOutput | undefined) => {\n      setAppState((prevState) => ({\n        ...prevState,\n        output: newModelOutput,\n      }));\n    },\n    [setAppState]\n  );\n\n  return [\n    setAppNodes,\n    setAppConnections,\n    setCanvasViewState,\n    setSavedCanvasState,\n    setTiming,\n    setModelOutput,\n  ];\n}\n","import { useCallback } from \"react\";\nimport { AppConnection, AppNode } from \"../App\";\nimport { ModelOutput } from \"hotstuff-network\";\n\nexport default function useNodeConnectionUtils(\n  appNodes: AppNode[],\n  setAppNodes: (newNodes: AppNode[]) => void,\n  appConnections: AppConnection[],\n  setAppConnections: (newConnections: AppConnection[]) => void,\n  setModelOutput: (newModelOutput: ModelOutput | undefined) => void\n): [\n  (node: AppNode) => void,\n  (connection: AppConnection) => void,\n  (nodesToUpdate: AppNode[], clearActiveNodes?: boolean) => void,\n  (nodeIds: string[]) => void,\n  (connsToUpdate: AppConnection[]) => void,\n  (connIds: string[]) => void,\n  (activeNodeIds: string[]) => void,\n  () => void\n] {\n  const addNode = useCallback(\n    (node: AppNode) => {\n      const newNodes = appNodes.map((node) => ({\n        ...node,\n        isActive: false,\n      }));\n      newNodes.push({ ...node, isActive: true });\n      setAppNodes(newNodes);\n      setModelOutput(undefined);\n    },\n    [appNodes, setAppNodes, setModelOutput]\n  );\n\n  const addConnection = useCallback(\n    (connection: AppConnection) => {\n      setAppConnections([...appConnections, connection]);\n      setModelOutput(undefined);\n    },\n    [appConnections, setAppConnections, setModelOutput]\n  );\n\n  const updateNodes = useCallback(\n    (nodesToUpdate: AppNode[], clearActiveNodes = false) => {\n      const newNodes = appNodes.map((node) => {\n        const nodeToUpdate = nodesToUpdate.find(\n          (newNode) => newNode.id === node.id\n        );\n        if (nodeToUpdate) {\n          return nodeToUpdate;\n        } else {\n          if (clearActiveNodes) {\n            return { ...node, isActive: false };\n          } else {\n            return node;\n          }\n        }\n      });\n      setAppNodes(newNodes);\n\n      const newConnections = appConnections.map((prevConn) => {\n        const newSourceNode = nodesToUpdate.find(\n          (nodeToUpdate) => prevConn.source.id == nodeToUpdate.id\n        );\n        if (newSourceNode) {\n          return {\n            ...prevConn,\n            source: newSourceNode,\n            sourceName: newSourceNode.name,\n          };\n        }\n\n        const newTargetNode = nodesToUpdate.find(\n          (nodeToUpdate) => prevConn.target.id == nodeToUpdate.id\n        );\n        if (newTargetNode) {\n          return {\n            ...prevConn,\n            target: newTargetNode,\n            targetName: newTargetNode.name,\n          };\n        }\n        return prevConn;\n      });\n      setAppConnections(newConnections);\n    },\n    [appConnections, appNodes, setAppConnections, setAppNodes]\n  );\n\n  const deleteNodes = useCallback(\n    (nodeIds: string[]) => {\n      const newConnections = appConnections.filter(\n        (conn) =>\n          !nodeIds.includes(conn.source.id) && !nodeIds.includes(conn.target.id)\n      );\n      setAppConnections(newConnections);\n      setModelOutput(undefined);\n\n      const newNodes = appNodes.filter((node) => !nodeIds.includes(node.id));\n      setAppNodes(newNodes);\n    },\n    [appConnections, appNodes, setAppConnections, setAppNodes, setModelOutput]\n  );\n\n  const updateConnections = useCallback(\n    (connsToUpdate: AppConnection[]) => {\n      const connIdsToUpdate = connsToUpdate.map((conn) => conn.id);\n      const oldConns = appConnections.filter(\n        (conn) => !connIdsToUpdate.includes(conn.id)\n      );\n      setAppConnections([...connsToUpdate, ...oldConns]);\n      setModelOutput(undefined);\n    },\n    [appConnections, setAppConnections, setModelOutput]\n  );\n\n  const deleteConnections = useCallback(\n    (connIds: string[]) => {\n      setAppConnections(\n        appConnections.filter((conn) => !connIds.includes(conn.id))\n      );\n      setModelOutput(undefined);\n    },\n    [appConnections, setAppConnections, setModelOutput]\n  );\n\n  const setActiveNodes = useCallback(\n    (activeNodeIds: string[]) => {\n      setAppNodes(\n        appNodes.map((node) => ({\n          ...node,\n          isActive: activeNodeIds.includes(node.id),\n        }))\n      );\n    },\n    [appNodes, setAppNodes]\n  );\n\n  const clearActiveNodes = useCallback(() => {\n    const anyActiveNodes = appNodes.find((node) => node.isActive) !== undefined;\n    if (anyActiveNodes) {\n      setAppNodes(\n        appNodes.map((node) => ({\n          ...node,\n          isActive: false,\n        }))\n      );\n    }\n  }, [appNodes, setAppNodes]);\n\n  return [\n    addNode,\n    addConnection,\n    updateNodes,\n    deleteNodes,\n    updateConnections,\n    deleteConnections,\n    setActiveNodes,\n    clearActiveNodes,\n  ];\n}\n","import React, { useEffect } from \"react\";\nimport { AppNode } from \"../App\";\n\nexport default function useKeyDown(\n  keyboardActive: boolean,\n  appNodes: AppNode[],\n  setAppNodes: (newNodes: AppNode[]) => void,\n  deleteNodes: (nodeIds: string[]) => void\n): void {\n  useEffect(() => {\n    const onKeyDown = (event: React.KeyboardEvent | KeyboardEvent) => {\n      if (keyboardActive) {\n        // meta + A makes all nodes active\n        if (event.metaKey && event.keyCode === 65) {\n          event.preventDefault();\n          setAppNodes(\n            appNodes.map((node) => {\n              return { ...node, isActive: true };\n            })\n          );\n        }\n\n        // delete active nodes on back/del\n        if (event.key === \"Backspace\" || event.key === \"Delete\") {\n          event.preventDefault();\n          deleteNodes(\n            appNodes.filter((node) => node.isActive).map((node) => node.id)\n          );\n        }\n\n        // escape key makes all inactive\n        if (event.keyCode === 27) {\n          setAppNodes(appNodes.map((node) => ({ ...node, isActive: false })));\n        }\n      }\n    };\n    document.addEventListener(\"keydown\", onKeyDown);\n    return () => document.removeEventListener(\"keydown\", onKeyDown);\n  }, [appNodes, deleteNodes, keyboardActive, setAppNodes]);\n}\n","import React, { useCallback } from \"react\";\nimport { CanvasState } from \"../components/Canvas/Canvas\";\nimport {\n  determineRadius,\n  intersectsCircle,\n  mouseToNodeCoords,\n  rotatedDirection,\n} from \"../components/Canvas/canvasUtils\";\nimport { AppNode } from \"../App\";\nimport { getNewAppNode } from \"../utils/nodeConnectionUtils\";\nimport config from \"../config\";\n\nexport default function useDoubleClick(\n  appNodes: AppNode[],\n  addNode: (node: AppNode) => void,\n  updateNodes: (nodes: AppNode[]) => void\n): (event: React.MouseEvent | MouseEvent, canvasState: CanvasState) => void {\n  return useCallback(\n    (event: React.MouseEvent | MouseEvent, canvasState: CanvasState) => {\n      event.preventDefault();\n      if (event[config.multiSelectKey]) {\n        return;\n      }\n\n      const nodeCoordsOfMouse = mouseToNodeCoords(event, canvasState);\n\n      const doubleClickedNode = appNodes.find((node) => {\n        const nodeRadius = determineRadius(\n          node.capacitanceJPerDegK,\n          appNodes.map((node) => node.capacitanceJPerDegK)\n        );\n        return intersectsCircle(nodeCoordsOfMouse, node.center, nodeRadius);\n      });\n\n      if (doubleClickedNode) {\n        updateNodes([\n          {\n            ...doubleClickedNode,\n            textDirection: rotatedDirection(doubleClickedNode.textDirection),\n          },\n        ]);\n      } else {\n        const newAppNode = getNewAppNode(appNodes, nodeCoordsOfMouse);\n        addNode(newAppNode);\n      }\n    },\n    [addNode, appNodes, updateNodes]\n  );\n}\n","import { useLayoutEffect, useState } from \"react\";\n\nexport default function useWindowSize(): [[number, number], number] {\n  const [size, setSize] = useState<[number, number]>([0, 0]);\n  const [ratio, setRatio] = useState(1);\n\n  useLayoutEffect(() => {\n    function updateSize() {\n      setSize([window.innerWidth, window.innerHeight]);\n    }\n    function updateRatio() {\n      const { devicePixelRatio: ratio = 1 } = window;\n      setRatio(ratio);\n    }\n    window.addEventListener(\"resize\", updateSize);\n    window.addEventListener(\"resize\", updateRatio);\n    updateSize();\n    updateRatio();\n    return () => {\n      window.removeEventListener(\"resize\", updateSize);\n      window.removeEventListener(\"resize\", updateRatio);\n    };\n  }, []);\n  return [size, ratio];\n}\n","import * as React from \"react\";\nimport { useCallback, useRef } from \"react\";\nimport useClickAndDragElement from \"./useClickAndDragElement\";\nimport { AppState } from \"../App\";\n\nexport default function useResizablePanels(\n  setAppState: React.Dispatch<React.SetStateAction<AppState>>,\n  windowHeight: number,\n  windowWidth: number\n): [\n  React.MutableRefObject<null>,\n  (mouseDownEvent: MouseEvent | React.MouseEvent<Element, MouseEvent>) => void,\n  React.MutableRefObject<null>,\n  (mouseDownEvent: MouseEvent | React.MouseEvent<Element, MouseEvent>) => void,\n  React.MutableRefObject<null>,\n  (mouseDownEvent: MouseEvent | React.MouseEvent<Element, MouseEvent>) => void\n] {\n  const canvasPlotBorderRef = useRef(null);\n  const onDragYCanvasPlot = useCallback(\n    (deltaYPx: number) => {\n      setAppState((prevAppState) => ({\n        ...prevAppState,\n        panelSizes: {\n          ...prevAppState.panelSizes,\n          canvasHeightFraction:\n            prevAppState.panelSizes.canvasHeightFraction +\n            deltaYPx / windowHeight,\n        },\n      }));\n    },\n    [setAppState, windowHeight]\n  );\n  const onMouseDownOnCanvasPlotBorder = useClickAndDragElement({\n    onDragY: onDragYCanvasPlot,\n  });\n\n  const leftRightBorderRef = useRef(null);\n  const onDragXLeftRight = useCallback(\n    (deltaXPx: number) => {\n      setAppState((prevAppState) => ({\n        ...prevAppState,\n        panelSizes: {\n          ...prevAppState.panelSizes,\n          editorWidthFraction:\n            prevAppState.panelSizes.editorWidthFraction -\n            deltaXPx / windowWidth,\n        },\n      }));\n    },\n    [setAppState, windowWidth]\n  );\n  const onMouseDownOnLeftRightBorder = useClickAndDragElement({\n    onDragX: onDragXLeftRight,\n  });\n\n  const tableControlsBorderRef = useRef(null);\n  const onDragYTableControls = useCallback(\n    (deltaYPx: number) => {\n      setAppState((prevAppState) => ({\n        ...prevAppState,\n        panelSizes: {\n          ...prevAppState.panelSizes,\n          tableHeightFraction:\n            prevAppState.panelSizes.tableHeightFraction +\n            deltaYPx / windowHeight,\n        },\n      }));\n    },\n    [setAppState, windowHeight]\n  );\n  const onMouseDownOnTableControlsBorder = useClickAndDragElement({\n    onDragY: onDragYTableControls,\n  });\n\n  return [\n    canvasPlotBorderRef,\n    onMouseDownOnCanvasPlotBorder,\n    leftRightBorderRef,\n    onMouseDownOnLeftRightBorder,\n    tableControlsBorderRef,\n    onMouseDownOnTableControlsBorder,\n  ];\n}\n","export function forceShowScrollbars(): void {\n  // Returns whether scrollbars show up on scrollable elements.\n  // This is false on Macs when the \"General > Show scroll bars\" setting is\n  // not set to \"Always\" (the default is \"When scrolling\"). The approach\n  // taken here is to create an element that will scroll and then compare\n  // its outer width (including scrollbars) to its inner width (excluding\n  // scrollbars).\n  function areScrollbarsVisible() {\n    const scrollableElem = document.createElement(\"div\"),\n      innerElem = document.createElement(\"div\");\n    scrollableElem.style.width = \"30px\";\n    scrollableElem.style.height = \"30px\";\n    scrollableElem.style.overflow = \"scroll\";\n    scrollableElem.style.borderWidth = \"0\";\n    innerElem.style.width = \"30px\";\n    innerElem.style.height = \"60px\";\n    scrollableElem.appendChild(innerElem);\n    document.body.appendChild(scrollableElem); // Elements only have width if they're in the layout\n    const diff = scrollableElem.offsetWidth - scrollableElem.clientWidth;\n    document.body.removeChild(scrollableElem);\n    return diff > 0;\n  }\n\n  window.addEventListener(\"load\", function () {\n    // Show scrollbars if they're hidden.\n    if (!areScrollbarsVisible()) {\n      document.body.classList.add(\"force-show-scrollbars\");\n    }\n  });\n}\n","import * as React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport { forceShowScrollbars } from \"./utils/scrollBar\";\n\nforceShowScrollbars();\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}