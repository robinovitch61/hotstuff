{"version":3,"sources":["components/App.tsx","index.tsx"],"names":["colors","DEFAULT_NODES","DEFAULT_CONNECTIONS","StyledForm","styled","form","StyledCharts","div","StyledFormShortTextInput","StyledFormLongTextInput","StyledLabelShort","label","StyledLabelLong","StyledTextArea","textarea","StyledSubmit","input","FormShortTextInput","props","type","defaultValue","defaultVal","onChange","event","FormLongTextInput","style","marginRight","App","useState","undefined","results","setResults","totalTimeS","setTotalTimeS","timeStepS","setTimeStepS","parseTextToNodes","nodes","setNodes","nodeText","setNodeText","parseTextToConnections","connections","setConnections","connectionText","setConnectionText","text","JSON5","map","node","makeNode","name","temperatureDegC","capacitanceJPerDegK","powerGenW","isBoundary","e","console","error","conn","sourceNode","filter","targetNode","makeConnection","source","target","resistanceDegKPerW","kind","useEffect","plotParams","left","right","top","bottom","nodeResults","length","data","lowerMag","Math","floor","log10","divisibleBy","pow","includeAll","timeSeriesS","temps","heatTransfers","forEach","t","idx","val","abs","temp","ht","nodeResult","tempDegC","connectionResults","connectionResult","connection","heatTransferW","push","plotShape","tempPlotData","heatTransferPlotData","onSubmit","start","performance","now","run","end","log","runModel","preventDefault","ResponsiveContainer","height","className","LineChart","margin","CartesianGrid","strokeDasharray","XAxis","dataKey","value","position","dy","YAxis","angle","dx","Tooltip","Legend","layout","verticalAlign","align","wrapperStyle","paddingLeft","Line","stroke","activeDot","r","id","fontSize","parseFloat","JSON","stringify","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.ae698024.chunk.js","sourcesContent":["import React, { ChangeEvent, useEffect, useRef, useState } from \"react\";\nimport Qty from \"js-quantities\"; // https://github.com/gentooboontoo/js-quantities/blob/master/src/quantities/definitions.js\nimport Canvas from \"./Canvas/Canvas\";\nimport * as JSON5 from \"json5\";\nimport {\n  run,\n  makeNode,\n  makeConnection,\n  ModelOutput,\n  NodeResult,\n  HSNode,\n  HSConnection,\n} from \"hotstuff-network\";\nimport * as d3 from \"d3\";\nimport styled from \"styled-components\";\nimport {\n  CartesianGrid,\n  Legend,\n  Line,\n  LineChart,\n  ResponsiveContainer,\n  Tooltip,\n  XAxis,\n  YAxis,\n  Label,\n} from \"recharts\";\n\nconst colors = [\n  \"#16a085\",\n  \"#2ecc71\",\n  \"#3498db\",\n  \"#9b59b6\",\n  \"#34495e\",\n  \"#f1c40f\",\n  \"#e67e22\",\n  \"#e74c3c\",\n];\n\nconst MAX_PLOT_POINTS_PER_NODE = 400;\nconst DEFAULT_TIMESTEP = 0.1;\nconst DEFAULT_TOTAL_TIME = 120;\nconst DEFAULT_NODES = `[\n  {\n    \"name\": \"first\",\n    \"temperatureDegC\": 120,\n    \"capacitanceJPerDegK\": 200,\n    \"powerGenW\": 0,\n    \"isBoundary\": false\n  },\n  {\n    \"name\": \"second\",\n    \"temperatureDegC\": 40,\n    \"capacitanceJPerDegK\": 10,\n    \"powerGenW\": 3,\n    \"isBoundary\": true\n  },\n  {\n    \"name\": \"third\",\n    \"temperatureDegC\": -10,\n    \"capacitanceJPerDegK\": 8,\n    \"powerGenW\": 10,\n    \"isBoundary\": false\n  },\n]`;\nconst DEFAULT_CONNECTIONS = `[\n  {\n    source: \"first\",\n    target: \"second\",\n    resistanceDegKPerW: 0.1,\n    kind: \"bi\",\n  },\n  {\n    source: \"second\",\n    target: \"third\",\n    resistanceDegKPerW: 10,\n    kind: \"bi\",\n  },\n]`;\n\nexport type Point = {\n  xPos: number;\n  yPos: number;\n};\n\nexport type HotNode = {\n  topLeftCorner: Point;\n  bottomRightCorner: Point;\n  shape: \"Circle\" | \"Rectangle\";\n  thermalCapacitance: Qty;\n  temperature: Qty;\n  isBoundary: boolean;\n};\n\nconst StyledForm = styled.form`\n  display: flex;\n  flex-direction: column;\n  width: 100%;\n  align-items: center;\n`;\n\nconst StyledCharts = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  width: 100%;\n  margin: 2em 0;\n\n  .chart {\n    width: 70% !important;\n\n    @media only screen and (max-width: 600px) {\n      width: 95% !important;\n    }\n  }\n`;\n\nconst StyledFormShortTextInput = styled.div`\n  display: flex;\n  width: 100%;\n  justify-content: center;\n  margin: 0.5em;\n`;\n\nconst StyledFormLongTextInput = styled.div`\n  display: flex;\n  width: 100%;\n  justify-content: center;\n  margin: 0.5em;\n`;\n\nconst StyledLabelShort = styled.label`\n  display: flex;\n  width: 400px;\n  justify-content: space-between;\n`;\n\nconst StyledLabelLong = styled.label`\n  display: flex;\n  flex-direction: column;\n  width: 600px;\n  align-items: center;\n`;\n\nconst StyledTextArea = styled.textarea`\n  width: 80%;\n  min-width: 80%;\n  max-width: 80%;\n  min-height: 200px;\n`;\n\nconst StyledSubmit = styled.input`\n  width: 100px;\n  height: 30px;\n`;\n\nfunction getTempRange(nodeTemps: NodeResult[]): number[] {\n  const range = [0, 0];\n  nodeTemps.forEach((temps) => {\n    const min = Math.min(...temps.tempDegC);\n    const max = Math.max(...temps.tempDegC);\n    if (min < range[0]) {\n      range[0] = min;\n    }\n    if (max > range[1]) {\n      range[1] = max;\n    }\n  });\n  return range;\n}\n\ntype FormShortTextInputProps = {\n  label: string;\n  defaultVal?: number;\n  onChange: (event: ChangeEvent<HTMLInputElement>) => void;\n};\n\ntype FormLongTextInputProps = {\n  label: string;\n  defaultVal?: string;\n  onChange: (event: ChangeEvent<HTMLTextAreaElement>) => void;\n};\n\nfunction FormShortTextInput(props: FormShortTextInputProps) {\n  return (\n    <StyledFormShortTextInput>\n      <StyledLabelShort>\n        {props.label}\n        <input\n          type=\"text\"\n          defaultValue={props.defaultVal}\n          onChange={(event) => props.onChange(event)}\n        />\n      </StyledLabelShort>\n    </StyledFormShortTextInput>\n  );\n}\n\nfunction FormLongTextInput(props: FormLongTextInputProps) {\n  return (\n    <StyledFormLongTextInput>\n      <StyledLabelLong>\n        <div style={{ marginRight: \"10px\" }}>{props.label}</div>\n        <StyledTextArea\n          defaultValue={props.defaultVal}\n          onChange={(event) => props.onChange(event)}\n        />\n      </StyledLabelLong>\n    </StyledFormLongTextInput>\n  );\n}\n\nexport default function App() {\n  const [results, setResults] = useState<ModelOutput | undefined>(undefined);\n  const [totalTimeS, setTotalTimeS] = useState(DEFAULT_TOTAL_TIME);\n  const [timeStepS, setTimeStepS] = useState(DEFAULT_TIMESTEP);\n  const [nodes, setNodes] = useState<HSNode[]>(parseTextToNodes(DEFAULT_NODES));\n  const [nodeText, setNodeText] = useState(DEFAULT_NODES);\n  const [connections, setConnections] = useState<HSConnection[]>(\n    parseTextToConnections(parseTextToNodes(DEFAULT_NODES), DEFAULT_CONNECTIONS)\n  );\n  const [connectionText, setConnectionText] = useState(DEFAULT_CONNECTIONS);\n  const [plot, setPlot] = useState<null | d3.Selection<\n    SVGSVGElement | null,\n    unknown,\n    null,\n    undefined\n  >>(null);\n\n  // update both nodes and connections on text update\n  useEffect(() => {\n    const nodes = parseTextToNodes(nodeText);\n    setNodes(nodes);\n    const connections = parseTextToConnections(nodes, connectionText);\n    setConnections(connections);\n  }, [nodeText, connectionText]);\n\n  function runModel(): ModelOutput {\n    const start = performance.now();\n    const results = run({\n      nodes,\n      connections,\n      timeStepS,\n      totalTimeS,\n    });\n    const end = performance.now();\n    console.log(`Model took ${end - start} ms`);\n    return results;\n  }\n\n  function parseTextToNodes(text: string): HSNode[] {\n    try {\n      const parsed = JSON5.parse(text);\n      return parsed.map((node: any) =>\n        makeNode({\n          name: node[\"name\"],\n          temperatureDegC: node[\"temperatureDegC\"],\n          capacitanceJPerDegK: node[\"capacitanceJPerDegK\"],\n          powerGenW: node[\"powerGenW\"],\n          isBoundary: node[\"isBoundary\"],\n        })\n      );\n    } catch (e) {\n      console.error(e);\n      return [];\n    }\n  }\n\n  function parseTextToConnections(\n    nodes: HSNode[],\n    text: string\n  ): HSConnection[] {\n    try {\n      const parsed = JSON5.parse(text);\n      return parsed.map((conn: any) => {\n        const sourceNode = nodes.filter(\n          (node) => node.name === conn[\"source\"]\n        )[0];\n        const targetNode = nodes.filter(\n          (node) => node.name === conn[\"target\"]\n        )[0];\n        return makeConnection({\n          source: sourceNode,\n          target: targetNode,\n          resistanceDegKPerW: conn[\"resistanceDegKPerW\"],\n          kind: conn[\"bi\"],\n        });\n      });\n    } catch (e) {\n      console.error(e);\n      return [];\n    }\n  }\n\n  // show the temps of the first node as dots vertically along the svg\n  const plotParams = {\n    height: 350,\n    margin: {\n      left: 5,\n      right: 5,\n      top: 40,\n      bottom: 40,\n    },\n  };\n\n  function plotShape(data: ModelOutput): [any[], any[]] {\n    const lowerMag = Math.floor(Math.log10(data.totalTimeS));\n    const divisibleBy = Math.pow(10, lowerMag - 1);\n\n    function include(val: number) {\n      return Math.abs(val % divisibleBy) === 0;\n    }\n\n    const includeAll = data.timeSeriesS.length < MAX_PLOT_POINTS_PER_NODE;\n    const temps: any[] = [];\n    const heatTransfers: any[] = [];\n    data.timeSeriesS.forEach((t, idx) => {\n      if (includeAll || include(t)) {\n        const temp: any = { name: t };\n        const ht: any = { name: t };\n        data.nodeResults.forEach((nodeResult) => {\n          temp[nodeResult.node.name] = nodeResult.tempDegC[idx];\n        });\n        data.connectionResults.forEach((connectionResult) => {\n          ht[\n            `${connectionResult.connection.source.name} to ${connectionResult.connection.target.name}`\n          ] = connectionResult.heatTransferW[idx];\n        });\n        temps.push(temp);\n        heatTransfers.push(ht);\n      }\n    });\n    return [temps, heatTransfers];\n  }\n\n  const [tempPlotData, heatTransferPlotData] =\n    !!results && results.nodeResults.length > 0 ? plotShape(results) : [[], []];\n\n  return (\n    <div>\n      <StyledForm\n        onSubmit={(event) => {\n          try {\n            setResults(runModel());\n          } catch (e) {\n            console.error(e);\n          }\n          event.preventDefault();\n        }}\n      >\n        {!!results && results.nodeResults.length > 0 ? (\n          <StyledCharts>\n            <ResponsiveContainer height={plotParams.height} className={\"chart\"}>\n              <LineChart\n                data={tempPlotData}\n                margin={{\n                  top: 0,\n                  right: plotParams.margin.right,\n                  left: plotParams.margin.left,\n                  bottom: plotParams.margin.bottom,\n                }}\n              >\n                <CartesianGrid strokeDasharray=\"3 3\" />\n                <XAxis\n                  dataKey=\"name\"\n                  label={{\n                    value: \"Time [seconds]\",\n                    position: \"middle\",\n                    dy: 20,\n                  }}\n                />\n                <YAxis\n                  label={{\n                    value: \"Temperature [degC]\",\n                    position: \"middle\",\n                    angle: -90,\n                    dx: -20,\n                  }}\n                />\n                <Tooltip />\n                <Legend\n                  layout=\"horizontal\"\n                  verticalAlign=\"top\"\n                  align=\"center\"\n                  wrapperStyle={{\n                    paddingLeft: \"10px\",\n                  }}\n                />\n                {results.nodeResults.map((nodeResult, idx) => {\n                  return (\n                    <Line\n                      key={nodeResult.node.id}\n                      type={\"monotone\"}\n                      dataKey={nodeResult.node.name}\n                      stroke={colors[idx]}\n                      activeDot={{ r: 8 }}\n                    />\n                  );\n                })}\n              </LineChart>\n            </ResponsiveContainer>\n            <ResponsiveContainer height={plotParams.height} className={\"chart\"}>\n              <LineChart\n                height={plotParams.height}\n                data={heatTransferPlotData}\n                margin={{\n                  top: 0,\n                  right: plotParams.margin.right,\n                  left: plotParams.margin.left,\n                  bottom: plotParams.margin.bottom,\n                }}\n              >\n                <CartesianGrid strokeDasharray=\"3 3\" />\n                <XAxis\n                  dataKey=\"name\"\n                  label={{\n                    value: \"Time [seconds]\",\n                    position: \"middle\",\n                    dy: 20,\n                  }}\n                />\n                <YAxis\n                  label={{\n                    value: \"Heat Transfer [Watts]\",\n                    position: \"middle\",\n                    angle: -90,\n                    dx: -20,\n                  }}\n                />\n                <Tooltip />\n                <Legend\n                  layout=\"horizontal\"\n                  verticalAlign=\"top\"\n                  align=\"center\"\n                  wrapperStyle={{\n                    paddingLeft: \"10px\",\n                  }}\n                  fontSize={5}\n                />\n                {results.connectionResults.map((connectionResult, idx) => {\n                  return (\n                    <Line\n                      key={connectionResult.connection.id}\n                      type={\"monotone\"}\n                      dataKey={`${connectionResult.connection.source.name} to ${connectionResult.connection.target.name}`}\n                      stroke={colors[idx]}\n                      activeDot={{ r: 8 }}\n                    />\n                  );\n                })}\n              </LineChart>\n            </ResponsiveContainer>\n          </StyledCharts>\n        ) : (\n          <h1>Welcome to hotstuff.network</h1>\n        )}\n        <StyledSubmit type=\"submit\" value=\"Go\" />\n        <FormShortTextInput\n          label={\"Time Step [seconds]\"}\n          defaultVal={DEFAULT_TIMESTEP}\n          onChange={(event) => setTimeStepS(parseFloat(event.target.value))}\n        />\n        <FormShortTextInput\n          label={\"Total Run Time [seconds]\"}\n          defaultVal={DEFAULT_TOTAL_TIME}\n          onChange={(event) => setTotalTimeS(parseFloat(event.target.value))}\n        />\n        <FormLongTextInput\n          label={\"Nodes\"}\n          defaultVal={DEFAULT_NODES}\n          onChange={(event) => setNodeText(event.target.value)}\n        />\n        <FormLongTextInput\n          label={\"Connections\"}\n          defaultVal={DEFAULT_CONNECTIONS}\n          onChange={(event) => setConnectionText(event.target.value)}\n        />\n      </StyledForm>\n      <pre>{JSON.stringify(results, null, 2)}</pre>\n    </div>\n  );\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./components/App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}